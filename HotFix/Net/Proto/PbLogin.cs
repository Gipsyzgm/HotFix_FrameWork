// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbLogin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PbLogin {

  #region Enums
  /// <summary>
  ///平台登录方式
  /// </summary>
  public enum Enum_login_platform {
    /// <summary>
    ///账号密码登录
    /// </summary>
    LpAccountPwd = 0,
    /// <summary>
    ///畅游
    /// </summary>
    LpCy = 1,
  }

  /// <summary>
  ///登录验证结构枚举
  /// </summary>
  public enum Enum_verify_result {
    /// <summary>
    ///未知错误
    /// </summary>
    VrUnknown = 0,
    /// <summary>
    ///登录成功
    /// </summary>
    VrSucceed = 1,
    /// <summary>
    ///验证失败
    /// </summary>
    VrFailure = 2,
    /// <summary>
    ///服务器Id错误
    /// </summary>
    VrServerIdError = 3,
    /// <summary>
    ///渠道未开放
    /// </summary>
    VrChError = 4,
    /// <summary>
    ///禁止登陆
    /// </summary>
    VrBanned = 5,
  }

  /// <summary>
  ///登录绑定类型
  /// </summary>
  public enum Enum_login_type {
    /// <summary>
    ///账号密码登录
    /// </summary>
    LtAccountPwd = 0,
    /// <summary>
    ///邮箱登录
    /// </summary>
    LtMail = 1,
    /// <summary>
    ///facebook登录
    /// </summary>
    LtFacebook = 2,
    /// <summary>
    ///google登录
    /// </summary>
    LtGoogle = 3,
    /// <summary>
    ///apple登录
    /// </summary>
    LtApple = 4,
    /// <summary>
    ///apple gamecenter
    /// </summary>
    LtGameCenter = 5,
  }

  /// <summary>
  ///绑定验证结构枚举
  /// </summary>
  public enum Enum_bind_result {
    /// <summary>
    ///未知错误
    /// </summary>
    BrUnknown = 0,
    /// <summary>
    ///绑定成功
    /// </summary>
    BrSucceed = 1,
    /// <summary>
    ///验证失败
    /// </summary>
    BrFailure = 2,
    /// <summary>
    ///Id已用于其他账号
    /// </summary>
    BrIdUsed = 3,
    /// <summary>
    ///渠道未开放
    /// </summary>
    BrChError = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///请求登录验证
  /// </summary>
  public sealed class CS_login_verify : pb::IMessage {
    private static readonly pb::MessageParser<CS_login_verify> _parser = new pb::MessageParser<CS_login_verify>(() => new CS_login_verify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_login_verify> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 1;
    private string platformId_ = "";
    /// <summary>
    ///平台用户唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private global::PbLogin.Enum_login_platform platform_ = 0;
    /// <summary>
    ///平台类型 0账密登录 1畅游sdk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_platform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///LoginServer生成的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private int serverId_;
    /// <summary>
    ///服务器Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private int timestamp_;
    /// <summary>
    ///LoginServer登录时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "ChId" field.</summary>
    public const int ChIdFieldNumber = 6;
    private string chId_ = "";
    /// <summary>
    ///渠道Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChId {
      get { return chId_; }
      set {
        chId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Lang" field.</summary>
    public const int LangFieldNumber = 7;
    private int lang_;
    /// <summary>
    ///登录选择的默认语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lang {
      get { return lang_; }
      set {
        lang_ = value;
      }
    }

    /// <summary>Field number for the "LoginType" field.</summary>
    public const int LoginTypeFieldNumber = 8;
    private global::PbLogin.Enum_login_type loginType_ = 0;
    /// <summary>
    ///登录类型 0账密 1游客 2facebook 3Apple
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_type LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 9;
    private string deviceId_ = "";
    /// <summary>
    ///设备id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 10;
    private string channel_ = "";
    /// <summary>
    ///sdk推广渠道号 10位（getMediaChannelId）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 11;
    private string version_ = "";
    /// <summary>
    ///客户端版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SdkPayCh" field.</summary>
    public const int SdkPayChFieldNumber = 12;
    private string sdkPayCh_ = "";
    /// <summary>
    ///sdk充值渠道号 4位（getChannel）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkPayCh {
      get { return sdkPayCh_; }
      set {
        sdkPayCh_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsReLogin" field.</summary>
    public const int IsReLoginFieldNumber = 13;
    private bool isReLogin_;
    /// <summary>
    ///是否为重登
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReLogin {
      get { return isReLogin_; }
      set {
        isReLogin_ = value;
      }
    }

    /// <summary>Field number for the "ServerStartTime" field.</summary>
    public const int ServerStartTimeFieldNumber = 14;
    private int serverStartTime_;
    /// <summary>
    ///重登时带到服务器验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerStartTime {
      get { return serverStartTime_; }
      set {
        serverStartTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlatformId);
      }
      if (Platform != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Platform);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Timestamp);
      }
      if (ChId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ChId);
      }
      if (Lang != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Lang);
      }
      if (LoginType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) LoginType);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DeviceId);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Channel);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Version);
      }
      if (SdkPayCh.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SdkPayCh);
      }
      if (IsReLogin != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsReLogin);
      }
      if (ServerStartTime != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ServerStartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (ChId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChId);
      }
      if (Lang != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lang);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (SdkPayCh.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkPayCh);
      }
      if (IsReLogin != false) {
        size += 1 + 1;
      }
      if (ServerStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerStartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlatformId = input.ReadString();
            break;
          }
          case 16: {
            platform_ = (global::PbLogin.Enum_login_platform) input.ReadEnum();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 40: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 50: {
            ChId = input.ReadString();
            break;
          }
          case 56: {
            Lang = input.ReadInt32();
            break;
          }
          case 64: {
            loginType_ = (global::PbLogin.Enum_login_type) input.ReadEnum();
            break;
          }
          case 74: {
            DeviceId = input.ReadString();
            break;
          }
          case 82: {
            Channel = input.ReadString();
            break;
          }
          case 90: {
            Version = input.ReadString();
            break;
          }
          case 98: {
            SdkPayCh = input.ReadString();
            break;
          }
          case 104: {
            IsReLogin = input.ReadBool();
            break;
          }
          case 112: {
            ServerStartTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到登录验证
  /// </summary>
  public sealed class SC_login_verify : pb::IMessage {
    private static readonly pb::MessageParser<SC_login_verify> _parser = new pb::MessageParser<SC_login_verify>(() => new SC_login_verify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_verify> Parser { get { return _parser; } }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbLogin.Enum_verify_result result_ = 0;
    /// <summary>
    ///验证结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_verify_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private global::PbLogin.Enum_login_platform platform_ = 0;
    /// <summary>
    ///平台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_platform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "DefaultName" field.</summary>
    public const int DefaultNameFieldNumber = 3;
    private string defaultName_ = "";
    /// <summary>
    ///验证成功，返回平台默认名字	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultName {
      get { return defaultName_; }
      set {
        defaultName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 4;
    private string platformId_ = "";
    /// <summary>
    ///验证成功，返回平台用户的唯一Id		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerTime" field.</summary>
    public const int ServerTimeFieldNumber = 5;
    private int serverTime_;
    /// <summary>
    ///服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "IsReLogin" field.</summary>
    public const int IsReLoginFieldNumber = 6;
    private bool isReLogin_;
    /// <summary>
    ///是否为重登
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReLogin {
      get { return isReLogin_; }
      set {
        isReLogin_ = value;
      }
    }

    /// <summary>Field number for the "UTCOffset" field.</summary>
    public const int UTCOffsetFieldNumber = 7;
    private int uTCOffset_;
    /// <summary>
    ///UTC时间偏移量，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UTCOffset {
      get { return uTCOffset_; }
      set {
        uTCOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Platform != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Platform);
      }
      if (DefaultName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DefaultName);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlatformId);
      }
      if (ServerTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerTime);
      }
      if (IsReLogin != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsReLogin);
      }
      if (UTCOffset != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UTCOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (DefaultName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultName);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
      }
      if (IsReLogin != false) {
        size += 1 + 1;
      }
      if (UTCOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UTCOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbLogin.Enum_verify_result) input.ReadEnum();
            break;
          }
          case 16: {
            platform_ = (global::PbLogin.Enum_login_platform) input.ReadEnum();
            break;
          }
          case 26: {
            DefaultName = input.ReadString();
            break;
          }
          case 34: {
            PlatformId = input.ReadString();
            break;
          }
          case 40: {
            ServerTime = input.ReadInt32();
            break;
          }
          case 48: {
            IsReLogin = input.ReadBool();
            break;
          }
          case 56: {
            UTCOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到登录成功或创角成功返回角色信息
  /// </summary>
  public sealed class SC_login_playerInfo : pb::IMessage {
    private static readonly pb::MessageParser<SC_login_playerInfo> _parser = new pb::MessageParser<SC_login_playerInfo>(() => new SC_login_playerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_playerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///角色SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 5;
    private long gold_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Ticket" field.</summary>
    public const int TicketFieldNumber = 6;
    private int ticket_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "KeepLoginNum" field.</summary>
    public const int KeepLoginNumFieldNumber = 7;
    private int keepLoginNum_;
    /// <summary>
    ///连续登录次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepLoginNum {
      get { return keepLoginNum_; }
      set {
        keepLoginNum_ = value;
      }
    }

    /// <summary>Field number for the "RegDay" field.</summary>
    public const int RegDayFieldNumber = 8;
    private int regDay_;
    /// <summary>
    ///注册天数(可做登录天数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegDay {
      get { return regDay_; }
      set {
        regDay_ = value;
      }
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 9;
    private string id_ = "";
    /// <summary>
    ///玩家唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PfUserId" field.</summary>
    public const int PfUserIdFieldNumber = 10;
    private string pfUserId_ = "";
    /// <summary>
    ///平台的用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PfUserId {
      get { return pfUserId_; }
      set {
        pfUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 11;
    private int power_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "NextAddAPTime" field.</summary>
    public const int NextAddAPTimeFieldNumber = 12;
    private int nextAddAPTime_;
    /// <summary>
    ///下次恢复体力时间戳(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextAddAPTime {
      get { return nextAddAPTime_; }
      set {
        nextAddAPTime_ = value;
      }
    }

    /// <summary>Field number for the "CreateTime" field.</summary>
    public const int CreateTimeFieldNumber = 13;
    private int createTime_;
    /// <summary>
    ///创角时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "PayMoney" field.</summary>
    public const int PayMoneyFieldNumber = 14;
    private int payMoney_;
    /// <summary>
    ///累计充值金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayMoney {
      get { return payMoney_; }
      set {
        payMoney_ = value;
      }
    }

    /// <summary>Field number for the "LoginDay" field.</summary>
    public const int LoginDayFieldNumber = 15;
    private int loginDay_;
    /// <summary>
    ///累计登录天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginDay {
      get { return loginDay_; }
      set {
        loginDay_ = value;
      }
    }

    /// <summary>Field number for the "IsReLogin" field.</summary>
    public const int IsReLoginFieldNumber = 16;
    private bool isReLogin_;
    /// <summary>
    ///是否为重登数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReLogin {
      get { return isReLogin_; }
      set {
        isReLogin_ = value;
      }
    }

    /// <summary>Field number for the "IsSeasonVip" field.</summary>
    public const int IsSeasonVipFieldNumber = 17;
    private bool isSeasonVip_;
    /// <summary>
    ///当前赛季是否购买令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSeasonVip {
      get { return isSeasonVip_; }
      set {
        isSeasonVip_ = value;
      }
    }

    /// <summary>Field number for the "SeasonExp" field.</summary>
    public const int SeasonExpFieldNumber = 18;
    private int seasonExp_;
    /// <summary>
    ///令牌经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonExp {
      get { return seasonExp_; }
      set {
        seasonExp_ = value;
      }
    }

    /// <summary>Field number for the "SeasonId" field.</summary>
    public const int SeasonIdFieldNumber = 19;
    private int seasonId_;
    /// <summary>
    ///赛季id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "DowerLevel" field.</summary>
    public const int DowerLevelFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_dowerLevel_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> dowerLevel_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前天赋等级(9个)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DowerLevel {
      get { return dowerLevel_; }
    }

    /// <summary>Field number for the "TotalDowerNum" field.</summary>
    public const int TotalDowerNumFieldNumber = 21;
    private int totalDowerNum_;
    /// <summary>
    ///累计升级天赋次数（用于+1 *系数计算金币消耗）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDowerNum {
      get { return totalDowerNum_; }
      set {
        totalDowerNum_ = value;
      }
    }

    /// <summary>Field number for the "LeftDowerPoint" field.</summary>
    public const int LeftDowerPointFieldNumber = 22;
    private int leftDowerPoint_;
    /// <summary>
    ///剩余可用天赋点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftDowerPoint {
      get { return leftDowerPoint_; }
      set {
        leftDowerPoint_ = value;
      }
    }

    /// <summary>Field number for the "leftAdNum" field.</summary>
    public const int LeftAdNumFieldNumber = 23;
    private int leftAdNum_;
    /// <summary>
    ///当日获取体力剩余广告次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftAdNum {
      get { return leftAdNum_; }
      set {
        leftAdNum_ = value;
      }
    }

    /// <summary>Field number for the "BuyPowerNum" field.</summary>
    public const int BuyPowerNumFieldNumber = 24;
    private int buyPowerNum_;
    /// <summary>
    ///当日购买体力次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyPowerNum {
      get { return buyPowerNum_; }
      set {
        buyPowerNum_ = value;
      }
    }

    /// <summary>Field number for the "CurFbType" field.</summary>
    public const int CurFbTypeFieldNumber = 25;
    private int curFbType_;
    /// <summary>
    ///当前关卡类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFbType {
      get { return curFbType_; }
      set {
        curFbType_ = value;
      }
    }

    /// <summary>Field number for the "IsFinishGuide" field.</summary>
    public const int IsFinishGuideFieldNumber = 26;
    private bool isFinishGuide_;
    /// <summary>
    ///是否完成新手关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinishGuide {
      get { return isFinishGuide_; }
      set {
        isFinishGuide_ = value;
      }
    }

    /// <summary>Field number for the "SeasonEndTime" field.</summary>
    public const int SeasonEndTimeFieldNumber = 27;
    private int seasonEndTime_;
    /// <summary>
    ///赛季结束时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonEndTime {
      get { return seasonEndTime_; }
      set {
        seasonEndTime_ = value;
      }
    }

    /// <summary>Field number for the "TotalAdNum" field.</summary>
    public const int TotalAdNumFieldNumber = 28;
    private int totalAdNum_;
    /// <summary>
    ///累计广告次数（用于令牌显示）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalAdNum {
      get { return totalAdNum_; }
      set {
        totalAdNum_ = value;
      }
    }

    /// <summary>Field number for the "GNum" field.</summary>
    public const int GNumFieldNumber = 29;
    private int gNum_;
    /// <summary>
    ///金币副本今日剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GNum {
      get { return gNum_; }
      set {
        gNum_ = value;
      }
    }

    /// <summary>Field number for the "GANum" field.</summary>
    public const int GANumFieldNumber = 30;
    private int gANum_;
    /// <summary>
    ///金币副本今日广告剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GANum {
      get { return gANum_; }
      set {
        gANum_ = value;
      }
    }

    /// <summary>Field number for the "ENum" field.</summary>
    public const int ENumFieldNumber = 31;
    private int eNum_;
    /// <summary>
    ///装备副本今日剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ENum {
      get { return eNum_; }
      set {
        eNum_ = value;
      }
    }

    /// <summary>Field number for the "EANum" field.</summary>
    public const int EANumFieldNumber = 32;
    private int eANum_;
    /// <summary>
    ///装备副本今日广告剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EANum {
      get { return eANum_; }
      set {
        eANum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (Gold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Gold);
      }
      if (Ticket != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Ticket);
      }
      if (KeepLoginNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(KeepLoginNum);
      }
      if (RegDay != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RegDay);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Id);
      }
      if (PfUserId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PfUserId);
      }
      if (Power != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Power);
      }
      if (NextAddAPTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NextAddAPTime);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CreateTime);
      }
      if (PayMoney != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PayMoney);
      }
      if (LoginDay != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(LoginDay);
      }
      if (IsReLogin != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsReLogin);
      }
      if (IsSeasonVip != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsSeasonVip);
      }
      if (SeasonExp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SeasonExp);
      }
      if (SeasonId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SeasonId);
      }
      dowerLevel_.WriteTo(output, _repeated_dowerLevel_codec);
      if (TotalDowerNum != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(TotalDowerNum);
      }
      if (LeftDowerPoint != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(LeftDowerPoint);
      }
      if (LeftAdNum != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(LeftAdNum);
      }
      if (BuyPowerNum != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BuyPowerNum);
      }
      if (CurFbType != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CurFbType);
      }
      if (IsFinishGuide != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsFinishGuide);
      }
      if (SeasonEndTime != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SeasonEndTime);
      }
      if (TotalAdNum != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(TotalAdNum);
      }
      if (GNum != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GNum);
      }
      if (GANum != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(GANum);
      }
      if (ENum != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ENum);
      }
      if (EANum != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(EANum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (KeepLoginNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepLoginNum);
      }
      if (RegDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegDay);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PfUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PfUserId);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (NextAddAPTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextAddAPTime);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTime);
      }
      if (PayMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayMoney);
      }
      if (LoginDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginDay);
      }
      if (IsReLogin != false) {
        size += 2 + 1;
      }
      if (IsSeasonVip != false) {
        size += 2 + 1;
      }
      if (SeasonExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeasonExp);
      }
      if (SeasonId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeasonId);
      }
      size += dowerLevel_.CalculateSize(_repeated_dowerLevel_codec);
      if (TotalDowerNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalDowerNum);
      }
      if (LeftDowerPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeftDowerPoint);
      }
      if (LeftAdNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeftAdNum);
      }
      if (BuyPowerNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuyPowerNum);
      }
      if (CurFbType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurFbType);
      }
      if (IsFinishGuide != false) {
        size += 2 + 1;
      }
      if (SeasonEndTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeasonEndTime);
      }
      if (TotalAdNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalAdNum);
      }
      if (GNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GNum);
      }
      if (GANum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GANum);
      }
      if (ENum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ENum);
      }
      if (EANum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EANum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            Gold = input.ReadInt64();
            break;
          }
          case 48: {
            Ticket = input.ReadInt32();
            break;
          }
          case 56: {
            KeepLoginNum = input.ReadInt32();
            break;
          }
          case 64: {
            RegDay = input.ReadInt32();
            break;
          }
          case 74: {
            Id = input.ReadString();
            break;
          }
          case 82: {
            PfUserId = input.ReadString();
            break;
          }
          case 88: {
            Power = input.ReadInt32();
            break;
          }
          case 96: {
            NextAddAPTime = input.ReadInt32();
            break;
          }
          case 104: {
            CreateTime = input.ReadInt32();
            break;
          }
          case 112: {
            PayMoney = input.ReadInt32();
            break;
          }
          case 120: {
            LoginDay = input.ReadInt32();
            break;
          }
          case 128: {
            IsReLogin = input.ReadBool();
            break;
          }
          case 136: {
            IsSeasonVip = input.ReadBool();
            break;
          }
          case 144: {
            SeasonExp = input.ReadInt32();
            break;
          }
          case 152: {
            SeasonId = input.ReadInt32();
            break;
          }
          case 162:
          case 160: {
            dowerLevel_.AddEntriesFrom(input, _repeated_dowerLevel_codec);
            break;
          }
          case 168: {
            TotalDowerNum = input.ReadInt32();
            break;
          }
          case 176: {
            LeftDowerPoint = input.ReadInt32();
            break;
          }
          case 184: {
            LeftAdNum = input.ReadInt32();
            break;
          }
          case 192: {
            BuyPowerNum = input.ReadInt32();
            break;
          }
          case 200: {
            CurFbType = input.ReadInt32();
            break;
          }
          case 208: {
            IsFinishGuide = input.ReadBool();
            break;
          }
          case 216: {
            SeasonEndTime = input.ReadInt32();
            break;
          }
          case 224: {
            TotalAdNum = input.ReadInt32();
            break;
          }
          case 232: {
            GNum = input.ReadInt32();
            break;
          }
          case 240: {
            GANum = input.ReadInt32();
            break;
          }
          case 248: {
            ENum = input.ReadInt32();
            break;
          }
          case 256: {
            EANum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到服务器通知客户端进入游戏,进入游戏必要数据发送完成
  /// </summary>
  public sealed class SC_login_enter : pb::IMessage {
    private static readonly pb::MessageParser<SC_login_enter> _parser = new pb::MessageParser<SC_login_enter>(() => new SC_login_enter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_enter> Parser { get { return _parser; } }

    /// <summary>Field number for the "ServerTime" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private int serverTime_;
    /// <summary>
    ///服务器当前时间截，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "ServerStartTime" field.</summary>
    public const int ServerStartTimeFieldNumber = 2;
    private int serverStartTime_;
    /// <summary>
    ///服务器启动时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerStartTime {
      get { return serverStartTime_; }
      set {
        serverStartTime_ = value;
      }
    }

    /// <summary>Field number for the "UTCOffset" field.</summary>
    public const int UTCOffsetFieldNumber = 3;
    private int uTCOffset_;
    /// <summary>
    ///UTC时间偏移量，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UTCOffset {
      get { return uTCOffset_; }
      set {
        uTCOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerTime);
      }
      if (ServerStartTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerStartTime);
      }
      if (UTCOffset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UTCOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
      }
      if (ServerStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerStartTime);
      }
      if (UTCOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UTCOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadInt32();
            break;
          }
          case 16: {
            ServerStartTime = input.ReadInt32();
            break;
          }
          case 24: {
            UTCOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重登后返回的数据
  /// </summary>
  public sealed class SC_login_reLogin : pb::IMessage {
    private static readonly pb::MessageParser<SC_login_reLogin> _parser = new pb::MessageParser<SC_login_reLogin>(() => new SC_login_reLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_reLogin> Parser { get { return _parser; } }

    /// <summary>Field number for the "ServerTime" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private int serverTime_;
    /// <summary>
    ///服务器当前时间截，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "UTCOffset" field.</summary>
    public const int UTCOffsetFieldNumber = 2;
    private int uTCOffset_;
    /// <summary>
    ///UTC时间偏移量，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UTCOffset {
      get { return uTCOffset_; }
      set {
        uTCOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerTime);
      }
      if (UTCOffset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UTCOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
      }
      if (UTCOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UTCOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadInt32();
            break;
          }
          case 16: {
            UTCOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求游客绑定
  /// </summary>
  public sealed class CS_login_bind : pb::IMessage {
    private static readonly pb::MessageParser<CS_login_bind> _parser = new pb::MessageParser<CS_login_bind>(() => new CS_login_bind());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_login_bind> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 1;
    private string platformId_ = "";
    /// <summary>
    ///平台用户唯一Id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///平台返回账号Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginType" field.</summary>
    public const int LoginTypeFieldNumber = 3;
    private global::PbLogin.Enum_login_type loginType_ = 0;
    /// <summary>
    ///登录类型 1邮箱 2facebook 3google
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_type LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlatformId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (LoginType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LoginType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlatformId = input.ReadString();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 24: {
            loginType_ = (global::PbLogin.Enum_login_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到游客绑定
  /// </summary>
  public sealed class SC_login_bind : pb::IMessage {
    private static readonly pb::MessageParser<SC_login_bind> _parser = new pb::MessageParser<SC_login_bind>(() => new SC_login_bind());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_bind> Parser { get { return _parser; } }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbLogin.Enum_bind_result result_ = 0;
    /// <summary>
    ///验证结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_bind_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 2;
    private string platformId_ = "";
    /// <summary>
    ///验证成功，返回平台用户的唯一Id		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginType" field.</summary>
    public const int LoginTypeFieldNumber = 3;
    private global::PbLogin.Enum_login_type loginType_ = 0;
    /// <summary>
    ///登录类型 1邮箱 2facebook 3google
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_type LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlatformId);
      }
      if (LoginType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LoginType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbLogin.Enum_bind_result) input.ReadEnum();
            break;
          }
          case 18: {
            PlatformId = input.ReadString();
            break;
          }
          case 24: {
            loginType_ = (global::PbLogin.Enum_login_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
