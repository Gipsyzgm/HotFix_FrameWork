// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbGetServer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbGetServer {

  /// <summary>Holder for reflection information generated from PbGetServer.proto</summary>
  public static partial class PbGetServerReflection {

    #region Descriptor
    /// <summary>File descriptor for PbGetServer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbGetServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQYkdldFNlcnZlci5wcm90bxILUGJHZXRTZXJ2ZXIiLwoRQ1NfR2V0X0dh",
            "bWVTZXJ2ZXISDgoGUmVxVUlEGAEgASgJEgoKAklQGAIgASgJIk8KEVNDX0dl",
            "dF9HYW1lU2VydmVyEg4KBlJlcVVJRBgBIAEoCRIQCghTZXJ2ZXJJZBgCIAEo",
            "BRIKCgJJUBgDIAEoCRIMCgRQb3J0GAQgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGetServer.CS_Get_GameServer), global::PbGetServer.CS_Get_GameServer.Parser, new[]{ "ReqUID", "IP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGetServer.SC_Get_GameServer), global::PbGetServer.SC_Get_GameServer.Parser, new[]{ "ReqUID", "ServerId", "IP", "Port" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///请求获取人数最少的服务器信息
  /// </summary>
  public sealed partial class CS_Get_GameServer : pb::IMessage<CS_Get_GameServer> {
    private static readonly pb::MessageParser<CS_Get_GameServer> _parser = new pb::MessageParser<CS_Get_GameServer>(() => new CS_Get_GameServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Get_GameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGetServer.PbGetServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Get_GameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Get_GameServer(CS_Get_GameServer other) : this() {
      reqUID_ = other.reqUID_;
      iP_ = other.iP_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Get_GameServer Clone() {
      return new CS_Get_GameServer(this);
    }

    /// <summary>Field number for the "ReqUID" field.</summary>
    public const int ReqUIDFieldNumber = 1;
    private string reqUID_ = "";
    /// <summary>
    ///请求的唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReqUID {
      get { return reqUID_; }
      set {
        reqUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 2;
    private string iP_ = "";
    /// <summary>
    ///客户端连接IP  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Get_GameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Get_GameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqUID != other.ReqUID) return false;
      if (IP != other.IP) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqUID.Length != 0) hash ^= ReqUID.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqUID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReqUID);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IP);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReqUID);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Get_GameServer other) {
      if (other == null) {
        return;
      }
      if (other.ReqUID.Length != 0) {
        ReqUID = other.ReqUID;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReqUID = input.ReadString();
            break;
          }
          case 18: {
            IP = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到人数最少的服务器信息
  /// </summary>
  public sealed partial class SC_Get_GameServer : pb::IMessage<SC_Get_GameServer> {
    private static readonly pb::MessageParser<SC_Get_GameServer> _parser = new pb::MessageParser<SC_Get_GameServer>(() => new SC_Get_GameServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Get_GameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGetServer.PbGetServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Get_GameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Get_GameServer(SC_Get_GameServer other) : this() {
      reqUID_ = other.reqUID_;
      serverId_ = other.serverId_;
      iP_ = other.iP_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Get_GameServer Clone() {
      return new SC_Get_GameServer(this);
    }

    /// <summary>Field number for the "ReqUID" field.</summary>
    public const int ReqUIDFieldNumber = 1;
    private string reqUID_ = "";
    /// <summary>
    ///请求的唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReqUID {
      get { return reqUID_; }
      set {
        reqUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private int serverId_;
    /// <summary>
    ///服务器Id   0没有获取到服务器Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 3;
    private string iP_ = "";
    /// <summary>
    ///连接IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    /// <summary>
    ///连接端口	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Get_GameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Get_GameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqUID != other.ReqUID) return false;
      if (ServerId != other.ServerId) return false;
      if (IP != other.IP) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqUID.Length != 0) hash ^= ReqUID.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqUID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReqUID);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerId);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IP);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReqUID);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Get_GameServer other) {
      if (other == null) {
        return;
      }
      if (other.ReqUID.Length != 0) {
        ReqUID = other.ReqUID;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReqUID = input.ReadString();
            break;
          }
          case 16: {
            ServerId = input.ReadInt32();
            break;
          }
          case 26: {
            IP = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
