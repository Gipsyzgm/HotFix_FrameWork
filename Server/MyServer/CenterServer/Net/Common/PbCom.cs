// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbCom.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbCom {

  /// <summary>Holder for reflection information generated from PbCom.proto</summary>
  public static partial class PbComReflection {

    #region Descriptor
    /// <summary>File descriptor for PbCom.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbComReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtQYkNvbS5wcm90bxIFUGJDb20iLgoNT25lX0F3YXJkSXRlbRIOCgZJdGVt",
            "SWQYASABKAUSDQoFQ291bnQYAiABKAUipAEKDk9uZV9QbGF5ZXJJbmZvEgsK",
            "A1BJRBgBIAEoCRIMCgROYW1lGAIgASgJEg0KBUxldmVsGAMgASgFEiQKBkVx",
            "dWlwcxgHIAMoCzIULlBiQ29tLk9uZV9iYWdfZXF1aXASDAoESWNvbhgIIAMo",
            "BRIPCgdIZXJvSWRzGBAgAygFEhEKCUVxdWlwc0lkcxgRIAMoBRIQCghMYXN0",
            "VGltZRgTIAEoBSK8AQoNT25lX2JhZ19lcXVpcBILCgNTSUQYASABKAUSDwoH",
            "VGVtcGxJRBgCIAEoBRINCgVMZXZlbBgDIAEoBRIPCgdicmVha2x2GAQgASgF",
            "EgsKA051bRgFIAEoBRINCgVJbmRleBgGIAEoBRIRCglJc0dldEhlcm8YByAB",
            "KAgSDwoHSGVyb0V4cBgIIAEoBRIQCghWaWRlb051bRgJIAEoBRILCgNFeHAY",
            "CiABKAUSDgoGR2VtU0lEGAsgASgFIj0KC09uZV9iYWdfR2VtEgsKA1NJRBgB",
            "IAEoBRIPCgdUZW1wbElEGAIgASgFEhAKCEVxdWlwU0lEGAMgASgFIiUKCk9u",
            "ZV9IZXJvSHASCwoDU0lEGAEgASgFEgoKAkhwGAIgASgFIosBCg1PbmVfUmFu",
            "a19pdGVtEgsKA1BJRBgBIAEoCRIMCgROYW1lGAIgASgJEg0KBUxldmVsGAMg",
            "ASgFEgwKBEljb24YBCADKAUSCwoDTnVtGAUgASgDEgwKBFJhbmsYBiABKAUS",
            "GAoQQ2x1Yk9yTGVhZGVyTmFtZRgHIAEoCRINCgVBcmVuYRgIIAEoBSI6CgtP",
            "bmVfUHVzaE1zZxILCgNQSWQYASABKAkSDQoFVGl0bGUYAiABKAkSDwoHQ29u",
            "dGVudBgDIAEoCSKQAQoMT25lX2NoYXRfbXNnEgsKA1BJRBgBIAEoCRIMCgRO",
            "YW1lGAIgASgJEgwKBEljb24YAyADKAUSDwoHQ29udGVudBgEIAEoCRINCgVB",
            "cmVuYRgFIAEoBRINCgVMZXZlbBgGIAEoBRIMCgRUaW1lGAcgASgFEgwKBENs",
            "dWIYCCABKAkSDAoEUm9sZRgJIAEoBSqFBAoSRW51bV9iYWdfaXRlbXNUeXBl",
            "EgoKBkJpTm9uZRAAEgwKCEJpRkJEcm9wEAESDAoIQmlTdW1tb24QAhILCgdC",
            "aVN0b3JlEAMSEgoOQmlFdmVudEZCQXdhcmQQBBIKCgZCaVRhc2sQBRIQCgxC",
            "aVRhc2tCb3VudHkQBhINCglCaUZpbGxSZXMQBxIPCgtCaUhhbmdBd2FyZBAI",
            "EhAKDEJpTGV2ZWxBd2FyZBAJEhAKDEJpRmlyc3RBd2FyZBAKEhYKEkJpRXZl",
            "bnRGQlBhc3NBd2FyZBALEhYKEkJpRXZlbnRGQlJhbmtBd2FyZBAMEg8KC0Jp",
            "U3RvcmVJY29uEA0SEQoNQmlTaWduSW5Bd2FyZBAOEhEKDUJpU2lnbkluVG90",
            "YWwQDxIRCg1CaU5ld2JpZUF3YXJkEBASFAoQQmlOZXdiaWVCb3hBd2FyZBAR",
            "EgkKBUJpUGF5EBISCgoGQmlNYWlsEBMSDwoLQmlNb250aENhcmQQFBIQCgxC",
            "aVNldmVuQXdhcmQQFRILCgdCaUd1aWRlEBYSDQoJQmlGQkNoZXN0EBcSDgoK",
            "QmlBZHNBd2FyZBAYEgwKCEJpQmFnVXNlEBkSEAoMQmluZEF3YXJkTnVtEBoS",
            "EQoNQmlDaXJjbGVBd2FyZBAbEgwKCEJpU2Vhc29uEBwSDQoJQmlBY2hpZXZl",
            "EB0qQgoURW51bV9wYXlPcmRlcl9yZXN1bHQSDQoJT3JTdWNjZWVkEAASDAoI",
            "T3JOb09wZW4QARINCglPclNvbGRPdXQQAipPChFFbnVtX2V2ZW50RkJfdHlw",
            "ZRIMCghFdE5vcm1hbBAAEg8KC0V0Q2hhbGxlbmdlEAESDgoKRXRGZXN0aXZh",
            "bBACEgsKB0V0VHJpYWwQAyo3Cg5FbnVtX1JhbmtfdHlwZRILCgdSa0FyZW5h",
            "EAASCgoGUmtDbHViEAESDAoIUmtMZWFndWUQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbCom.Enum_bag_itemsType), typeof(global::PbCom.Enum_payOrder_result), typeof(global::PbCom.Enum_eventFB_type), typeof(global::PbCom.Enum_Rank_type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCom.One_AwardItem), global::PbCom.One_AwardItem.Parser, new[]{ "ItemId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCom.One_PlayerInfo), global::PbCom.One_PlayerInfo.Parser, new[]{ "PID", "Name", "Level", "Equips", "Icon", "HeroIds", "EquipsIds", "LastTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCom.One_bag_equip), global::PbCom.One_bag_equip.Parser, new[]{ "SID", "TemplID", "Level", "Breaklv", "Num", "Index", "IsGetHero", "HeroExp", "VideoNum", "Exp", "GemSID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCom.One_bag_Gem), global::PbCom.One_bag_Gem.Parser, new[]{ "SID", "TemplID", "EquipSID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCom.One_HeroHp), global::PbCom.One_HeroHp.Parser, new[]{ "SID", "Hp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCom.One_Rank_item), global::PbCom.One_Rank_item.Parser, new[]{ "PID", "Name", "Level", "Icon", "Num", "Rank", "ClubOrLeaderName", "Arena" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCom.One_PushMsg), global::PbCom.One_PushMsg.Parser, new[]{ "PId", "Title", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCom.One_chat_msg), global::PbCom.One_chat_msg.Parser, new[]{ "PID", "Name", "Icon", "Content", "Arena", "Level", "Time", "Club", "Role" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///获得新物品、英雄类型
  /// </summary>
  public enum Enum_bag_itemsType {
    /// <summary>
    ///无类型
    /// </summary>
    [pbr::OriginalName("BiNone")] BiNone = 0,
    /// <summary>
    ///副本掉落
    /// </summary>
    [pbr::OriginalName("BiFBDrop")] BiFbdrop = 1,
    /// <summary>
    ///召唤
    /// </summary>
    [pbr::OriginalName("BiSummon")] BiSummon = 2,
    /// <summary>
    ///商城购买
    /// </summary>
    [pbr::OriginalName("BiStore")] BiStore = 3,
    /// <summary>
    ///活动副本过关奖励
    /// </summary>
    [pbr::OriginalName("BiEventFBAward")] BiEventFbaward = 4,
    /// <summary>
    ///任务奖励
    /// </summary>
    [pbr::OriginalName("BiTask")] BiTask = 5,
    /// <summary>
    ///赏金任务奖励
    /// </summary>
    [pbr::OriginalName("BiTaskBounty")] BiTaskBounty = 6,
    /// <summary>
    ///补齐资源
    /// </summary>
    [pbr::OriginalName("BiFillRes")] BiFillRes = 7,
    /// <summary>
    ///挂机奖励
    /// </summary>
    [pbr::OriginalName("BiHangAward")] BiHangAward = 8,
    /// <summary>
    ///等级奖励
    /// </summary>
    [pbr::OriginalName("BiLevelAward")] BiLevelAward = 9,
    /// <summary>
    ///首充奖励
    /// </summary>
    [pbr::OriginalName("BiFirstAward")] BiFirstAward = 10,
    /// <summary>
    ///活动副本通关奖励
    /// </summary>
    [pbr::OriginalName("BiEventFBPassAward")] BiEventFbpassAward = 11,
    /// <summary>
    ///活动副本排名奖励
    /// </summary>
    [pbr::OriginalName("BiEventFBRankAward")] BiEventFbrankAward = 12,
    /// <summary>
    ///头像商店购买
    /// </summary>
    [pbr::OriginalName("BiStoreIcon")] BiStoreIcon = 13,
    /// <summary>
    ///每日签到奖励
    /// </summary>
    [pbr::OriginalName("BiSignInAward")] BiSignInAward = 14,
    /// <summary>
    ///累计签到奖励
    /// </summary>
    [pbr::OriginalName("BiSignInTotal")] BiSignInTotal = 15,
    /// <summary>
    ///新手任务奖励
    /// </summary>
    [pbr::OriginalName("BiNewbieAward")] BiNewbieAward = 16,
    /// <summary>
    ///新手任务宝箱奖励
    /// </summary>
    [pbr::OriginalName("BiNewbieBoxAward")] BiNewbieBoxAward = 17,
    /// <summary>
    ///充值奖励
    /// </summary>
    [pbr::OriginalName("BiPay")] BiPay = 18,
    /// <summary>
    ///邮件领奖
    /// </summary>
    [pbr::OriginalName("BiMail")] BiMail = 19,
    /// <summary>
    ///月卡每日领奖
    /// </summary>
    [pbr::OriginalName("BiMonthCard")] BiMonthCard = 20,
    /// <summary>
    ///7天奖励
    /// </summary>
    [pbr::OriginalName("BiSevenAward")] BiSevenAward = 21,
    /// <summary>
    ///新手指引赠送
    /// </summary>
    [pbr::OriginalName("BiGuide")] BiGuide = 22,
    /// <summary>
    ///章节宝箱奖励
    /// </summary>
    [pbr::OriginalName("BiFBChest")] BiFbchest = 23,
    /// <summary>
    ///广告奖励
    /// </summary>
    [pbr::OriginalName("BiAdsAward")] BiAdsAward = 24,
    /// <summary>
    ///背包使用道具
    /// </summary>
    [pbr::OriginalName("BiBagUse")] BiBagUse = 25,
    /// <summary>
    ///绑定平台获得
    /// </summary>
    [pbr::OriginalName("BindAwardNum")] BindAwardNum = 26,
    /// <summary>
    ///转盘奖励
    /// </summary>
    [pbr::OriginalName("BiCircleAward")] BiCircleAward = 27,
    /// <summary>
    ///赛季令牌
    /// </summary>
    [pbr::OriginalName("BiSeason")] BiSeason = 28,
    /// <summary>
    ///成就奖励
    /// </summary>
    [pbr::OriginalName("BiAchieve")] BiAchieve = 29,
  }

  /// <summary>
  ///充值下定单结果
  /// </summary>
  public enum Enum_payOrder_result {
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("OrSucceed")] OrSucceed = 0,
    /// <summary>
    ///充值服务器未开启
    /// </summary>
    [pbr::OriginalName("OrNoOpen")] OrNoOpen = 1,
    /// <summary>
    ///商品已下架
    /// </summary>
    [pbr::OriginalName("OrSoldOut")] OrSoldOut = 2,
  }

  /// <summary>
  ///活动副本类型结构枚举
  /// </summary>
  public enum Enum_eventFB_type {
    /// <summary>
    ///普通活动
    /// </summary>
    [pbr::OriginalName("EtNormal")] EtNormal = 0,
    /// <summary>
    ///挑战活动
    /// </summary>
    [pbr::OriginalName("EtChallenge")] EtChallenge = 1,
    /// <summary>
    ///节日活动
    /// </summary>
    [pbr::OriginalName("EtFestival")] EtFestival = 2,
    /// <summary>
    ///试炼活动
    /// </summary>
    [pbr::OriginalName("EtTrial")] EtTrial = 3,
  }

  /// <summary>
  ///排行类型
  /// </summary>
  public enum Enum_Rank_type {
    /// <summary>
    ///玩家竞技排名
    /// </summary>
    [pbr::OriginalName("RkArena")] RkArena = 0,
    /// <summary>
    ///联盟排名
    /// </summary>
    [pbr::OriginalName("RkClub")] RkClub = 1,
    /// <summary>
    ///联赛排名
    /// </summary>
    [pbr::OriginalName("RkLeague")] RkLeague = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///一个奖励物品
  /// </summary>
  public sealed partial class One_AwardItem : pb::IMessage<One_AwardItem> {
    private static readonly pb::MessageParser<One_AwardItem> _parser = new pb::MessageParser<One_AwardItem>(() => new One_AwardItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_AwardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCom.PbComReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_AwardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_AwardItem(One_AwardItem other) : this() {
      itemId_ = other.itemId_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_AwardItem Clone() {
      return new One_AwardItem(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///物品模板id(负数表示英雄)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_AwardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_AwardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_AwardItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个其他玩家信息
  /// </summary>
  public sealed partial class One_PlayerInfo : pb::IMessage<One_PlayerInfo> {
    private static readonly pb::MessageParser<One_PlayerInfo> _parser = new pb::MessageParser<One_PlayerInfo>(() => new One_PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCom.PbComReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_PlayerInfo(One_PlayerInfo other) : this() {
      pID_ = other.pID_;
      name_ = other.name_;
      level_ = other.level_;
      equips_ = other.equips_.Clone();
      icon_ = other.icon_.Clone();
      heroIds_ = other.heroIds_.Clone();
      equipsIds_ = other.equipsIds_.Clone();
      lastTime_ = other.lastTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_PlayerInfo Clone() {
      return new One_PlayerInfo(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private string pID_ = "";
    /// <summary>
    ///玩家PID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PID {
      get { return pID_; }
      set {
        pID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::PbCom.One_bag_equip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(58, global::PbCom.One_bag_equip.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_bag_equip> equips_ = new pbc::RepeatedField<global::PbCom.One_bag_equip>();
    /// <summary>
    ///5个装备信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_bag_equip> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家头像[头像、背景、角标]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "HeroIds" field.</summary>
    public const int HeroIdsFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> heroIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///5个英雄的sid及顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroIds {
      get { return heroIds_; }
    }

    /// <summary>Field number for the "EquipsIds" field.</summary>
    public const int EquipsIdsFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_equipsIds_codec
        = pb::FieldCodec.ForInt32(138);
    private readonly pbc::RepeatedField<int> equipsIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///5个装备的sid及顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EquipsIds {
      get { return equipsIds_; }
    }

    /// <summary>Field number for the "LastTime" field.</summary>
    public const int LastTimeFieldNumber = 19;
    private int lastTime_;
    /// <summary>
    ///最后活跃时间 0表示现在 其他是时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if(!equips_.Equals(other.equips_)) return false;
      if(!icon_.Equals(other.icon_)) return false;
      if(!heroIds_.Equals(other.heroIds_)) return false;
      if(!equipsIds_.Equals(other.equipsIds_)) return false;
      if (LastTime != other.LastTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID.Length != 0) hash ^= PID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= equips_.GetHashCode();
      hash ^= icon_.GetHashCode();
      hash ^= heroIds_.GetHashCode();
      hash ^= equipsIds_.GetHashCode();
      if (LastTime != 0) hash ^= LastTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
      icon_.WriteTo(output, _repeated_icon_codec);
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
      equipsIds_.WriteTo(output, _repeated_equipsIds_codec);
      if (LastTime != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(LastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      size += equipsIds_.CalculateSize(_repeated_equipsIds_codec);
      if (LastTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PID.Length != 0) {
        PID = other.PID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      equips_.Add(other.equips_);
      icon_.Add(other.icon_);
      heroIds_.Add(other.heroIds_);
      equipsIds_.Add(other.equipsIds_);
      if (other.LastTime != 0) {
        LastTime = other.LastTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 58: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 66:
          case 64: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 130:
          case 128: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
          case 138:
          case 136: {
            equipsIds_.AddEntriesFrom(input, _repeated_equipsIds_codec);
            break;
          }
          case 152: {
            LastTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一件装备
  /// </summary>
  public sealed partial class One_bag_equip : pb::IMessage<One_bag_equip> {
    private static readonly pb::MessageParser<One_bag_equip> _parser = new pb::MessageParser<One_bag_equip>(() => new One_bag_equip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_bag_equip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCom.PbComReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_equip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_equip(One_bag_equip other) : this() {
      sID_ = other.sID_;
      templID_ = other.templID_;
      level_ = other.level_;
      breaklv_ = other.breaklv_;
      num_ = other.num_;
      index_ = other.index_;
      isGetHero_ = other.isGetHero_;
      heroExp_ = other.heroExp_;
      videoNum_ = other.videoNum_;
      exp_ = other.exp_;
      gemSID_ = other.gemSID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_equip Clone() {
      return new One_bag_equip(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备sid（英雄和道具为0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "TemplID" field.</summary>
    public const int TemplIDFieldNumber = 2;
    private int templID_;
    /// <summary>
    ///模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplID {
      get { return templID_; }
      set {
        templID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///装备等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "breaklv" field.</summary>
    public const int BreaklvFieldNumber = 4;
    private int breaklv_;
    /// <summary>
    ///升阶等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Breaklv {
      get { return breaklv_; }
      set {
        breaklv_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 5;
    private int num_;
    /// <summary>
    ///装备数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 6;
    private int index_;
    /// <summary>
    ///装备位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "IsGetHero" field.</summary>
    public const int IsGetHeroFieldNumber = 7;
    private bool isGetHero_;
    /// <summary>
    ///是否获得英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetHero {
      get { return isGetHero_; }
      set {
        isGetHero_ = value;
      }
    }

    /// <summary>Field number for the "HeroExp" field.</summary>
    public const int HeroExpFieldNumber = 8;
    private int heroExp_;
    /// <summary>
    ///英雄经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroExp {
      get { return heroExp_; }
      set {
        heroExp_ = value;
      }
    }

    /// <summary>Field number for the "VideoNum" field.</summary>
    public const int VideoNumFieldNumber = 9;
    private int videoNum_;
    /// <summary>
    ///当前英雄广告条数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VideoNum {
      get { return videoNum_; }
      set {
        videoNum_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 10;
    private int exp_;
    /// <summary>
    ///装备当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "GemSID" field.</summary>
    public const int GemSIDFieldNumber = 11;
    private int gemSID_;
    /// <summary>
    ///已装备宝石SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemSID {
      get { return gemSID_; }
      set {
        gemSID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_bag_equip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_bag_equip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (TemplID != other.TemplID) return false;
      if (Level != other.Level) return false;
      if (Breaklv != other.Breaklv) return false;
      if (Num != other.Num) return false;
      if (Index != other.Index) return false;
      if (IsGetHero != other.IsGetHero) return false;
      if (HeroExp != other.HeroExp) return false;
      if (VideoNum != other.VideoNum) return false;
      if (Exp != other.Exp) return false;
      if (GemSID != other.GemSID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (TemplID != 0) hash ^= TemplID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Breaklv != 0) hash ^= Breaklv.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (IsGetHero != false) hash ^= IsGetHero.GetHashCode();
      if (HeroExp != 0) hash ^= HeroExp.GetHashCode();
      if (VideoNum != 0) hash ^= VideoNum.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (GemSID != 0) hash ^= GemSID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (TemplID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TemplID);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Breaklv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Breaklv);
      }
      if (Num != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Num);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Index);
      }
      if (IsGetHero != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsGetHero);
      }
      if (HeroExp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HeroExp);
      }
      if (VideoNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(VideoNum);
      }
      if (Exp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Exp);
      }
      if (GemSID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GemSID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (TemplID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Breaklv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Breaklv);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (IsGetHero != false) {
        size += 1 + 1;
      }
      if (HeroExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroExp);
      }
      if (VideoNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VideoNum);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (GemSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemSID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_bag_equip other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.TemplID != 0) {
        TemplID = other.TemplID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Breaklv != 0) {
        Breaklv = other.Breaklv;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.IsGetHero != false) {
        IsGetHero = other.IsGetHero;
      }
      if (other.HeroExp != 0) {
        HeroExp = other.HeroExp;
      }
      if (other.VideoNum != 0) {
        VideoNum = other.VideoNum;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.GemSID != 0) {
        GemSID = other.GemSID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            TemplID = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Breaklv = input.ReadInt32();
            break;
          }
          case 40: {
            Num = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadInt32();
            break;
          }
          case 56: {
            IsGetHero = input.ReadBool();
            break;
          }
          case 64: {
            HeroExp = input.ReadInt32();
            break;
          }
          case 72: {
            VideoNum = input.ReadInt32();
            break;
          }
          case 80: {
            Exp = input.ReadInt32();
            break;
          }
          case 88: {
            GemSID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一件宝石
  /// </summary>
  public sealed partial class One_bag_Gem : pb::IMessage<One_bag_Gem> {
    private static readonly pb::MessageParser<One_bag_Gem> _parser = new pb::MessageParser<One_bag_Gem>(() => new One_bag_Gem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_bag_Gem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCom.PbComReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_Gem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_Gem(One_bag_Gem other) : this() {
      sID_ = other.sID_;
      templID_ = other.templID_;
      equipSID_ = other.equipSID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_Gem Clone() {
      return new One_bag_Gem(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///宝石sid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "TemplID" field.</summary>
    public const int TemplIDFieldNumber = 2;
    private int templID_;
    /// <summary>
    ///模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplID {
      get { return templID_; }
      set {
        templID_ = value;
      }
    }

    /// <summary>Field number for the "EquipSID" field.</summary>
    public const int EquipSIDFieldNumber = 3;
    private int equipSID_;
    /// <summary>
    ///已装备SID，未装备为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSID {
      get { return equipSID_; }
      set {
        equipSID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_bag_Gem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_bag_Gem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (TemplID != other.TemplID) return false;
      if (EquipSID != other.EquipSID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (TemplID != 0) hash ^= TemplID.GetHashCode();
      if (EquipSID != 0) hash ^= EquipSID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (TemplID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TemplID);
      }
      if (EquipSID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EquipSID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (TemplID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplID);
      }
      if (EquipSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_bag_Gem other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.TemplID != 0) {
        TemplID = other.TemplID;
      }
      if (other.EquipSID != 0) {
        EquipSID = other.EquipSID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            TemplID = input.ReadInt32();
            break;
          }
          case 24: {
            EquipSID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个英雄剩余血量
  /// </summary>
  public sealed partial class One_HeroHp : pb::IMessage<One_HeroHp> {
    private static readonly pb::MessageParser<One_HeroHp> _parser = new pb::MessageParser<One_HeroHp>(() => new One_HeroHp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_HeroHp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCom.PbComReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_HeroHp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_HeroHp(One_HeroHp other) : this() {
      sID_ = other.sID_;
      hp_ = other.hp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_HeroHp Clone() {
      return new One_HeroHp(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///英雄SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    /// <summary>
    ///剩余血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_HeroHp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_HeroHp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Hp != other.Hp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_HeroHp other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个排行数据
  /// </summary>
  public sealed partial class One_Rank_item : pb::IMessage<One_Rank_item> {
    private static readonly pb::MessageParser<One_Rank_item> _parser = new pb::MessageParser<One_Rank_item>(() => new One_Rank_item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_Rank_item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCom.PbComReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Rank_item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Rank_item(One_Rank_item other) : this() {
      pID_ = other.pID_;
      name_ = other.name_;
      level_ = other.level_;
      icon_ = other.icon_.Clone();
      num_ = other.num_;
      rank_ = other.rank_;
      clubOrLeaderName_ = other.clubOrLeaderName_;
      arena_ = other.arena_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Rank_item Clone() {
      return new One_Rank_item(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private string pID_ = "";
    /// <summary>
    ///玩家或联盟ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PID {
      get { return pID_; }
      set {
        pID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///玩家或联盟名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///玩家或联盟等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家或联盟头像[头像、背景、角标](玩家头像是3个，联盟头像只有前2个)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 5;
    private long num_;
    /// <summary>
    ///数值(个人竞技积分、联赛积分、联盟积分)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 6;
    private int rank_;
    /// <summary>
    ///排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "ClubOrLeaderName" field.</summary>
    public const int ClubOrLeaderNameFieldNumber = 7;
    private string clubOrLeaderName_ = "";
    /// <summary>
    ///联盟名或会长名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClubOrLeaderName {
      get { return clubOrLeaderName_; }
      set {
        clubOrLeaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Arena" field.</summary>
    public const int ArenaFieldNumber = 8;
    private int arena_;
    /// <summary>
    ///竞技积分（只用于个人排名显示段位）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arena {
      get { return arena_; }
      set {
        arena_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_Rank_item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_Rank_item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if(!icon_.Equals(other.icon_)) return false;
      if (Num != other.Num) return false;
      if (Rank != other.Rank) return false;
      if (ClubOrLeaderName != other.ClubOrLeaderName) return false;
      if (Arena != other.Arena) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID.Length != 0) hash ^= PID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= icon_.GetHashCode();
      if (Num != 0L) hash ^= Num.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (ClubOrLeaderName.Length != 0) hash ^= ClubOrLeaderName.GetHashCode();
      if (Arena != 0) hash ^= Arena.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      icon_.WriteTo(output, _repeated_icon_codec);
      if (Num != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Num);
      }
      if (Rank != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rank);
      }
      if (ClubOrLeaderName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ClubOrLeaderName);
      }
      if (Arena != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Arena);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += icon_.CalculateSize(_repeated_icon_codec);
      if (Num != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Num);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (ClubOrLeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubOrLeaderName);
      }
      if (Arena != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arena);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_Rank_item other) {
      if (other == null) {
        return;
      }
      if (other.PID.Length != 0) {
        PID = other.PID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      icon_.Add(other.icon_);
      if (other.Num != 0L) {
        Num = other.Num;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.ClubOrLeaderName.Length != 0) {
        ClubOrLeaderName = other.ClubOrLeaderName;
      }
      if (other.Arena != 0) {
        Arena = other.Arena;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 40: {
            Num = input.ReadInt64();
            break;
          }
          case 48: {
            Rank = input.ReadInt32();
            break;
          }
          case 58: {
            ClubOrLeaderName = input.ReadString();
            break;
          }
          case 64: {
            Arena = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一条AIHelp推送消息
  /// </summary>
  public sealed partial class One_PushMsg : pb::IMessage<One_PushMsg> {
    private static readonly pb::MessageParser<One_PushMsg> _parser = new pb::MessageParser<One_PushMsg>(() => new One_PushMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_PushMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCom.PbComReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_PushMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_PushMsg(One_PushMsg other) : this() {
      pId_ = other.pId_;
      title_ = other.title_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_PushMsg Clone() {
      return new One_PushMsg(this);
    }

    /// <summary>Field number for the "PId" field.</summary>
    public const int PIdFieldNumber = 1;
    private string pId_ = "";
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PId {
      get { return pId_; }
      set {
        pId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    ///推送消息标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    /// <summary>
    ///推送消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_PushMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_PushMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PId != other.PId) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PId.Length != 0) hash ^= PId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_PushMsg other) {
      if (other == null) {
        return;
      }
      if (other.PId.Length != 0) {
        PId = other.PId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PId = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个聊天消息内容
  /// </summary>
  public sealed partial class One_chat_msg : pb::IMessage<One_chat_msg> {
    private static readonly pb::MessageParser<One_chat_msg> _parser = new pb::MessageParser<One_chat_msg>(() => new One_chat_msg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_chat_msg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCom.PbComReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_chat_msg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_chat_msg(One_chat_msg other) : this() {
      pID_ = other.pID_;
      name_ = other.name_;
      icon_ = other.icon_.Clone();
      content_ = other.content_;
      arena_ = other.arena_;
      level_ = other.level_;
      time_ = other.time_;
      club_ = other.club_;
      role_ = other.role_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_chat_msg Clone() {
      return new One_chat_msg(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private string pID_ = "";
    /// <summary>
    ///发送者PID  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PID {
      get { return pID_; }
      set {
        pID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///发送者名字	(SID==自己 为接收者名字)	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///发送者头像[头像、背景、角标]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    /// <summary>
    ///发送消息内容	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Arena" field.</summary>
    public const int ArenaFieldNumber = 5;
    private int arena_;
    /// <summary>
    ///竞技场积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arena {
      get { return arena_; }
      set {
        arena_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    ///玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 7;
    private int time_;
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "Club" field.</summary>
    public const int ClubFieldNumber = 8;
    private string club_ = "";
    /// <summary>
    ///联盟名（公聊有，联盟聊天没有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Club {
      get { return club_; }
      set {
        club_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Role" field.</summary>
    public const int RoleFieldNumber = 9;
    private int role_;
    /// <summary>
    ///联盟职位（公聊没有，联盟聊天有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_chat_msg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_chat_msg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (Name != other.Name) return false;
      if(!icon_.Equals(other.icon_)) return false;
      if (Content != other.Content) return false;
      if (Arena != other.Arena) return false;
      if (Level != other.Level) return false;
      if (Time != other.Time) return false;
      if (Club != other.Club) return false;
      if (Role != other.Role) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID.Length != 0) hash ^= PID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= icon_.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Arena != 0) hash ^= Arena.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Club.Length != 0) hash ^= Club.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      icon_.WriteTo(output, _repeated_icon_codec);
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      if (Arena != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Arena);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (Time != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Time);
      }
      if (Club.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Club);
      }
      if (Role != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Role);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += icon_.CalculateSize(_repeated_icon_codec);
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Arena != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arena);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Club.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Club);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Role);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_chat_msg other) {
      if (other == null) {
        return;
      }
      if (other.PID.Length != 0) {
        PID = other.PID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      icon_.Add(other.icon_);
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Arena != 0) {
        Arena = other.Arena;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Club.Length != 0) {
        Club = other.Club;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 40: {
            Arena = input.ReadInt32();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            Time = input.ReadInt32();
            break;
          }
          case 66: {
            Club = input.ReadString();
            break;
          }
          case 72: {
            Role = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
