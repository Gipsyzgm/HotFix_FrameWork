// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbCenterPay.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbCenterPay {

  /// <summary>Holder for reflection information generated from PbCenterPay.proto</summary>
  public static partial class PbCenterPayReflection {

    #region Descriptor
    /// <summary>File descriptor for PbCenterPay.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbCenterPayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQYkNlbnRlclBheS5wcm90bxILUGJDZW50ZXJQYXkaC1BiQ29tLnByb3Rv",
            "ImEKEkNTX0NlbnRlcl9wYXlPcmRlchIQCghQbGF5ZXJJZBgBIAEoCRIPCgdH",
            "b29kc0lEGAIgASgFEhQKDFBsYXRmb3JtVHlwZRgDIAEoBRISCgpQbGF0UGFy",
            "YW1zGAQgASgJIosBChJTQ19DZW50ZXJfcGF5T3JkZXISKwoGUmVzdWx0GAEg",
            "ASgOMhsuUGJDb20uRW51bV9wYXlPcmRlcl9yZXN1bHQSDwoHR29vZHNJRBgC",
            "IAEoBRIUCgxQbGF0Zm9ybVR5cGUYAyABKAUSDwoHT3JkZXJJZBgEIAEoCRIQ",
            "CghQbGF5ZXJJZBgFIAEoCSJdChRTQ19DZW50ZXJfcGF5U3VjY2VlZBIQCghQ",
            "bGF5ZXJJZBgBIAEoCRIPCgdPcmRlcklkGAIgASgJEg8KB0dvb2RzSWQYAyAB",
            "KAUSEQoJUEZPcmRlcklkGAQgASgJIicKE0NTX0NlbnRlcl9wYXlOb1NlbmQS",
            "EAoIUGxheWVySWQYASABKAkiEwoRU0NfQ2VudGVyX1BheVBhY2tiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbCom.PbComReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPay.CS_Center_payOrder), global::PbCenterPay.CS_Center_payOrder.Parser, new[]{ "PlayerId", "GoodsID", "PlatformType", "PlatParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPay.SC_Center_payOrder), global::PbCenterPay.SC_Center_payOrder.Parser, new[]{ "Result", "GoodsID", "PlatformType", "OrderId", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPay.SC_Center_paySucceed), global::PbCenterPay.SC_Center_paySucceed.Parser, new[]{ "PlayerId", "OrderId", "GoodsId", "PFOrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPay.CS_Center_payNoSend), global::PbCenterPay.CS_Center_payNoSend.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPay.SC_Center_PayPack), global::PbCenterPay.SC_Center_PayPack.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///向中央服请求充值下定单
  /// </summary>
  public sealed partial class CS_Center_payOrder : pb::IMessage<CS_Center_payOrder> {
    private static readonly pb::MessageParser<CS_Center_payOrder> _parser = new pb::MessageParser<CS_Center_payOrder>(() => new CS_Center_payOrder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Center_payOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPay.PbCenterPayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_payOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_payOrder(CS_Center_payOrder other) : this() {
      playerId_ = other.playerId_;
      goodsID_ = other.goodsID_;
      platformType_ = other.platformType_;
      platParams_ = other.platParams_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_payOrder Clone() {
      return new CS_Center_payOrder(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GoodsID" field.</summary>
    public const int GoodsIDFieldNumber = 2;
    private int goodsID_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsID {
      get { return goodsID_; }
      set {
        goodsID_ = value;
      }
    }

    /// <summary>Field number for the "PlatformType" field.</summary>
    public const int PlatformTypeFieldNumber = 3;
    private int platformType_;
    /// <summary>
    ///平台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlatformType {
      get { return platformType_; }
      set {
        platformType_ = value;
      }
    }

    /// <summary>Field number for the "PlatParams" field.</summary>
    public const int PlatParamsFieldNumber = 4;
    private string platParams_ = "";
    /// <summary>
    ///平台参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatParams {
      get { return platParams_; }
      set {
        platParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Center_payOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Center_payOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (GoodsID != other.GoodsID) return false;
      if (PlatformType != other.PlatformType) return false;
      if (PlatParams != other.PlatParams) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (GoodsID != 0) hash ^= GoodsID.GetHashCode();
      if (PlatformType != 0) hash ^= PlatformType.GetHashCode();
      if (PlatParams.Length != 0) hash ^= PlatParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (GoodsID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodsID);
      }
      if (PlatformType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlatformType);
      }
      if (PlatParams.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlatParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (GoodsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsID);
      }
      if (PlatformType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlatformType);
      }
      if (PlatParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Center_payOrder other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.GoodsID != 0) {
        GoodsID = other.GoodsID;
      }
      if (other.PlatformType != 0) {
        PlatformType = other.PlatformType;
      }
      if (other.PlatParams.Length != 0) {
        PlatParams = other.PlatParams;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            GoodsID = input.ReadInt32();
            break;
          }
          case 24: {
            PlatformType = input.ReadInt32();
            break;
          }
          case 34: {
            PlatParams = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到中央服充值下单信息
  /// </summary>
  public sealed partial class SC_Center_payOrder : pb::IMessage<SC_Center_payOrder> {
    private static readonly pb::MessageParser<SC_Center_payOrder> _parser = new pb::MessageParser<SC_Center_payOrder>(() => new SC_Center_payOrder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_payOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPay.PbCenterPayReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_payOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_payOrder(SC_Center_payOrder other) : this() {
      result_ = other.result_;
      goodsID_ = other.goodsID_;
      platformType_ = other.platformType_;
      orderId_ = other.orderId_;
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_payOrder Clone() {
      return new SC_Center_payOrder(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbCom.Enum_payOrder_result result_ = 0;
    /// <summary>
    ///结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbCom.Enum_payOrder_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "GoodsID" field.</summary>
    public const int GoodsIDFieldNumber = 2;
    private int goodsID_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsID {
      get { return goodsID_; }
      set {
        goodsID_ = value;
      }
    }

    /// <summary>Field number for the "PlatformType" field.</summary>
    public const int PlatformTypeFieldNumber = 3;
    private int platformType_;
    /// <summary>
    ///平台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlatformType {
      get { return platformType_; }
      set {
        platformType_ = value;
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 4;
    private string orderId_ = "";
    /// <summary>
    ///游戏定单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private string playerId_ = "";
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_payOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_payOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (GoodsID != other.GoodsID) return false;
      if (PlatformType != other.PlatformType) return false;
      if (OrderId != other.OrderId) return false;
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (GoodsID != 0) hash ^= GoodsID.GetHashCode();
      if (PlatformType != 0) hash ^= PlatformType.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (GoodsID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodsID);
      }
      if (PlatformType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlatformType);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OrderId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (GoodsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsID);
      }
      if (PlatformType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlatformType);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_payOrder other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.GoodsID != 0) {
        GoodsID = other.GoodsID;
      }
      if (other.PlatformType != 0) {
        PlatformType = other.PlatformType;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbCom.Enum_payOrder_result) input.ReadEnum();
            break;
          }
          case 16: {
            GoodsID = input.ReadInt32();
            break;
          }
          case 24: {
            PlatformType = input.ReadInt32();
            break;
          }
          case 34: {
            OrderId = input.ReadString();
            break;
          }
          case 42: {
            PlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到中央服支付成功通知GS发货
  /// </summary>
  public sealed partial class SC_Center_paySucceed : pb::IMessage<SC_Center_paySucceed> {
    private static readonly pb::MessageParser<SC_Center_paySucceed> _parser = new pb::MessageParser<SC_Center_paySucceed>(() => new SC_Center_paySucceed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_paySucceed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPay.PbCenterPayReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_paySucceed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_paySucceed(SC_Center_paySucceed other) : this() {
      playerId_ = other.playerId_;
      orderId_ = other.orderId_;
      goodsId_ = other.goodsId_;
      pFOrderId_ = other.pFOrderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_paySucceed Clone() {
      return new SC_Center_paySucceed(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private string orderId_ = "";
    /// <summary>
    ///游戏定单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GoodsId" field.</summary>
    public const int GoodsIdFieldNumber = 3;
    private int goodsId_;
    /// <summary>
    ///商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "PFOrderId" field.</summary>
    public const int PFOrderIdFieldNumber = 4;
    private string pFOrderId_ = "";
    /// <summary>
    ///平台订单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PFOrderId {
      get { return pFOrderId_; }
      set {
        pFOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_paySucceed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_paySucceed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (OrderId != other.OrderId) return false;
      if (GoodsId != other.GoodsId) return false;
      if (PFOrderId != other.PFOrderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (GoodsId != 0) hash ^= GoodsId.GetHashCode();
      if (PFOrderId.Length != 0) hash ^= PFOrderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
      if (GoodsId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GoodsId);
      }
      if (PFOrderId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PFOrderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsId);
      }
      if (PFOrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PFOrderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_paySucceed other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.GoodsId != 0) {
        GoodsId = other.GoodsId;
      }
      if (other.PFOrderId.Length != 0) {
        PFOrderId = other.PFOrderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
          case 24: {
            GoodsId = input.ReadInt32();
            break;
          }
          case 34: {
            PFOrderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///向中央服请求未发货订单（登录时）
  /// </summary>
  public sealed partial class CS_Center_payNoSend : pb::IMessage<CS_Center_payNoSend> {
    private static readonly pb::MessageParser<CS_Center_payNoSend> _parser = new pb::MessageParser<CS_Center_payNoSend>(() => new CS_Center_payNoSend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Center_payNoSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPay.PbCenterPayReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_payNoSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_payNoSend(CS_Center_payNoSend other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_payNoSend Clone() {
      return new CS_Center_payNoSend(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Center_payNoSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Center_payNoSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Center_payNoSend other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求更新礼包
  /// </summary>
  public sealed partial class SC_Center_PayPack : pb::IMessage<SC_Center_PayPack> {
    private static readonly pb::MessageParser<SC_Center_PayPack> _parser = new pb::MessageParser<SC_Center_PayPack>(() => new SC_Center_PayPack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_PayPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPay.PbCenterPayReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PayPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PayPack(SC_Center_PayPack other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PayPack Clone() {
      return new SC_Center_PayPack(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_PayPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_PayPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_PayPack other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
