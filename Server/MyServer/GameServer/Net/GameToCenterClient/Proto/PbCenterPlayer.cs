// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbCenterPlayer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbCenterPlayer {

  /// <summary>Holder for reflection information generated from PbCenterPlayer.proto</summary>
  public static partial class PbCenterPlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for PbCenterPlayer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbCenterPlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQYkNlbnRlclBsYXllci5wcm90bxIOUGJDZW50ZXJQbGF5ZXIaC1BiQ29t",
            "LnByb3RvImIKFUNTX0NlbnRlcl9QbGF5ZXJMb2dpbhIRCglTZXNzaW9uSWQY",
            "ASABKAUSEAoIUGxheWVySWQYAiABKAkSEQoJTG9naW5UeXBlGAMgASgFEhEK",
            "CUlzUmVMb2dpbhgEIAEoCCJ4ChVTQ19DZW50ZXJfUGxheWVyTG9naW4SEQoJ",
            "U2Vzc2lvbklkGAEgASgFEhAKCFBsYXllcklkGAIgASgJEhEKCUlzUmVMb2dp",
            "bhgDIAEoCBIQCghTZWFzb25JZBgEIAEoBRIVCg1TZWFzb25FbmRUaW1lGAUg",
            "ASgFIioKFlNDX0NlbnRlcl9QbGF5ZXJMb2dvdXQSEAoIUGxheWVySWQYASAB",
            "KAkiKgoWQ1NfQ2VudGVyX1BsYXllckxvZ291dBIQCghQbGF5ZXJJZBgBIAEo",
            "CSI0ChNTQ19DZW50ZXJfUGxheWVyQmFuEhAKCFBsYXllcklkGAEgASgJEgsK",
            "A0JhbhgCIAEoCCI2ChRTQ19DZW50ZXJfUGxheWVyVGFsaxIQCghQbGF5ZXJJ",
            "ZBgBIAEoCRIMCgRUYWxrGAIgASgIIoQBChBTQ19DZW50ZXJfR01NYWlsEgsK",
            "A01pZBgBIAEoCRIQCghQTUlkTGlzdBgCIAMoCRINCgVUaXRsZRgDIAEoCRIM",
            "CgRjb250GAQgASgJEiYKCEl0ZW1MaXN0GAUgAygLMhQuUGJDb20uT25lX0F3",
            "YXJkSXRlbRIMCgR0eXBlGAYgASgFIkoKFFNDX0NlbnRlcl9BSUhlbHBQdXNo",
            "EhAKCFBsYXllcklkGAEgASgJEiAKBEluZm8YAiADKAsyEi5QYkNvbS5PbmVf",
            "UHVzaE1zZyIoChRDU19DZW50ZXJfQUlIZWxwUHVzaBIQCghQbGF5ZXJJZBgB",
            "IAEoCSI7ChZTQ19DZW50ZXJfU2Vhc29uVXBkYXRlEhAKCFNlYXNvbklkGAEg",
            "ASgFEg8KB0VuZFRJbWUYAiABKAUiFAoSU0NfQ2VudGVyX0FjdGl2aXR5YgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbCom.PbComReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.CS_Center_PlayerLogin), global::PbCenterPlayer.CS_Center_PlayerLogin.Parser, new[]{ "SessionId", "PlayerId", "LoginType", "IsReLogin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.SC_Center_PlayerLogin), global::PbCenterPlayer.SC_Center_PlayerLogin.Parser, new[]{ "SessionId", "PlayerId", "IsReLogin", "SeasonId", "SeasonEndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.SC_Center_PlayerLogout), global::PbCenterPlayer.SC_Center_PlayerLogout.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.CS_Center_PlayerLogout), global::PbCenterPlayer.CS_Center_PlayerLogout.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.SC_Center_PlayerBan), global::PbCenterPlayer.SC_Center_PlayerBan.Parser, new[]{ "PlayerId", "Ban" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.SC_Center_PlayerTalk), global::PbCenterPlayer.SC_Center_PlayerTalk.Parser, new[]{ "PlayerId", "Talk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.SC_Center_GMMail), global::PbCenterPlayer.SC_Center_GMMail.Parser, new[]{ "Mid", "PMIdList", "Title", "Cont", "ItemList", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.SC_Center_AIHelpPush), global::PbCenterPlayer.SC_Center_AIHelpPush.Parser, new[]{ "PlayerId", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.CS_Center_AIHelpPush), global::PbCenterPlayer.CS_Center_AIHelpPush.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.SC_Center_SeasonUpdate), global::PbCenterPlayer.SC_Center_SeasonUpdate.Parser, new[]{ "SeasonId", "EndTIme" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbCenterPlayer.SC_Center_Activity), global::PbCenterPlayer.SC_Center_Activity.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///请求 中央服务器玩家登录注册
  /// </summary>
  public sealed partial class CS_Center_PlayerLogin : pb::IMessage<CS_Center_PlayerLogin> {
    private static readonly pb::MessageParser<CS_Center_PlayerLogin> _parser = new pb::MessageParser<CS_Center_PlayerLogin>(() => new CS_Center_PlayerLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Center_PlayerLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_PlayerLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_PlayerLogin(CS_Center_PlayerLogin other) : this() {
      sessionId_ = other.sessionId_;
      playerId_ = other.playerId_;
      loginType_ = other.loginType_;
      isReLogin_ = other.isReLogin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_PlayerLogin Clone() {
      return new CS_Center_PlayerLogin(this);
    }

    /// <summary>Field number for the "SessionId" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private int sessionId_;
    /// <summary>
    ///客户端SessionID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    ///玩家ObjectId 也是账号Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginType" field.</summary>
    public const int LoginTypeFieldNumber = 3;
    private int loginType_;
    /// <summary>
    ///登录类型1 新玩家，2老玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "IsReLogin" field.</summary>
    public const int IsReLoginFieldNumber = 4;
    private bool isReLogin_;
    /// <summary>
    ///是否为重登数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReLogin {
      get { return isReLogin_; }
      set {
        isReLogin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Center_PlayerLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Center_PlayerLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (LoginType != other.LoginType) return false;
      if (IsReLogin != other.IsReLogin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId != 0) hash ^= SessionId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (IsReLogin != false) hash ^= IsReLogin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SessionId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (LoginType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LoginType);
      }
      if (IsReLogin != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsReLogin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginType);
      }
      if (IsReLogin != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Center_PlayerLogin other) {
      if (other == null) {
        return;
      }
      if (other.SessionId != 0) {
        SessionId = other.SessionId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.IsReLogin != false) {
        IsReLogin = other.IsReLogin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SessionId = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            LoginType = input.ReadInt32();
            break;
          }
          case 32: {
            IsReLogin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回 中服务登录注册成功返回(成功T下线后才返回)
  /// </summary>
  public sealed partial class SC_Center_PlayerLogin : pb::IMessage<SC_Center_PlayerLogin> {
    private static readonly pb::MessageParser<SC_Center_PlayerLogin> _parser = new pb::MessageParser<SC_Center_PlayerLogin>(() => new SC_Center_PlayerLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_PlayerLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerLogin(SC_Center_PlayerLogin other) : this() {
      sessionId_ = other.sessionId_;
      playerId_ = other.playerId_;
      isReLogin_ = other.isReLogin_;
      seasonId_ = other.seasonId_;
      seasonEndTime_ = other.seasonEndTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerLogin Clone() {
      return new SC_Center_PlayerLogin(this);
    }

    /// <summary>Field number for the "SessionId" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private int sessionId_;
    /// <summary>
    ///客户端SessionID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    ///玩家ObjectId 也是账号Id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsReLogin" field.</summary>
    public const int IsReLoginFieldNumber = 3;
    private bool isReLogin_;
    /// <summary>
    ///是否为重登数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReLogin {
      get { return isReLogin_; }
      set {
        isReLogin_ = value;
      }
    }

    /// <summary>Field number for the "SeasonId" field.</summary>
    public const int SeasonIdFieldNumber = 4;
    private int seasonId_;
    /// <summary>
    ///当前赛季id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "SeasonEndTime" field.</summary>
    public const int SeasonEndTimeFieldNumber = 5;
    private int seasonEndTime_;
    /// <summary>
    ///当前赛季过期时间戳 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonEndTime {
      get { return seasonEndTime_; }
      set {
        seasonEndTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_PlayerLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_PlayerLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (IsReLogin != other.IsReLogin) return false;
      if (SeasonId != other.SeasonId) return false;
      if (SeasonEndTime != other.SeasonEndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId != 0) hash ^= SessionId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (IsReLogin != false) hash ^= IsReLogin.GetHashCode();
      if (SeasonId != 0) hash ^= SeasonId.GetHashCode();
      if (SeasonEndTime != 0) hash ^= SeasonEndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SessionId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (IsReLogin != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReLogin);
      }
      if (SeasonId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SeasonId);
      }
      if (SeasonEndTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SeasonEndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (IsReLogin != false) {
        size += 1 + 1;
      }
      if (SeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonId);
      }
      if (SeasonEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonEndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_PlayerLogin other) {
      if (other == null) {
        return;
      }
      if (other.SessionId != 0) {
        SessionId = other.SessionId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.IsReLogin != false) {
        IsReLogin = other.IsReLogin;
      }
      if (other.SeasonId != 0) {
        SeasonId = other.SeasonId;
      }
      if (other.SeasonEndTime != 0) {
        SeasonEndTime = other.SeasonEndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SessionId = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            IsReLogin = input.ReadBool();
            break;
          }
          case 32: {
            SeasonId = input.ReadInt32();
            break;
          }
          case 40: {
            SeasonEndTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///中央服务器通知GameServer 玩家下线
  /// </summary>
  public sealed partial class SC_Center_PlayerLogout : pb::IMessage<SC_Center_PlayerLogout> {
    private static readonly pb::MessageParser<SC_Center_PlayerLogout> _parser = new pb::MessageParser<SC_Center_PlayerLogout>(() => new SC_Center_PlayerLogout());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_PlayerLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerLogout(SC_Center_PlayerLogout other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerLogout Clone() {
      return new SC_Center_PlayerLogout(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家ObjectId 也是账号Id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_PlayerLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_PlayerLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_PlayerLogout other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GameServer通知中央务器通知GameServer 玩家下线
  /// </summary>
  public sealed partial class CS_Center_PlayerLogout : pb::IMessage<CS_Center_PlayerLogout> {
    private static readonly pb::MessageParser<CS_Center_PlayerLogout> _parser = new pb::MessageParser<CS_Center_PlayerLogout>(() => new CS_Center_PlayerLogout());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Center_PlayerLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_PlayerLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_PlayerLogout(CS_Center_PlayerLogout other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_PlayerLogout Clone() {
      return new CS_Center_PlayerLogout(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家ObjectId 也是账号Id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Center_PlayerLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Center_PlayerLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Center_PlayerLogout other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///中央服务器通知游戏服务器 玩家是否可以登录
  /// </summary>
  public sealed partial class SC_Center_PlayerBan : pb::IMessage<SC_Center_PlayerBan> {
    private static readonly pb::MessageParser<SC_Center_PlayerBan> _parser = new pb::MessageParser<SC_Center_PlayerBan>(() => new SC_Center_PlayerBan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_PlayerBan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerBan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerBan(SC_Center_PlayerBan other) : this() {
      playerId_ = other.playerId_;
      ban_ = other.ban_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerBan Clone() {
      return new SC_Center_PlayerBan(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家ObjectId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ban" field.</summary>
    public const int BanFieldNumber = 2;
    private bool ban_;
    /// <summary>
    ///帐号状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ban {
      get { return ban_; }
      set {
        ban_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_PlayerBan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_PlayerBan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Ban != other.Ban) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Ban != false) hash ^= Ban.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Ban != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ban);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Ban != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_PlayerBan other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Ban != false) {
        Ban = other.Ban;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            Ban = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///中央服务器通知游戏服务器玩家是否禁言
  /// </summary>
  public sealed partial class SC_Center_PlayerTalk : pb::IMessage<SC_Center_PlayerTalk> {
    private static readonly pb::MessageParser<SC_Center_PlayerTalk> _parser = new pb::MessageParser<SC_Center_PlayerTalk>(() => new SC_Center_PlayerTalk());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_PlayerTalk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerTalk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerTalk(SC_Center_PlayerTalk other) : this() {
      playerId_ = other.playerId_;
      talk_ = other.talk_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_PlayerTalk Clone() {
      return new SC_Center_PlayerTalk(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家ObjectId 	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Talk" field.</summary>
    public const int TalkFieldNumber = 2;
    private bool talk_;
    /// <summary>
    ///帐号状态	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Talk {
      get { return talk_; }
      set {
        talk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_PlayerTalk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_PlayerTalk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Talk != other.Talk) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Talk != false) hash ^= Talk.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Talk != false) {
        output.WriteRawTag(16);
        output.WriteBool(Talk);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Talk != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_PlayerTalk other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Talk != false) {
        Talk = other.Talk;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            Talk = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///中央服务器通发游戏服务器玩家邮件
  /// </summary>
  public sealed partial class SC_Center_GMMail : pb::IMessage<SC_Center_GMMail> {
    private static readonly pb::MessageParser<SC_Center_GMMail> _parser = new pb::MessageParser<SC_Center_GMMail>(() => new SC_Center_GMMail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_GMMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_GMMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_GMMail(SC_Center_GMMail other) : this() {
      mid_ = other.mid_;
      pMIdList_ = other.pMIdList_.Clone();
      title_ = other.title_;
      cont_ = other.cont_;
      itemList_ = other.itemList_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_GMMail Clone() {
      return new SC_Center_GMMail(this);
    }

    /// <summary>Field number for the "Mid" field.</summary>
    public const int MidFieldNumber = 1;
    private string mid_ = "";
    /// <summary>
    ///邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mid {
      get { return mid_; }
      set {
        mid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PMIdList" field.</summary>
    public const int PMIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_pMIdList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> pMIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///玩家ID,邮件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PMIdList {
      get { return pMIdList_; }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    /// <summary>
    ///邮件标题	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cont" field.</summary>
    public const int ContFieldNumber = 4;
    private string cont_ = "";
    /// <summary>
    ///邮件是否已打开 (0未读,1已读)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cont {
      get { return cont_; }
      set {
        cont_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemList" field.</summary>
    public const int ItemListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(42, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> itemList_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    ///全服/个人  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_GMMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_GMMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if(!pMIdList_.Equals(other.pMIdList_)) return false;
      if (Title != other.Title) return false;
      if (Cont != other.Cont) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid.Length != 0) hash ^= Mid.GetHashCode();
      hash ^= pMIdList_.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Cont.Length != 0) hash ^= Cont.GetHashCode();
      hash ^= itemList_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mid);
      }
      pMIdList_.WriteTo(output, _repeated_pMIdList_codec);
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Cont.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cont);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mid);
      }
      size += pMIdList_.CalculateSize(_repeated_pMIdList_codec);
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Cont.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cont);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_GMMail other) {
      if (other == null) {
        return;
      }
      if (other.Mid.Length != 0) {
        Mid = other.Mid;
      }
      pMIdList_.Add(other.pMIdList_);
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Cont.Length != 0) {
        Cont = other.Cont;
      }
      itemList_.Add(other.itemList_);
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mid = input.ReadString();
            break;
          }
          case 18: {
            pMIdList_.AddEntriesFrom(input, _repeated_pMIdList_codec);
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Cont = input.ReadString();
            break;
          }
          case 42: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知游戏服玩家有客服推送消息
  /// </summary>
  public sealed partial class SC_Center_AIHelpPush : pb::IMessage<SC_Center_AIHelpPush> {
    private static readonly pb::MessageParser<SC_Center_AIHelpPush> _parser = new pb::MessageParser<SC_Center_AIHelpPush>(() => new SC_Center_AIHelpPush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_AIHelpPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_AIHelpPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_AIHelpPush(SC_Center_AIHelpPush other) : this() {
      playerId_ = other.playerId_;
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_AIHelpPush Clone() {
      return new SC_Center_AIHelpPush(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbCom.One_PushMsg> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::PbCom.One_PushMsg.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_PushMsg> info_ = new pbc::RepeatedField<global::PbCom.One_PushMsg>();
    /// <summary>
    ///推送消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_PushMsg> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_AIHelpPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_AIHelpPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if(!info_.Equals(other.info_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      hash ^= info_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_AIHelpPush other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///向中央服请求玩家未发送的推送消息（登录时）
  /// </summary>
  public sealed partial class CS_Center_AIHelpPush : pb::IMessage<CS_Center_AIHelpPush> {
    private static readonly pb::MessageParser<CS_Center_AIHelpPush> _parser = new pb::MessageParser<CS_Center_AIHelpPush>(() => new CS_Center_AIHelpPush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Center_AIHelpPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_AIHelpPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_AIHelpPush(CS_Center_AIHelpPush other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Center_AIHelpPush Clone() {
      return new CS_Center_AIHelpPush(this);
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    ///玩家ObjectId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Center_AIHelpPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Center_AIHelpPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Center_AIHelpPush other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知游戏服赛季更新消息
  /// </summary>
  public sealed partial class SC_Center_SeasonUpdate : pb::IMessage<SC_Center_SeasonUpdate> {
    private static readonly pb::MessageParser<SC_Center_SeasonUpdate> _parser = new pb::MessageParser<SC_Center_SeasonUpdate>(() => new SC_Center_SeasonUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_SeasonUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_SeasonUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_SeasonUpdate(SC_Center_SeasonUpdate other) : this() {
      seasonId_ = other.seasonId_;
      endTIme_ = other.endTIme_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_SeasonUpdate Clone() {
      return new SC_Center_SeasonUpdate(this);
    }

    /// <summary>Field number for the "SeasonId" field.</summary>
    public const int SeasonIdFieldNumber = 1;
    private int seasonId_;
    /// <summary>
    ///赛季ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "EndTIme" field.</summary>
    public const int EndTImeFieldNumber = 2;
    private int endTIme_;
    /// <summary>
    ///赛季过期时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTIme {
      get { return endTIme_; }
      set {
        endTIme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_SeasonUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_SeasonUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeasonId != other.SeasonId) return false;
      if (EndTIme != other.EndTIme) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeasonId != 0) hash ^= SeasonId.GetHashCode();
      if (EndTIme != 0) hash ^= EndTIme.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeasonId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeasonId);
      }
      if (EndTIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndTIme);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonId);
      }
      if (EndTIme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTIme);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_SeasonUpdate other) {
      if (other == null) {
        return;
      }
      if (other.SeasonId != 0) {
        SeasonId = other.SeasonId;
      }
      if (other.EndTIme != 0) {
        EndTIme = other.EndTIme;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeasonId = input.ReadInt32();
            break;
          }
          case 16: {
            EndTIme = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求更新活动
  /// </summary>
  public sealed partial class SC_Center_Activity : pb::IMessage<SC_Center_Activity> {
    private static readonly pb::MessageParser<SC_Center_Activity> _parser = new pb::MessageParser<SC_Center_Activity>(() => new SC_Center_Activity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Center_Activity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbCenterPlayer.PbCenterPlayerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_Activity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_Activity(SC_Center_Activity other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Center_Activity Clone() {
      return new SC_Center_Activity(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Center_Activity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Center_Activity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Center_Activity other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
