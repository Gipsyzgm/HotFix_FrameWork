// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbGameSerCommand.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbGameSerCommand {

  /// <summary>Holder for reflection information generated from PbGameSerCommand.proto</summary>
  public static partial class PbGameSerCommandReflection {

    #region Descriptor
    /// <summary>File descriptor for PbGameSerCommand.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbGameSerCommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQYkdhbWVTZXJDb21tYW5kLnByb3RvEhBQYkdhbWVTZXJDb21tYW5kIh0K",
            "ClNDX0NvbW1hbmQSDwoHQ29tbWFuZBgBIAEoCSI/CgpDU19Db21tYW5kEhEK",
            "CUlzU3VjY2VlZBgBIAEoCBIQCghTZXJ2ZXJJZBgCIAEoBRIMCgRJbmZvGAMg",
            "ASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGameSerCommand.SC_Command), global::PbGameSerCommand.SC_Command.Parser, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbGameSerCommand.CS_Command), global::PbGameSerCommand.CS_Command.Parser, new[]{ "IsSucceed", "ServerId", "Info" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///向游戏服发送命令行
  /// </summary>
  public sealed partial class SC_Command : pb::IMessage<SC_Command> {
    private static readonly pb::MessageParser<SC_Command> _parser = new pb::MessageParser<SC_Command>(() => new SC_Command());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGameSerCommand.PbGameSerCommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Command(SC_Command other) : this() {
      command_ = other.command_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Command Clone() {
      return new SC_Command(this);
    }

    /// <summary>Field number for the "Command" field.</summary>
    public const int CommandFieldNumber = 1;
    private string command_ = "";
    /// <summary>
    ///命令行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Command other) {
      if (other == null) {
        return;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Command = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服返回命令行信息
  /// </summary>
  public sealed partial class CS_Command : pb::IMessage<CS_Command> {
    private static readonly pb::MessageParser<CS_Command> _parser = new pb::MessageParser<CS_Command>(() => new CS_Command());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbGameSerCommand.PbGameSerCommandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Command(CS_Command other) : this() {
      isSucceed_ = other.isSucceed_;
      serverId_ = other.serverId_;
      info_ = other.info_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Command Clone() {
      return new CS_Command(this);
    }

    /// <summary>Field number for the "IsSucceed" field.</summary>
    public const int IsSucceedFieldNumber = 1;
    private bool isSucceed_;
    /// <summary>
    ///是否成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSucceed {
      get { return isSucceed_; }
      set {
        isSucceed_ = value;
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private int serverId_;
    /// <summary>
    ///返回的ServerId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 3;
    private string info_ = "";
    /// <summary>
    ///信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSucceed != other.IsSucceed) return false;
      if (ServerId != other.ServerId) return false;
      if (Info != other.Info) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSucceed != false) hash ^= IsSucceed.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSucceed != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSucceed);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerId);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSucceed != false) {
        size += 1 + 1;
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Command other) {
      if (other == null) {
        return;
      }
      if (other.IsSucceed != false) {
        IsSucceed = other.IsSucceed;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSucceed = input.ReadBool();
            break;
          }
          case 16: {
            ServerId = input.ReadInt32();
            break;
          }
          case 26: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
