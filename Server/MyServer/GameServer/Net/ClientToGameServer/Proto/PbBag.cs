// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbBag.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbBag {

  /// <summary>Holder for reflection information generated from PbBag.proto</summary>
  public static partial class PbBagReflection {

    #region Descriptor
    /// <summary>File descriptor for PbBag.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbBagReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtQYkJhZy5wcm90bxIFUGJCYWcaC1BiQ29tLnByb3RvIoIBCgtTQ19iYWdf",
            "bGlzdBIlCghQcm9wTGlzdBgBIAMoCzITLlBiQmFnLk9uZV9iYWdfcHJvcBIn",
            "CglFcXVpcExpc3QYAiADKAsyFC5QYkNvbS5PbmVfYmFnX2VxdWlwEiMKB0dl",
            "bUxpc3QYAyADKAsyEi5QYkNvbS5PbmVfYmFnX0dlbSJjCg9TQ19iYWdfbmV3",
            "SXRlbXMSLAoJSXRlbXNUeXBlGAEgASgOMhkuUGJDb20uRW51bV9iYWdfaXRl",
            "bXNUeXBlEiIKBUl0ZW1zGAIgAygLMhMuUGJCYWcuT25lX2JhZ19pdGVtIkcK",
            "FlNDX2JhZ191cGRhdGVJdGVtQ291bnQSDwoHSXRlbVNJRBgBIAEoBRIPCgdU",
            "ZW1wbElEGAIgASgFEgsKA051bRgDIAEoBSKrAQoMT25lX2JhZ19pdGVtEgsK",
            "A1NJRBgBIAEoBRIPCgdUZW1wbElEGAIgASgFEgsKA051bRgDIAEoBRINCgVM",
            "ZXZlbBgEIAEoBRILCgNFeHAYBSABKAUSDwoHQnJlYWtMdhgGIAEoBRINCgVp",
            "bmRleBgHIAEoBRIRCglJc0dldEhlcm8YCCABKAgSDwoHSGVyb0V4cBgJIAEo",
            "BRIQCghWZWRpb051bRgKIAEoBSIsCgxPbmVfYmFnX3Byb3ASDwoHVGVtcGxJ",
            "RBgBIAEoBRILCgNOdW0YAiABKAUiLgoOQ1NfYmFnX3VzZUl0ZW0SDwoHVGVt",
            "cGxJRBgBIAEoBRILCgNOdW0YAiABKAUiLgoOU0NfYmFnX3VzZUl0ZW0SDwoH",
            "VGVtcGxJRBgBIAEoBRILCgNOdW0YAiABKAUiLwoPQ1NfYmFnX3NlbGxQcm9w",
            "Eg8KB1RlbXBsSUQYASABKAUSCwoDTnVtGAIgASgFIh8KEENTX2JhZ19zZWxs",
            "RXF1aXASCwoDU0lEGAEgASgFIh8KEFNDX2JhZ19zZWxsRXF1aXASCwoDU0lE",
            "GAEgASgFIjUKEkNTX2JhZ19jaGFuZ2VFcXVpcBIQCghFcXVpcFNJRBgBIAEo",
            "BRINCgVJc1VzZRgCIAEoCCI1ChJTQ19iYWdfY2hhbmdlRXF1aXASEAoIRXF1",
            "aXBTSUQYASABKAUSDQoFSXNVc2UYAiABKAgiIwoNU0NfYmFnX0FtdWxldBIS",
            "CgpBbXVsZXRUaW1lGAEgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbCom.PbComReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.SC_bag_list), global::PbBag.SC_bag_list.Parser, new[]{ "PropList", "EquipList", "GemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.SC_bag_newItems), global::PbBag.SC_bag_newItems.Parser, new[]{ "ItemsType", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.SC_bag_updateItemCount), global::PbBag.SC_bag_updateItemCount.Parser, new[]{ "ItemSID", "TemplID", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.One_bag_item), global::PbBag.One_bag_item.Parser, new[]{ "SID", "TemplID", "Num", "Level", "Exp", "BreakLv", "Index", "IsGetHero", "HeroExp", "VedioNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.One_bag_prop), global::PbBag.One_bag_prop.Parser, new[]{ "TemplID", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.CS_bag_useItem), global::PbBag.CS_bag_useItem.Parser, new[]{ "TemplID", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.SC_bag_useItem), global::PbBag.SC_bag_useItem.Parser, new[]{ "TemplID", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.CS_bag_sellProp), global::PbBag.CS_bag_sellProp.Parser, new[]{ "TemplID", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.CS_bag_sellEquip), global::PbBag.CS_bag_sellEquip.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.SC_bag_sellEquip), global::PbBag.SC_bag_sellEquip.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.CS_bag_changeEquip), global::PbBag.CS_bag_changeEquip.Parser, new[]{ "EquipSID", "IsUse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.SC_bag_changeEquip), global::PbBag.SC_bag_changeEquip.Parser, new[]{ "EquipSID", "IsUse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBag.SC_bag_Amulet), global::PbBag.SC_bag_Amulet.Parser, new[]{ "AmuletTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///收到背包列表
  /// </summary>
  public sealed partial class SC_bag_list : pb::IMessage<SC_bag_list> {
    private static readonly pb::MessageParser<SC_bag_list> _parser = new pb::MessageParser<SC_bag_list>(() => new SC_bag_list());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_bag_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_list(SC_bag_list other) : this() {
      propList_ = other.propList_.Clone();
      equipList_ = other.equipList_.Clone();
      gemList_ = other.gemList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_list Clone() {
      return new SC_bag_list(this);
    }

    /// <summary>Field number for the "PropList" field.</summary>
    public const int PropListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbBag.One_bag_prop> _repeated_propList_codec
        = pb::FieldCodec.ForMessage(10, global::PbBag.One_bag_prop.Parser);
    private readonly pbc::RepeatedField<global::PbBag.One_bag_prop> propList_ = new pbc::RepeatedField<global::PbBag.One_bag_prop>();
    /// <summary>
    ///道具列有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBag.One_bag_prop> PropList {
      get { return propList_; }
    }

    /// <summary>Field number for the "EquipList" field.</summary>
    public const int EquipListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbCom.One_bag_equip> _repeated_equipList_codec
        = pb::FieldCodec.ForMessage(18, global::PbCom.One_bag_equip.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_bag_equip> equipList_ = new pbc::RepeatedField<global::PbCom.One_bag_equip>();
    /// <summary>
    ///装备列表	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_bag_equip> EquipList {
      get { return equipList_; }
    }

    /// <summary>Field number for the "GemList" field.</summary>
    public const int GemListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbCom.One_bag_Gem> _repeated_gemList_codec
        = pb::FieldCodec.ForMessage(26, global::PbCom.One_bag_Gem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_bag_Gem> gemList_ = new pbc::RepeatedField<global::PbCom.One_bag_Gem>();
    /// <summary>
    ///宝石列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_bag_Gem> GemList {
      get { return gemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_bag_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_bag_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!propList_.Equals(other.propList_)) return false;
      if(!equipList_.Equals(other.equipList_)) return false;
      if(!gemList_.Equals(other.gemList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= propList_.GetHashCode();
      hash ^= equipList_.GetHashCode();
      hash ^= gemList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      propList_.WriteTo(output, _repeated_propList_codec);
      equipList_.WriteTo(output, _repeated_equipList_codec);
      gemList_.WriteTo(output, _repeated_gemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += propList_.CalculateSize(_repeated_propList_codec);
      size += equipList_.CalculateSize(_repeated_equipList_codec);
      size += gemList_.CalculateSize(_repeated_gemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_bag_list other) {
      if (other == null) {
        return;
      }
      propList_.Add(other.propList_);
      equipList_.Add(other.equipList_);
      gemList_.Add(other.gemList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            propList_.AddEntriesFrom(input, _repeated_propList_codec);
            break;
          }
          case 18: {
            equipList_.AddEntriesFrom(input, _repeated_equipList_codec);
            break;
          }
          case 26: {
            gemList_.AddEntriesFrom(input, _repeated_gemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获得多个物品,可能是虚拟物品,也可能是装备,道具(客户端要把同Id的道具数量相加)
  ///虚拟物品需要把值加到原值上
  /// </summary>
  public sealed partial class SC_bag_newItems : pb::IMessage<SC_bag_newItems> {
    private static readonly pb::MessageParser<SC_bag_newItems> _parser = new pb::MessageParser<SC_bag_newItems>(() => new SC_bag_newItems());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_bag_newItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_newItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_newItems(SC_bag_newItems other) : this() {
      itemsType_ = other.itemsType_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_newItems Clone() {
      return new SC_bag_newItems(this);
    }

    /// <summary>Field number for the "ItemsType" field.</summary>
    public const int ItemsTypeFieldNumber = 1;
    private global::PbCom.Enum_bag_itemsType itemsType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbCom.Enum_bag_itemsType ItemsType {
      get { return itemsType_; }
      set {
        itemsType_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbBag.One_bag_item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::PbBag.One_bag_item.Parser);
    private readonly pbc::RepeatedField<global::PbBag.One_bag_item> items_ = new pbc::RepeatedField<global::PbBag.One_bag_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBag.One_bag_item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_bag_newItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_bag_newItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemsType != other.ItemsType) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemsType != 0) hash ^= ItemsType.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemsType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemsType);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemsType);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_bag_newItems other) {
      if (other == null) {
        return;
      }
      if (other.ItemsType != 0) {
        ItemsType = other.ItemsType;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemsType_ = (global::PbCom.Enum_bag_itemsType) input.ReadEnum();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新单个物品,道具或装备数量
  /// </summary>
  public sealed partial class SC_bag_updateItemCount : pb::IMessage<SC_bag_updateItemCount> {
    private static readonly pb::MessageParser<SC_bag_updateItemCount> _parser = new pb::MessageParser<SC_bag_updateItemCount>(() => new SC_bag_updateItemCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_bag_updateItemCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_updateItemCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_updateItemCount(SC_bag_updateItemCount other) : this() {
      itemSID_ = other.itemSID_;
      templID_ = other.templID_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_updateItemCount Clone() {
      return new SC_bag_updateItemCount(this);
    }

    /// <summary>Field number for the "ItemSID" field.</summary>
    public const int ItemSIDFieldNumber = 1;
    private int itemSID_;
    /// <summary>
    ///装备短Id  道具为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSID {
      get { return itemSID_; }
      set {
        itemSID_ = value;
      }
    }

    /// <summary>Field number for the "TemplID" field.</summary>
    public const int TemplIDFieldNumber = 2;
    private int templID_;
    /// <summary>
    ///模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplID {
      get { return templID_; }
      set {
        templID_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///数量 (更新为更新后的数量 0客户端要移除物品)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_bag_updateItemCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_bag_updateItemCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemSID != other.ItemSID) return false;
      if (TemplID != other.TemplID) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemSID != 0) hash ^= ItemSID.GetHashCode();
      if (TemplID != 0) hash ^= TemplID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemSID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemSID);
      }
      if (TemplID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TemplID);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemSID);
      }
      if (TemplID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_bag_updateItemCount other) {
      if (other == null) {
        return;
      }
      if (other.ItemSID != 0) {
        ItemSID = other.ItemSID;
      }
      if (other.TemplID != 0) {
        TemplID = other.TemplID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemSID = input.ReadInt32();
            break;
          }
          case 16: {
            TemplID = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个物品(装备，道具，虚拟物品)
  /// </summary>
  public sealed partial class One_bag_item : pb::IMessage<One_bag_item> {
    private static readonly pb::MessageParser<One_bag_item> _parser = new pb::MessageParser<One_bag_item>(() => new One_bag_item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_bag_item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_item(One_bag_item other) : this() {
      sID_ = other.sID_;
      templID_ = other.templID_;
      num_ = other.num_;
      level_ = other.level_;
      exp_ = other.exp_;
      breakLv_ = other.breakLv_;
      index_ = other.index_;
      isGetHero_ = other.isGetHero_;
      heroExp_ = other.heroExp_;
      vedioNum_ = other.vedioNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_item Clone() {
      return new One_bag_item(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备sid （道具和英雄都为0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "TemplID" field.</summary>
    public const int TemplIDFieldNumber = 2;
    private int templID_;
    /// <summary>
    ///模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplID {
      get { return templID_; }
      set {
        templID_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///数量   装备Num为0 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///装备等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 5;
    private int exp_;
    /// <summary>
    ///经验（英雄以外为 0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "BreakLv" field.</summary>
    public const int BreakLvFieldNumber = 6;
    private int breakLv_;
    /// <summary>
    ///品阶等级（道具为 0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakLv {
      get { return breakLv_; }
      set {
        breakLv_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 7;
    private int index_;
    /// <summary>
    ///位置（默认 0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "IsGetHero" field.</summary>
    public const int IsGetHeroFieldNumber = 8;
    private bool isGetHero_;
    /// <summary>
    ///是否获得英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetHero {
      get { return isGetHero_; }
      set {
        isGetHero_ = value;
      }
    }

    /// <summary>Field number for the "HeroExp" field.</summary>
    public const int HeroExpFieldNumber = 9;
    private int heroExp_;
    /// <summary>
    ///英雄经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroExp {
      get { return heroExp_; }
      set {
        heroExp_ = value;
      }
    }

    /// <summary>Field number for the "VedioNum" field.</summary>
    public const int VedioNumFieldNumber = 10;
    private int vedioNum_;
    /// <summary>
    ///英雄广告数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VedioNum {
      get { return vedioNum_; }
      set {
        vedioNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_bag_item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_bag_item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (TemplID != other.TemplID) return false;
      if (Num != other.Num) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (BreakLv != other.BreakLv) return false;
      if (Index != other.Index) return false;
      if (IsGetHero != other.IsGetHero) return false;
      if (HeroExp != other.HeroExp) return false;
      if (VedioNum != other.VedioNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (TemplID != 0) hash ^= TemplID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (BreakLv != 0) hash ^= BreakLv.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (IsGetHero != false) hash ^= IsGetHero.GetHashCode();
      if (HeroExp != 0) hash ^= HeroExp.GetHashCode();
      if (VedioNum != 0) hash ^= VedioNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (TemplID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TemplID);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Exp);
      }
      if (BreakLv != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BreakLv);
      }
      if (Index != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Index);
      }
      if (IsGetHero != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsGetHero);
      }
      if (HeroExp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HeroExp);
      }
      if (VedioNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(VedioNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (TemplID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (BreakLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakLv);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (IsGetHero != false) {
        size += 1 + 1;
      }
      if (HeroExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroExp);
      }
      if (VedioNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VedioNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_bag_item other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.TemplID != 0) {
        TemplID = other.TemplID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.BreakLv != 0) {
        BreakLv = other.BreakLv;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.IsGetHero != false) {
        IsGetHero = other.IsGetHero;
      }
      if (other.HeroExp != 0) {
        HeroExp = other.HeroExp;
      }
      if (other.VedioNum != 0) {
        VedioNum = other.VedioNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            TemplID = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Exp = input.ReadInt32();
            break;
          }
          case 48: {
            BreakLv = input.ReadInt32();
            break;
          }
          case 56: {
            Index = input.ReadInt32();
            break;
          }
          case 64: {
            IsGetHero = input.ReadBool();
            break;
          }
          case 72: {
            HeroExp = input.ReadInt32();
            break;
          }
          case 80: {
            VedioNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///道具,材料或碎片
  /// </summary>
  public sealed partial class One_bag_prop : pb::IMessage<One_bag_prop> {
    private static readonly pb::MessageParser<One_bag_prop> _parser = new pb::MessageParser<One_bag_prop>(() => new One_bag_prop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_bag_prop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_prop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_prop(One_bag_prop other) : this() {
      templID_ = other.templID_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_bag_prop Clone() {
      return new One_bag_prop(this);
    }

    /// <summary>Field number for the "TemplID" field.</summary>
    public const int TemplIDFieldNumber = 1;
    private int templID_;
    /// <summary>
    ///模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplID {
      get { return templID_; }
      set {
        templID_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_bag_prop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_bag_prop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TemplID != other.TemplID) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TemplID != 0) hash ^= TemplID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TemplID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TemplID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TemplID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_bag_prop other) {
      if (other == null) {
        return;
      }
      if (other.TemplID != 0) {
        TemplID = other.TemplID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TemplID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求使用物品
  /// </summary>
  public sealed partial class CS_bag_useItem : pb::IMessage<CS_bag_useItem> {
    private static readonly pb::MessageParser<CS_bag_useItem> _parser = new pb::MessageParser<CS_bag_useItem>(() => new CS_bag_useItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_bag_useItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_useItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_useItem(CS_bag_useItem other) : this() {
      templID_ = other.templID_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_useItem Clone() {
      return new CS_bag_useItem(this);
    }

    /// <summary>Field number for the "TemplID" field.</summary>
    public const int TemplIDFieldNumber = 1;
    private int templID_;
    /// <summary>
    ///物品模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplID {
      get { return templID_; }
      set {
        templID_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///使用数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_bag_useItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_bag_useItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TemplID != other.TemplID) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TemplID != 0) hash ^= TemplID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TemplID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TemplID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TemplID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_bag_useItem other) {
      if (other == null) {
        return;
      }
      if (other.TemplID != 0) {
        TemplID = other.TemplID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TemplID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到使用物品
  /// </summary>
  public sealed partial class SC_bag_useItem : pb::IMessage<SC_bag_useItem> {
    private static readonly pb::MessageParser<SC_bag_useItem> _parser = new pb::MessageParser<SC_bag_useItem>(() => new SC_bag_useItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_bag_useItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_useItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_useItem(SC_bag_useItem other) : this() {
      templID_ = other.templID_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_useItem Clone() {
      return new SC_bag_useItem(this);
    }

    /// <summary>Field number for the "TemplID" field.</summary>
    public const int TemplIDFieldNumber = 1;
    private int templID_;
    /// <summary>
    ///物品模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplID {
      get { return templID_; }
      set {
        templID_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///使用数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_bag_useItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_bag_useItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TemplID != other.TemplID) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TemplID != 0) hash ^= TemplID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TemplID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TemplID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TemplID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_bag_useItem other) {
      if (other == null) {
        return;
      }
      if (other.TemplID != 0) {
        TemplID = other.TemplID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TemplID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求出售道具
  /// </summary>
  public sealed partial class CS_bag_sellProp : pb::IMessage<CS_bag_sellProp> {
    private static readonly pb::MessageParser<CS_bag_sellProp> _parser = new pb::MessageParser<CS_bag_sellProp>(() => new CS_bag_sellProp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_bag_sellProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_sellProp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_sellProp(CS_bag_sellProp other) : this() {
      templID_ = other.templID_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_sellProp Clone() {
      return new CS_bag_sellProp(this);
    }

    /// <summary>Field number for the "TemplID" field.</summary>
    public const int TemplIDFieldNumber = 1;
    private int templID_;
    /// <summary>
    ///道具模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplID {
      get { return templID_; }
      set {
        templID_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///出售数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_bag_sellProp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_bag_sellProp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TemplID != other.TemplID) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TemplID != 0) hash ^= TemplID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TemplID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TemplID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TemplID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_bag_sellProp other) {
      if (other == null) {
        return;
      }
      if (other.TemplID != 0) {
        TemplID = other.TemplID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TemplID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求出售装备
  /// </summary>
  public sealed partial class CS_bag_sellEquip : pb::IMessage<CS_bag_sellEquip> {
    private static readonly pb::MessageParser<CS_bag_sellEquip> _parser = new pb::MessageParser<CS_bag_sellEquip>(() => new CS_bag_sellEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_bag_sellEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_sellEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_sellEquip(CS_bag_sellEquip other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_sellEquip Clone() {
      return new CS_bag_sellEquip(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备为SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_bag_sellEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_bag_sellEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_bag_sellEquip other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到出售装备
  /// </summary>
  public sealed partial class SC_bag_sellEquip : pb::IMessage<SC_bag_sellEquip> {
    private static readonly pb::MessageParser<SC_bag_sellEquip> _parser = new pb::MessageParser<SC_bag_sellEquip>(() => new SC_bag_sellEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_bag_sellEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_sellEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_sellEquip(SC_bag_sellEquip other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_sellEquip Clone() {
      return new SC_bag_sellEquip(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备为SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_bag_sellEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_bag_sellEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_bag_sellEquip other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求更换马主装备
  /// </summary>
  public sealed partial class CS_bag_changeEquip : pb::IMessage<CS_bag_changeEquip> {
    private static readonly pb::MessageParser<CS_bag_changeEquip> _parser = new pb::MessageParser<CS_bag_changeEquip>(() => new CS_bag_changeEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_bag_changeEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_changeEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_changeEquip(CS_bag_changeEquip other) : this() {
      equipSID_ = other.equipSID_;
      isUse_ = other.isUse_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_bag_changeEquip Clone() {
      return new CS_bag_changeEquip(this);
    }

    /// <summary>Field number for the "EquipSID" field.</summary>
    public const int EquipSIDFieldNumber = 1;
    private int equipSID_;
    /// <summary>
    ///装备SID 穿戴或卸下的装备Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSID {
      get { return equipSID_; }
      set {
        equipSID_ = value;
      }
    }

    /// <summary>Field number for the "IsUse" field.</summary>
    public const int IsUseFieldNumber = 2;
    private bool isUse_;
    /// <summary>
    ///true穿戴装备  /false 卸下装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUse {
      get { return isUse_; }
      set {
        isUse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_bag_changeEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_bag_changeEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipSID != other.EquipSID) return false;
      if (IsUse != other.IsUse) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipSID != 0) hash ^= EquipSID.GetHashCode();
      if (IsUse != false) hash ^= IsUse.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipSID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EquipSID);
      }
      if (IsUse != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsUse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSID);
      }
      if (IsUse != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_bag_changeEquip other) {
      if (other == null) {
        return;
      }
      if (other.EquipSID != 0) {
        EquipSID = other.EquipSID;
      }
      if (other.IsUse != false) {
        IsUse = other.IsUse;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipSID = input.ReadInt32();
            break;
          }
          case 16: {
            IsUse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到更换马主装备
  /// </summary>
  public sealed partial class SC_bag_changeEquip : pb::IMessage<SC_bag_changeEquip> {
    private static readonly pb::MessageParser<SC_bag_changeEquip> _parser = new pb::MessageParser<SC_bag_changeEquip>(() => new SC_bag_changeEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_bag_changeEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_changeEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_changeEquip(SC_bag_changeEquip other) : this() {
      equipSID_ = other.equipSID_;
      isUse_ = other.isUse_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_changeEquip Clone() {
      return new SC_bag_changeEquip(this);
    }

    /// <summary>Field number for the "EquipSID" field.</summary>
    public const int EquipSIDFieldNumber = 1;
    private int equipSID_;
    /// <summary>
    ///装备SID 穿戴或卸下的装备Id (原位置的装备自行处理)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSID {
      get { return equipSID_; }
      set {
        equipSID_ = value;
      }
    }

    /// <summary>Field number for the "IsUse" field.</summary>
    public const int IsUseFieldNumber = 2;
    private bool isUse_;
    /// <summary>
    ///true穿戴装备  /false 卸下装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUse {
      get { return isUse_; }
      set {
        isUse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_bag_changeEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_bag_changeEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipSID != other.EquipSID) return false;
      if (IsUse != other.IsUse) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipSID != 0) hash ^= EquipSID.GetHashCode();
      if (IsUse != false) hash ^= IsUse.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipSID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EquipSID);
      }
      if (IsUse != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsUse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSID);
      }
      if (IsUse != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_bag_changeEquip other) {
      if (other == null) {
        return;
      }
      if (other.EquipSID != 0) {
        EquipSID = other.EquipSID;
      }
      if (other.IsUse != false) {
        IsUse = other.IsUse;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipSID = input.ReadInt32();
            break;
          }
          case 16: {
            IsUse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到使用平安符
  /// </summary>
  public sealed partial class SC_bag_Amulet : pb::IMessage<SC_bag_Amulet> {
    private static readonly pb::MessageParser<SC_bag_Amulet> _parser = new pb::MessageParser<SC_bag_Amulet>(() => new SC_bag_Amulet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_bag_Amulet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBag.PbBagReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_Amulet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_Amulet(SC_bag_Amulet other) : this() {
      amuletTime_ = other.amuletTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bag_Amulet Clone() {
      return new SC_bag_Amulet(this);
    }

    /// <summary>Field number for the "AmuletTime" field.</summary>
    public const int AmuletTimeFieldNumber = 1;
    private int amuletTime_;
    /// <summary>
    ///平安符到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AmuletTime {
      get { return amuletTime_; }
      set {
        amuletTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_bag_Amulet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_bag_Amulet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AmuletTime != other.AmuletTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AmuletTime != 0) hash ^= AmuletTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AmuletTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AmuletTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AmuletTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AmuletTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_bag_Amulet other) {
      if (other == null) {
        return;
      }
      if (other.AmuletTime != 0) {
        AmuletTime = other.AmuletTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AmuletTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
