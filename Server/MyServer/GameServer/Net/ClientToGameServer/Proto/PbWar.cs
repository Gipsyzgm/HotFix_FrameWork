// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbWar.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbWar {

  /// <summary>Holder for reflection information generated from PbWar.proto</summary>
  public static partial class PbWarReflection {

    #region Descriptor
    /// <summary>File descriptor for PbWar.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbWarReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtQYldhci5wcm90bxIFUGJXYXIiogEKDVNDX3dhcl9mYkluZm8SFgoORkJD",
            "aGFwdGVyTWF4SWQYASABKAUSEgoKRkJTdGFnZU1heBgCIAEoBRIYChBGQktu",
            "Q2hhcHRlck1heElkGAMgASgFEhQKDEZCS25TdGFnZU1heBgEIAEoBRITCgtJ",
            "c1JlQnVpbGRGQhgFIAEoCBIgCgRpbmZvGAYgASgLMhIuUGJXYXIuQ2hhcHRl",
            "ckluZm8iPQoPU0Nfd2FyX2ZiVXBkYXRlEhYKDkZCQ2hhcHRlck1heElkGAEg",
            "ASgFEhIKCkZCU3RhZ2VNYXgYAiABKAUiQwoRU0Nfd2FyX2Zia25VcGRhdGUS",
            "GAoQRkJLbkNoYXB0ZXJNYXhJZBgBIAEoBRIUCgxGQktuU3RhZ2VNYXgYAiAB",
            "KAUizwIKC0NoYXB0ZXJJbmZvEgoKAklEGAEgASgFEhAKCFN0YWdlSWRzGAIg",
            "AygFEhIKCkN1clN0YWdlSWQYAyABKAUSEQoJQ3VySGVyb0hQGAQgASgFEhEK",
            "CU1heEhlcm9IUBgFIAEoBRIQCghXYXJMZXZlbBgGIAEoBRIOCgZXYXJFeHAY",
            "ByABKAUSDwoHS2lsbE51bRgIIAEoBRITCgtLaWxsQm9zc051bRgJIAEoBRIM",
            "CgR0eXBlGAogASgFEikKCG9uZVNraWxsGAsgAygLMhcuUGJXYXIuT25lX0No",
            "YXB0ZXJTa2lsbBIkCgdvbmVEcm9wGAwgAygLMhMuUGJXYXIuT25lX0Ryb3BJ",
            "dGVtEhQKDElzVHJhZGVyT3BlbhgNIAEoCBIXCg9Jc1VzZVJlYm9ybkJ5QUQY",
            "DiABKAgSEgoKUmViaXJ0aE51bRgPIAEoBSItChBPbmVfQ2hhcHRlclNraWxs",
            "EgoKAklEGAEgASgFEg0KBWxldmVsGAIgASgFIj4KCUNTX3dhcl9mYhIRCglD",
            "aGFwdGVySWQYASABKAUSEAoIU3RhZ2VJZHMYAiADKAUSDAoEVHlwZRgDIAEo",
            "BSIsCglTQ193YXJfZmISEQoJQ2hhcHRlcklkGAEgASgFEgwKBFR5cGUYAiAB",
            "KAUimQIKEUNTX3dhcl9mYlN0YWdlRW5kEhEKCUNoYXB0ZXJJZBgBIAEoBRIQ",
            "CghDdXJTdGFnZRgCIAEoBRIpCghvbmVTa2lsbBgDIAMoCzIXLlBiV2FyLk9u",
            "ZV9DaGFwdGVyU2tpbGwSJAoHb25lRHJvcBgEIAMoCzITLlBiV2FyLk9uZV9E",
            "cm9wSXRlbRIPCgdLaWxsTnVtGAUgASgFEhMKC0tpbGxCb3NzTnVtGAYgASgF",
            "EhAKCFdhckxldmVsGAcgASgFEg4KBldhckV4cBgIIAEoBRIRCglDdXJIZXJv",
            "SFAYCSABKAUSEQoJTWF4SGVyb0hQGAogASgFEgwKBHR5cGUYCyABKAUSEgoK",
            "UmViaXJ0aE51bRgMIAEoBSJwChFTQ193YXJfZmJTdGFnZUVuZBIRCglDaGFw",
            "dGVySWQYASABKAUSEAoIQ3VyU3RhZ2UYAiABKAUSEQoJSXNVc2VUaW1lGAMg",
            "ASgIEhUKDUhhbmdVcEdldFRpbWUYBCABKAUSDAoEdHlwZRgFIAEoBSJ6Cg1D",
            "U193YXJfZmJFeGl0EhEKCUNoYXB0ZXJJZBgBIAEoBRIQCghleGl0VHlwZRgC",
            "IAEoBRIMCgR0eXBlGAQgASgFEiQKB29uZURyb3AYBSADKAsyEy5QYldhci5P",
            "bmVfRHJvcEl0ZW0SEAoIQ3VyU3RhZ2UYBiABKAUiEgoQQ1Nfd2FyX2ZiUmVi",
            "aXJ0aCImChBTQ193YXJfZmJSZWJpcnRoEhIKClJlYmlydGhOdW0YASABKAUi",
            "HgoNQ1Nfd2FyX0dldEJveBINCgVCb3hJZBgBIAEoBSIeCg1TQ193YXJfR2V0",
            "Qm94Eg0KBUJveElkGAEgASgFIjMKE1NDX3dhcl9HZXRCb3hVcGRhdGUSCwoD",
            "SWRzGAEgAygFEg8KB1dhaXRJZHMYAiADKAUiLQoMT25lX0Ryb3BJdGVtEg4K",
            "Bkl0ZW1JZBgBIAEoBRINCgVDb3VudBgCIAEoBSKHAQoQQ1Nfd2FyX1RyYWRl",
            "ckJ1eRIOCgZTaG9wSWQYASABKAUSDgoGSXRlbUlkGAIgASgFEg8KB0l0ZW1O",
            "dW0YAyABKAUSDgoGQ29zdElkGAQgASgFEg8KB0Nvc3ROdW0YBSABKAUSEQoJ",
            "Q2hhcHRlcklkGAYgASgFEg4KBmZiVHlwZRgHIAEoBSJQChBTQ193YXJfVHJh",
            "ZGVyQnV5Eg4KBlNob3BJZBgBIAEoBRIsCgZyZXN1bHQYAiABKA4yHC5QYldh",
            "ci5FbnVtX1RyYWRlckJ1eV9yZXN1bHQiNgoRQ1Nfd2FyX1JlYm9ybkJ5QUQS",
            "EQoJQ2hhcHRlcklkGAEgASgFEg4KBmZiVHlwZRgCIAEoBSJZCg9DU193YXJf",
            "RXhpdEFjRmISDgoGZmJUeXBlGAEgASgFEhAKCElzQWRKb2luGAIgASgIEiQK",
            "B29uZURyb3AYAyADKAsyEy5QYldhci5PbmVfRHJvcEl0ZW0iMwoPU0Nfd2Fy",
            "X0V4aXRBY0ZiEg4KBmZiVHlwZRgBIAEoBRIQCghJc0FkSm9pbhgCIAEoCCIf",
            "Cg5DU19UZXN0RW5jcnlwdBINCgVWYWx1ZRgBIAEoBSJ9Cg5TQ19UZXN0RW5j",
            "cnlwdBITCgtSZXR1cm5WYWx1ZRgBIAEoBRIUCgxSZXR1cm5WYWx1ZTEYAiAB",
            "KAUSFAoMUmV0dXJuVmFsdWUyGAMgASgFEhQKDFJldHVyblZhbHVlMxgEIAEo",
            "BRIUCgxSZXR1cm5WYWx1ZTQYBSABKAkiIgoSQ1Nfd2FyX3dvcmxkQm9zc0Zi",
            "EgwKBFR5cGUYASABKAUiNQoSU0Nfd2FyX3dvcmxkQm9zc0ZiEgwKBFR5cGUY",
            "ASABKAUSEQoJdG90YWxIdXJ0GAIgASgDIicKFENTX3dhcl9FeHdvcmxkQm9z",
            "c0ZiEg8KB2N1ckh1cnQYASABKAMiKQoUU0Nfd2FyX0V4d29ybGRCb3NzRmIS",
            "EQoJdG90YWxIdXJ0GAIgASgDInAKFlNDX3dhcl93b3JsZEJvc3NGYkluZm8S",
            "EAoIZnJlZUxlZnQYASABKAUSDwoHYnV5TGVmdBgCIAEoBRIRCgl0b3RhbEh1",
            "cnQYAyABKAMSEwoLSXNSZUJ1aWxkRkIYBCABKAgSCwoDaWRzGAUgAygFIhcK",
            "FUNTX3dhcl93b3JsZEJvc3NGYkdldCIkChVTQ193YXJfd29ybGRCb3NzRmJH",
            "ZXQSCwoDaWRzGAEgAygFIh8KEUNTX3dhcl9Ub3dlckZiRW5kEgoKAklkGAEg",
            "ASgFIiUKEVNDX3dhcl9Ub3dlckZiRW5kEhAKCFRvcGxldmVsGAEgASgFIv0B",
            "ChVTQ193YXJfSW5maW5pdHlGYkluZm8SEAoIVG9wbGV2ZWwYASABKAUSEQoJ",
            "cmVzZXRUaW1lGAIgASgFEhIKCmpvaW5Db3N0SWQYAyABKAUSEwoLam9pbkNv",
            "c3RudW0YBCABKAUSEAoIQXdhcmRJZHMYBSADKAUSEwoLSXNSZUJ1aWxkRkIY",
            "BiABKAgSEQoJRnJlZVRpbWVzGAcgASgFEikKCG9uZVNraWxsGAggAygLMhcu",
            "UGJXYXIuT25lX0NoYXB0ZXJTa2lsbBIhCgRsaXN0GAkgAygLMhMuUGJXYXIu",
            "T25lX0Ryb3BJdGVtEg4KBkN1clRvcBgKIAEoBSIYChZDU193YXJfSW5maW5p",
            "dHlGYlN0YXJ0IkEKFlNDX3dhcl9JbmZpbml0eUZiU3RhcnQSEgoKam9pbkNv",
            "c3RJZBgBIAEoBRITCgtqb2luQ29zdG51bRgCIAEoBSJzChRDU193YXJfSW5m",
            "aW5pdHlGYkVuZBINCgVsZXZlbBgBIAEoBRIhCgRsaXN0GAIgAygLMhMuUGJX",
            "YXIuT25lX0Ryb3BJdGVtEikKCG9uZVNraWxsGAMgAygLMhcuUGJXYXIuT25l",
            "X0NoYXB0ZXJTa2lsbCI4ChRTQ193YXJfSW5maW5pdHlGYkVuZBIQCghUb3Bs",
            "ZXZlbBgBIAEoBRIOCgZjdXJUb3AYAiABKAUiKQoVQ1Nfd2FyX0luZmluaXR5",
            "RmJFeGl0EhAKCGV4aXRUeXBlGAEgASgFIjkKFVNDX3dhcl9JbmZpbml0eUZi",
            "RXhpdBIQCghUb3BsZXZlbBgBIAEoBRIOCgZjdXJUb3AYAiABKAUiFgoUQ1Nf",
            "d2FyX0luZmluaXR5RmJHZXQiKAoUU0Nfd2FyX0luZmluaXR5RmJHZXQSEAoI",
            "QXdhcmRJZHMYASADKAUqRQoVRW51bV9UcmFkZXJCdXlfcmVzdWx0Eg0KCUJ1",
            "U3VjY2VlZBAAEg0KCUJ1VW5rbm93bhABEg4KCkJ1Tm90TW9uZXkQAmIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbWar.Enum_TraderBuy_result), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_fbInfo), global::PbWar.SC_war_fbInfo.Parser, new[]{ "FBChapterMaxId", "FBStageMax", "FBKnChapterMaxId", "FBKnStageMax", "IsReBuildFB", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_fbUpdate), global::PbWar.SC_war_fbUpdate.Parser, new[]{ "FBChapterMaxId", "FBStageMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_fbknUpdate), global::PbWar.SC_war_fbknUpdate.Parser, new[]{ "FBKnChapterMaxId", "FBKnStageMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.ChapterInfo), global::PbWar.ChapterInfo.Parser, new[]{ "ID", "StageIds", "CurStageId", "CurHeroHP", "MaxHeroHP", "WarLevel", "WarExp", "KillNum", "KillBossNum", "Type", "OneSkill", "OneDrop", "IsTraderOpen", "IsUseRebornByAD", "RebirthNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.One_ChapterSkill), global::PbWar.One_ChapterSkill.Parser, new[]{ "ID", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_fb), global::PbWar.CS_war_fb.Parser, new[]{ "ChapterId", "StageIds", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_fb), global::PbWar.SC_war_fb.Parser, new[]{ "ChapterId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_fbStageEnd), global::PbWar.CS_war_fbStageEnd.Parser, new[]{ "ChapterId", "CurStage", "OneSkill", "OneDrop", "KillNum", "KillBossNum", "WarLevel", "WarExp", "CurHeroHP", "MaxHeroHP", "Type", "RebirthNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_fbStageEnd), global::PbWar.SC_war_fbStageEnd.Parser, new[]{ "ChapterId", "CurStage", "IsUseTime", "HangUpGetTime", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_fbExit), global::PbWar.CS_war_fbExit.Parser, new[]{ "ChapterId", "ExitType", "Type", "OneDrop", "CurStage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_fbRebirth), global::PbWar.CS_war_fbRebirth.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_fbRebirth), global::PbWar.SC_war_fbRebirth.Parser, new[]{ "RebirthNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_GetBox), global::PbWar.CS_war_GetBox.Parser, new[]{ "BoxId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_GetBox), global::PbWar.SC_war_GetBox.Parser, new[]{ "BoxId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_GetBoxUpdate), global::PbWar.SC_war_GetBoxUpdate.Parser, new[]{ "Ids", "WaitIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.One_DropItem), global::PbWar.One_DropItem.Parser, new[]{ "ItemId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_TraderBuy), global::PbWar.CS_war_TraderBuy.Parser, new[]{ "ShopId", "ItemId", "ItemNum", "CostId", "CostNum", "ChapterId", "FbType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_TraderBuy), global::PbWar.SC_war_TraderBuy.Parser, new[]{ "ShopId", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_RebornByAD), global::PbWar.CS_war_RebornByAD.Parser, new[]{ "ChapterId", "FbType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_ExitAcFb), global::PbWar.CS_war_ExitAcFb.Parser, new[]{ "FbType", "IsAdJoin", "OneDrop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_ExitAcFb), global::PbWar.SC_war_ExitAcFb.Parser, new[]{ "FbType", "IsAdJoin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_TestEncrypt), global::PbWar.CS_TestEncrypt.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_TestEncrypt), global::PbWar.SC_TestEncrypt.Parser, new[]{ "ReturnValue", "ReturnValue1", "ReturnValue2", "ReturnValue3", "ReturnValue4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_worldBossFb), global::PbWar.CS_war_worldBossFb.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_worldBossFb), global::PbWar.SC_war_worldBossFb.Parser, new[]{ "Type", "TotalHurt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_ExworldBossFb), global::PbWar.CS_war_ExworldBossFb.Parser, new[]{ "CurHurt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_ExworldBossFb), global::PbWar.SC_war_ExworldBossFb.Parser, new[]{ "TotalHurt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_worldBossFbInfo), global::PbWar.SC_war_worldBossFbInfo.Parser, new[]{ "FreeLeft", "BuyLeft", "TotalHurt", "IsReBuildFB", "Ids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_worldBossFbGet), global::PbWar.CS_war_worldBossFbGet.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_worldBossFbGet), global::PbWar.SC_war_worldBossFbGet.Parser, new[]{ "Ids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_TowerFbEnd), global::PbWar.CS_war_TowerFbEnd.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_TowerFbEnd), global::PbWar.SC_war_TowerFbEnd.Parser, new[]{ "Toplevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_InfinityFbInfo), global::PbWar.SC_war_InfinityFbInfo.Parser, new[]{ "Toplevel", "ResetTime", "JoinCostId", "JoinCostnum", "AwardIds", "IsReBuildFB", "FreeTimes", "OneSkill", "List", "CurTop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_InfinityFbStart), global::PbWar.CS_war_InfinityFbStart.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_InfinityFbStart), global::PbWar.SC_war_InfinityFbStart.Parser, new[]{ "JoinCostId", "JoinCostnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_InfinityFbEnd), global::PbWar.CS_war_InfinityFbEnd.Parser, new[]{ "Level", "List", "OneSkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_InfinityFbEnd), global::PbWar.SC_war_InfinityFbEnd.Parser, new[]{ "Toplevel", "CurTop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_InfinityFbExit), global::PbWar.CS_war_InfinityFbExit.Parser, new[]{ "ExitType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_InfinityFbExit), global::PbWar.SC_war_InfinityFbExit.Parser, new[]{ "Toplevel", "CurTop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.CS_war_InfinityFbGet), global::PbWar.CS_war_InfinityFbGet.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbWar.SC_war_InfinityFbGet), global::PbWar.SC_war_InfinityFbGet.Parser, new[]{ "AwardIds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///商人购买结果
  /// </summary>
  public enum Enum_TraderBuy_result {
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("BuSucceed")] BuSucceed = 0,
    /// <summary>
    ///未知错误
    /// </summary>
    [pbr::OriginalName("BuUnknown")] BuUnknown = 1,
    /// <summary>
    ///所需货币不足
    /// </summary>
    [pbr::OriginalName("BuNotMoney")] BuNotMoney = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///收到章节挑战信息
  /// </summary>
  public sealed partial class SC_war_fbInfo : pb::IMessage<SC_war_fbInfo> {
    private static readonly pb::MessageParser<SC_war_fbInfo> _parser = new pb::MessageParser<SC_war_fbInfo>(() => new SC_war_fbInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_fbInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbInfo(SC_war_fbInfo other) : this() {
      fBChapterMaxId_ = other.fBChapterMaxId_;
      fBStageMax_ = other.fBStageMax_;
      fBKnChapterMaxId_ = other.fBKnChapterMaxId_;
      fBKnStageMax_ = other.fBKnStageMax_;
      isReBuildFB_ = other.isReBuildFB_;
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbInfo Clone() {
      return new SC_war_fbInfo(this);
    }

    /// <summary>Field number for the "FBChapterMaxId" field.</summary>
    public const int FBChapterMaxIdFieldNumber = 1;
    private int fBChapterMaxId_;
    /// <summary>
    ///普通副本最高章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FBChapterMaxId {
      get { return fBChapterMaxId_; }
      set {
        fBChapterMaxId_ = value;
      }
    }

    /// <summary>Field number for the "FBStageMax" field.</summary>
    public const int FBStageMaxFieldNumber = 2;
    private int fBStageMax_;
    /// <summary>
    ///普通最高章节中最高过关关卡数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FBStageMax {
      get { return fBStageMax_; }
      set {
        fBStageMax_ = value;
      }
    }

    /// <summary>Field number for the "FBKnChapterMaxId" field.</summary>
    public const int FBKnChapterMaxIdFieldNumber = 3;
    private int fBKnChapterMaxId_;
    /// <summary>
    ///困难副本最高章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FBKnChapterMaxId {
      get { return fBKnChapterMaxId_; }
      set {
        fBKnChapterMaxId_ = value;
      }
    }

    /// <summary>Field number for the "FBKnStageMax" field.</summary>
    public const int FBKnStageMaxFieldNumber = 4;
    private int fBKnStageMax_;
    /// <summary>
    ///困难副本最高关卡数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FBKnStageMax {
      get { return fBKnStageMax_; }
      set {
        fBKnStageMax_ = value;
      }
    }

    /// <summary>Field number for the "IsReBuildFB" field.</summary>
    public const int IsReBuildFBFieldNumber = 5;
    private bool isReBuildFB_;
    /// <summary>
    ///是否需要还原副本（true 需要取数据还原副本）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReBuildFB {
      get { return isReBuildFB_; }
      set {
        isReBuildFB_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 6;
    private global::PbWar.ChapterInfo info_;
    /// <summary>
    ///待还原副本详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbWar.ChapterInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_fbInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_fbInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FBChapterMaxId != other.FBChapterMaxId) return false;
      if (FBStageMax != other.FBStageMax) return false;
      if (FBKnChapterMaxId != other.FBKnChapterMaxId) return false;
      if (FBKnStageMax != other.FBKnStageMax) return false;
      if (IsReBuildFB != other.IsReBuildFB) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FBChapterMaxId != 0) hash ^= FBChapterMaxId.GetHashCode();
      if (FBStageMax != 0) hash ^= FBStageMax.GetHashCode();
      if (FBKnChapterMaxId != 0) hash ^= FBKnChapterMaxId.GetHashCode();
      if (FBKnStageMax != 0) hash ^= FBKnStageMax.GetHashCode();
      if (IsReBuildFB != false) hash ^= IsReBuildFB.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FBChapterMaxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FBChapterMaxId);
      }
      if (FBStageMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FBStageMax);
      }
      if (FBKnChapterMaxId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FBKnChapterMaxId);
      }
      if (FBKnStageMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FBKnStageMax);
      }
      if (IsReBuildFB != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsReBuildFB);
      }
      if (info_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FBChapterMaxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FBChapterMaxId);
      }
      if (FBStageMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FBStageMax);
      }
      if (FBKnChapterMaxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FBKnChapterMaxId);
      }
      if (FBKnStageMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FBKnStageMax);
      }
      if (IsReBuildFB != false) {
        size += 1 + 1;
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_fbInfo other) {
      if (other == null) {
        return;
      }
      if (other.FBChapterMaxId != 0) {
        FBChapterMaxId = other.FBChapterMaxId;
      }
      if (other.FBStageMax != 0) {
        FBStageMax = other.FBStageMax;
      }
      if (other.FBKnChapterMaxId != 0) {
        FBKnChapterMaxId = other.FBKnChapterMaxId;
      }
      if (other.FBKnStageMax != 0) {
        FBKnStageMax = other.FBKnStageMax;
      }
      if (other.IsReBuildFB != false) {
        IsReBuildFB = other.IsReBuildFB;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::PbWar.ChapterInfo();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FBChapterMaxId = input.ReadInt32();
            break;
          }
          case 16: {
            FBStageMax = input.ReadInt32();
            break;
          }
          case 24: {
            FBKnChapterMaxId = input.ReadInt32();
            break;
          }
          case 32: {
            FBKnStageMax = input.ReadInt32();
            break;
          }
          case 40: {
            IsReBuildFB = input.ReadBool();
            break;
          }
          case 50: {
            if (info_ == null) {
              info_ = new global::PbWar.ChapterInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到普通章节挑战信息更新
  /// </summary>
  public sealed partial class SC_war_fbUpdate : pb::IMessage<SC_war_fbUpdate> {
    private static readonly pb::MessageParser<SC_war_fbUpdate> _parser = new pb::MessageParser<SC_war_fbUpdate>(() => new SC_war_fbUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_fbUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbUpdate(SC_war_fbUpdate other) : this() {
      fBChapterMaxId_ = other.fBChapterMaxId_;
      fBStageMax_ = other.fBStageMax_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbUpdate Clone() {
      return new SC_war_fbUpdate(this);
    }

    /// <summary>Field number for the "FBChapterMaxId" field.</summary>
    public const int FBChapterMaxIdFieldNumber = 1;
    private int fBChapterMaxId_;
    /// <summary>
    ///副本最高章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FBChapterMaxId {
      get { return fBChapterMaxId_; }
      set {
        fBChapterMaxId_ = value;
      }
    }

    /// <summary>Field number for the "FBStageMax" field.</summary>
    public const int FBStageMaxFieldNumber = 2;
    private int fBStageMax_;
    /// <summary>
    ///最高章节中最高过关关卡数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FBStageMax {
      get { return fBStageMax_; }
      set {
        fBStageMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_fbUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_fbUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FBChapterMaxId != other.FBChapterMaxId) return false;
      if (FBStageMax != other.FBStageMax) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FBChapterMaxId != 0) hash ^= FBChapterMaxId.GetHashCode();
      if (FBStageMax != 0) hash ^= FBStageMax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FBChapterMaxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FBChapterMaxId);
      }
      if (FBStageMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FBStageMax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FBChapterMaxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FBChapterMaxId);
      }
      if (FBStageMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FBStageMax);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_fbUpdate other) {
      if (other == null) {
        return;
      }
      if (other.FBChapterMaxId != 0) {
        FBChapterMaxId = other.FBChapterMaxId;
      }
      if (other.FBStageMax != 0) {
        FBStageMax = other.FBStageMax;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FBChapterMaxId = input.ReadInt32();
            break;
          }
          case 16: {
            FBStageMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到困难章节挑战信息更新
  /// </summary>
  public sealed partial class SC_war_fbknUpdate : pb::IMessage<SC_war_fbknUpdate> {
    private static readonly pb::MessageParser<SC_war_fbknUpdate> _parser = new pb::MessageParser<SC_war_fbknUpdate>(() => new SC_war_fbknUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_fbknUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbknUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbknUpdate(SC_war_fbknUpdate other) : this() {
      fBKnChapterMaxId_ = other.fBKnChapterMaxId_;
      fBKnStageMax_ = other.fBKnStageMax_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbknUpdate Clone() {
      return new SC_war_fbknUpdate(this);
    }

    /// <summary>Field number for the "FBKnChapterMaxId" field.</summary>
    public const int FBKnChapterMaxIdFieldNumber = 1;
    private int fBKnChapterMaxId_;
    /// <summary>
    ///困难副本最高章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FBKnChapterMaxId {
      get { return fBKnChapterMaxId_; }
      set {
        fBKnChapterMaxId_ = value;
      }
    }

    /// <summary>Field number for the "FBKnStageMax" field.</summary>
    public const int FBKnStageMaxFieldNumber = 2;
    private int fBKnStageMax_;
    /// <summary>
    ///困难副本最高章节中最高过关关卡数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FBKnStageMax {
      get { return fBKnStageMax_; }
      set {
        fBKnStageMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_fbknUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_fbknUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FBKnChapterMaxId != other.FBKnChapterMaxId) return false;
      if (FBKnStageMax != other.FBKnStageMax) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FBKnChapterMaxId != 0) hash ^= FBKnChapterMaxId.GetHashCode();
      if (FBKnStageMax != 0) hash ^= FBKnStageMax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FBKnChapterMaxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FBKnChapterMaxId);
      }
      if (FBKnStageMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FBKnStageMax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FBKnChapterMaxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FBKnChapterMaxId);
      }
      if (FBKnStageMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FBKnStageMax);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_fbknUpdate other) {
      if (other == null) {
        return;
      }
      if (other.FBKnChapterMaxId != 0) {
        FBKnChapterMaxId = other.FBKnChapterMaxId;
      }
      if (other.FBKnStageMax != 0) {
        FBKnStageMax = other.FBKnStageMax;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FBKnChapterMaxId = input.ReadInt32();
            break;
          }
          case 16: {
            FBKnStageMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个章节数据
  /// </summary>
  public sealed partial class ChapterInfo : pb::IMessage<ChapterInfo> {
    private static readonly pb::MessageParser<ChapterInfo> _parser = new pb::MessageParser<ChapterInfo>(() => new ChapterInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChapterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterInfo(ChapterInfo other) : this() {
      iD_ = other.iD_;
      stageIds_ = other.stageIds_.Clone();
      curStageId_ = other.curStageId_;
      curHeroHP_ = other.curHeroHP_;
      maxHeroHP_ = other.maxHeroHP_;
      warLevel_ = other.warLevel_;
      warExp_ = other.warExp_;
      killNum_ = other.killNum_;
      killBossNum_ = other.killBossNum_;
      type_ = other.type_;
      oneSkill_ = other.oneSkill_.Clone();
      oneDrop_ = other.oneDrop_.Clone();
      isTraderOpen_ = other.isTraderOpen_;
      isUseRebornByAD_ = other.isUseRebornByAD_;
      rebirthNum_ = other.rebirthNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChapterInfo Clone() {
      return new ChapterInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "StageIds" field.</summary>
    public const int StageIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_stageIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> stageIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///章节中随机关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StageIds {
      get { return stageIds_; }
    }

    /// <summary>Field number for the "CurStageId" field.</summary>
    public const int CurStageIdFieldNumber = 3;
    private int curStageId_;
    /// <summary>
    ///当前章节中最高关卡id（序号）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurStageId {
      get { return curStageId_; }
      set {
        curStageId_ = value;
      }
    }

    /// <summary>Field number for the "CurHeroHP" field.</summary>
    public const int CurHeroHPFieldNumber = 4;
    private int curHeroHP_;
    /// <summary>
    ///当前英雄血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurHeroHP {
      get { return curHeroHP_; }
      set {
        curHeroHP_ = value;
      }
    }

    /// <summary>Field number for the "MaxHeroHP" field.</summary>
    public const int MaxHeroHPFieldNumber = 5;
    private int maxHeroHP_;
    /// <summary>
    ///当前英雄最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHeroHP {
      get { return maxHeroHP_; }
      set {
        maxHeroHP_ = value;
      }
    }

    /// <summary>Field number for the "WarLevel" field.</summary>
    public const int WarLevelFieldNumber = 6;
    private int warLevel_;
    /// <summary>
    ///战斗等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarLevel {
      get { return warLevel_; }
      set {
        warLevel_ = value;
      }
    }

    /// <summary>Field number for the "WarExp" field.</summary>
    public const int WarExpFieldNumber = 7;
    private int warExp_;
    /// <summary>
    ///战斗经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarExp {
      get { return warExp_; }
      set {
        warExp_ = value;
      }
    }

    /// <summary>Field number for the "KillNum" field.</summary>
    public const int KillNumFieldNumber = 8;
    private int killNum_;
    /// <summary>
    ///杀敌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillNum {
      get { return killNum_; }
      set {
        killNum_ = value;
      }
    }

    /// <summary>Field number for the "KillBossNum" field.</summary>
    public const int KillBossNumFieldNumber = 9;
    private int killBossNum_;
    /// <summary>
    ///击杀boss数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillBossNum {
      get { return killBossNum_; }
      set {
        killBossNum_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 10;
    private int type_;
    /// <summary>
    ///1简单 2困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "oneSkill" field.</summary>
    public const int OneSkillFieldNumber = 11;
    private static readonly pb::FieldCodec<global::PbWar.One_ChapterSkill> _repeated_oneSkill_codec
        = pb::FieldCodec.ForMessage(90, global::PbWar.One_ChapterSkill.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_ChapterSkill> oneSkill_ = new pbc::RepeatedField<global::PbWar.One_ChapterSkill>();
    /// <summary>
    ///当前已获得技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_ChapterSkill> OneSkill {
      get { return oneSkill_; }
    }

    /// <summary>Field number for the "oneDrop" field.</summary>
    public const int OneDropFieldNumber = 12;
    private static readonly pb::FieldCodec<global::PbWar.One_DropItem> _repeated_oneDrop_codec
        = pb::FieldCodec.ForMessage(98, global::PbWar.One_DropItem.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_DropItem> oneDrop_ = new pbc::RepeatedField<global::PbWar.One_DropItem>();
    /// <summary>
    ///当前掉落物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_DropItem> OneDrop {
      get { return oneDrop_; }
    }

    /// <summary>Field number for the "IsTraderOpen" field.</summary>
    public const int IsTraderOpenFieldNumber = 13;
    private bool isTraderOpen_;
    /// <summary>
    ///商人是否已出现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTraderOpen {
      get { return isTraderOpen_; }
      set {
        isTraderOpen_ = value;
      }
    }

    /// <summary>Field number for the "IsUseRebornByAD" field.</summary>
    public const int IsUseRebornByADFieldNumber = 14;
    private bool isUseRebornByAD_;
    /// <summary>
    ///是否已使用广告复活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUseRebornByAD {
      get { return isUseRebornByAD_; }
      set {
        isUseRebornByAD_ = value;
      }
    }

    /// <summary>Field number for the "RebirthNum" field.</summary>
    public const int RebirthNumFieldNumber = 15;
    private int rebirthNum_;
    /// <summary>
    ///当前剩余复活次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RebirthNum {
      get { return rebirthNum_; }
      set {
        rebirthNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChapterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChapterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if(!stageIds_.Equals(other.stageIds_)) return false;
      if (CurStageId != other.CurStageId) return false;
      if (CurHeroHP != other.CurHeroHP) return false;
      if (MaxHeroHP != other.MaxHeroHP) return false;
      if (WarLevel != other.WarLevel) return false;
      if (WarExp != other.WarExp) return false;
      if (KillNum != other.KillNum) return false;
      if (KillBossNum != other.KillBossNum) return false;
      if (Type != other.Type) return false;
      if(!oneSkill_.Equals(other.oneSkill_)) return false;
      if(!oneDrop_.Equals(other.oneDrop_)) return false;
      if (IsTraderOpen != other.IsTraderOpen) return false;
      if (IsUseRebornByAD != other.IsUseRebornByAD) return false;
      if (RebirthNum != other.RebirthNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      hash ^= stageIds_.GetHashCode();
      if (CurStageId != 0) hash ^= CurStageId.GetHashCode();
      if (CurHeroHP != 0) hash ^= CurHeroHP.GetHashCode();
      if (MaxHeroHP != 0) hash ^= MaxHeroHP.GetHashCode();
      if (WarLevel != 0) hash ^= WarLevel.GetHashCode();
      if (WarExp != 0) hash ^= WarExp.GetHashCode();
      if (KillNum != 0) hash ^= KillNum.GetHashCode();
      if (KillBossNum != 0) hash ^= KillBossNum.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= oneSkill_.GetHashCode();
      hash ^= oneDrop_.GetHashCode();
      if (IsTraderOpen != false) hash ^= IsTraderOpen.GetHashCode();
      if (IsUseRebornByAD != false) hash ^= IsUseRebornByAD.GetHashCode();
      if (RebirthNum != 0) hash ^= RebirthNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      stageIds_.WriteTo(output, _repeated_stageIds_codec);
      if (CurStageId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurStageId);
      }
      if (CurHeroHP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurHeroHP);
      }
      if (MaxHeroHP != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxHeroHP);
      }
      if (WarLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WarLevel);
      }
      if (WarExp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WarExp);
      }
      if (KillNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(KillNum);
      }
      if (KillBossNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(KillBossNum);
      }
      if (Type != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Type);
      }
      oneSkill_.WriteTo(output, _repeated_oneSkill_codec);
      oneDrop_.WriteTo(output, _repeated_oneDrop_codec);
      if (IsTraderOpen != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsTraderOpen);
      }
      if (IsUseRebornByAD != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsUseRebornByAD);
      }
      if (RebirthNum != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RebirthNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      size += stageIds_.CalculateSize(_repeated_stageIds_codec);
      if (CurStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurStageId);
      }
      if (CurHeroHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHeroHP);
      }
      if (MaxHeroHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHeroHP);
      }
      if (WarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarLevel);
      }
      if (WarExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarExp);
      }
      if (KillNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillNum);
      }
      if (KillBossNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillBossNum);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += oneSkill_.CalculateSize(_repeated_oneSkill_codec);
      size += oneDrop_.CalculateSize(_repeated_oneDrop_codec);
      if (IsTraderOpen != false) {
        size += 1 + 1;
      }
      if (IsUseRebornByAD != false) {
        size += 1 + 1;
      }
      if (RebirthNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RebirthNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChapterInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      stageIds_.Add(other.stageIds_);
      if (other.CurStageId != 0) {
        CurStageId = other.CurStageId;
      }
      if (other.CurHeroHP != 0) {
        CurHeroHP = other.CurHeroHP;
      }
      if (other.MaxHeroHP != 0) {
        MaxHeroHP = other.MaxHeroHP;
      }
      if (other.WarLevel != 0) {
        WarLevel = other.WarLevel;
      }
      if (other.WarExp != 0) {
        WarExp = other.WarExp;
      }
      if (other.KillNum != 0) {
        KillNum = other.KillNum;
      }
      if (other.KillBossNum != 0) {
        KillBossNum = other.KillBossNum;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      oneSkill_.Add(other.oneSkill_);
      oneDrop_.Add(other.oneDrop_);
      if (other.IsTraderOpen != false) {
        IsTraderOpen = other.IsTraderOpen;
      }
      if (other.IsUseRebornByAD != false) {
        IsUseRebornByAD = other.IsUseRebornByAD;
      }
      if (other.RebirthNum != 0) {
        RebirthNum = other.RebirthNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            stageIds_.AddEntriesFrom(input, _repeated_stageIds_codec);
            break;
          }
          case 24: {
            CurStageId = input.ReadInt32();
            break;
          }
          case 32: {
            CurHeroHP = input.ReadInt32();
            break;
          }
          case 40: {
            MaxHeroHP = input.ReadInt32();
            break;
          }
          case 48: {
            WarLevel = input.ReadInt32();
            break;
          }
          case 56: {
            WarExp = input.ReadInt32();
            break;
          }
          case 64: {
            KillNum = input.ReadInt32();
            break;
          }
          case 72: {
            KillBossNum = input.ReadInt32();
            break;
          }
          case 80: {
            Type = input.ReadInt32();
            break;
          }
          case 90: {
            oneSkill_.AddEntriesFrom(input, _repeated_oneSkill_codec);
            break;
          }
          case 98: {
            oneDrop_.AddEntriesFrom(input, _repeated_oneDrop_codec);
            break;
          }
          case 104: {
            IsTraderOpen = input.ReadBool();
            break;
          }
          case 112: {
            IsUseRebornByAD = input.ReadBool();
            break;
          }
          case 120: {
            RebirthNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个技能数据
  /// </summary>
  public sealed partial class One_ChapterSkill : pb::IMessage<One_ChapterSkill> {
    private static readonly pb::MessageParser<One_ChapterSkill> _parser = new pb::MessageParser<One_ChapterSkill>(() => new One_ChapterSkill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_ChapterSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ChapterSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ChapterSkill(One_ChapterSkill other) : this() {
      iD_ = other.iD_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ChapterSkill Clone() {
      return new One_ChapterSkill(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_ChapterSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_ChapterSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_ChapterSkill other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求进入章节副本挑战
  /// </summary>
  public sealed partial class CS_war_fb : pb::IMessage<CS_war_fb> {
    private static readonly pb::MessageParser<CS_war_fb> _parser = new pb::MessageParser<CS_war_fb>(() => new CS_war_fb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_fb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fb(CS_war_fb other) : this() {
      chapterId_ = other.chapterId_;
      stageIds_ = other.stageIds_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fb Clone() {
      return new CS_war_fb(this);
    }

    /// <summary>Field number for the "ChapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    /// <summary>
    ///章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "StageIds" field.</summary>
    public const int StageIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_stageIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> stageIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///章节中随机关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StageIds {
      get { return stageIds_; }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///1简单 2困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_fb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_fb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterId != other.ChapterId) return false;
      if(!stageIds_.Equals(other.stageIds_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      hash ^= stageIds_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      stageIds_.WriteTo(output, _repeated_stageIds_codec);
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      size += stageIds_.CalculateSize(_repeated_stageIds_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_fb other) {
      if (other == null) {
        return;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      stageIds_.Add(other.stageIds_);
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            stageIds_.AddEntriesFrom(input, _repeated_stageIds_codec);
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到进入章节挑战
  /// </summary>
  public sealed partial class SC_war_fb : pb::IMessage<SC_war_fb> {
    private static readonly pb::MessageParser<SC_war_fb> _parser = new pb::MessageParser<SC_war_fb>(() => new SC_war_fb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_fb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fb(SC_war_fb other) : this() {
      chapterId_ = other.chapterId_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fb Clone() {
      return new SC_war_fb(this);
    }

    /// <summary>Field number for the "ChapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    /// <summary>
    ///章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///1简单 2困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_fb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_fb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterId != other.ChapterId) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_fb other) {
      if (other == null) {
        return;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求章节关卡结束
  /// </summary>
  public sealed partial class CS_war_fbStageEnd : pb::IMessage<CS_war_fbStageEnd> {
    private static readonly pb::MessageParser<CS_war_fbStageEnd> _parser = new pb::MessageParser<CS_war_fbStageEnd>(() => new CS_war_fbStageEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_fbStageEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbStageEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbStageEnd(CS_war_fbStageEnd other) : this() {
      chapterId_ = other.chapterId_;
      curStage_ = other.curStage_;
      oneSkill_ = other.oneSkill_.Clone();
      oneDrop_ = other.oneDrop_.Clone();
      killNum_ = other.killNum_;
      killBossNum_ = other.killBossNum_;
      warLevel_ = other.warLevel_;
      warExp_ = other.warExp_;
      curHeroHP_ = other.curHeroHP_;
      maxHeroHP_ = other.maxHeroHP_;
      type_ = other.type_;
      rebirthNum_ = other.rebirthNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbStageEnd Clone() {
      return new CS_war_fbStageEnd(this);
    }

    /// <summary>Field number for the "ChapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    /// <summary>
    ///章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "CurStage" field.</summary>
    public const int CurStageFieldNumber = 2;
    private int curStage_;
    /// <summary>
    ///当前关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurStage {
      get { return curStage_; }
      set {
        curStage_ = value;
      }
    }

    /// <summary>Field number for the "oneSkill" field.</summary>
    public const int OneSkillFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbWar.One_ChapterSkill> _repeated_oneSkill_codec
        = pb::FieldCodec.ForMessage(26, global::PbWar.One_ChapterSkill.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_ChapterSkill> oneSkill_ = new pbc::RepeatedField<global::PbWar.One_ChapterSkill>();
    /// <summary>
    ///当前已获得技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_ChapterSkill> OneSkill {
      get { return oneSkill_; }
    }

    /// <summary>Field number for the "oneDrop" field.</summary>
    public const int OneDropFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PbWar.One_DropItem> _repeated_oneDrop_codec
        = pb::FieldCodec.ForMessage(34, global::PbWar.One_DropItem.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_DropItem> oneDrop_ = new pbc::RepeatedField<global::PbWar.One_DropItem>();
    /// <summary>
    ///当前掉落物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_DropItem> OneDrop {
      get { return oneDrop_; }
    }

    /// <summary>Field number for the "KillNum" field.</summary>
    public const int KillNumFieldNumber = 5;
    private int killNum_;
    /// <summary>
    ///杀敌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillNum {
      get { return killNum_; }
      set {
        killNum_ = value;
      }
    }

    /// <summary>Field number for the "KillBossNum" field.</summary>
    public const int KillBossNumFieldNumber = 6;
    private int killBossNum_;
    /// <summary>
    ///击杀boss数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillBossNum {
      get { return killBossNum_; }
      set {
        killBossNum_ = value;
      }
    }

    /// <summary>Field number for the "WarLevel" field.</summary>
    public const int WarLevelFieldNumber = 7;
    private int warLevel_;
    /// <summary>
    ///战斗等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarLevel {
      get { return warLevel_; }
      set {
        warLevel_ = value;
      }
    }

    /// <summary>Field number for the "WarExp" field.</summary>
    public const int WarExpFieldNumber = 8;
    private int warExp_;
    /// <summary>
    ///战斗经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarExp {
      get { return warExp_; }
      set {
        warExp_ = value;
      }
    }

    /// <summary>Field number for the "CurHeroHP" field.</summary>
    public const int CurHeroHPFieldNumber = 9;
    private int curHeroHP_;
    /// <summary>
    ///当前英雄血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurHeroHP {
      get { return curHeroHP_; }
      set {
        curHeroHP_ = value;
      }
    }

    /// <summary>Field number for the "MaxHeroHP" field.</summary>
    public const int MaxHeroHPFieldNumber = 10;
    private int maxHeroHP_;
    /// <summary>
    ///当前英雄最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHeroHP {
      get { return maxHeroHP_; }
      set {
        maxHeroHP_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private int type_;
    /// <summary>
    ///1简单 2困难 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "RebirthNum" field.</summary>
    public const int RebirthNumFieldNumber = 12;
    private int rebirthNum_;
    /// <summary>
    ///当前剩余复活次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RebirthNum {
      get { return rebirthNum_; }
      set {
        rebirthNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_fbStageEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_fbStageEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterId != other.ChapterId) return false;
      if (CurStage != other.CurStage) return false;
      if(!oneSkill_.Equals(other.oneSkill_)) return false;
      if(!oneDrop_.Equals(other.oneDrop_)) return false;
      if (KillNum != other.KillNum) return false;
      if (KillBossNum != other.KillBossNum) return false;
      if (WarLevel != other.WarLevel) return false;
      if (WarExp != other.WarExp) return false;
      if (CurHeroHP != other.CurHeroHP) return false;
      if (MaxHeroHP != other.MaxHeroHP) return false;
      if (Type != other.Type) return false;
      if (RebirthNum != other.RebirthNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (CurStage != 0) hash ^= CurStage.GetHashCode();
      hash ^= oneSkill_.GetHashCode();
      hash ^= oneDrop_.GetHashCode();
      if (KillNum != 0) hash ^= KillNum.GetHashCode();
      if (KillBossNum != 0) hash ^= KillBossNum.GetHashCode();
      if (WarLevel != 0) hash ^= WarLevel.GetHashCode();
      if (WarExp != 0) hash ^= WarExp.GetHashCode();
      if (CurHeroHP != 0) hash ^= CurHeroHP.GetHashCode();
      if (MaxHeroHP != 0) hash ^= MaxHeroHP.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (RebirthNum != 0) hash ^= RebirthNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      if (CurStage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurStage);
      }
      oneSkill_.WriteTo(output, _repeated_oneSkill_codec);
      oneDrop_.WriteTo(output, _repeated_oneDrop_codec);
      if (KillNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(KillNum);
      }
      if (KillBossNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(KillBossNum);
      }
      if (WarLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WarLevel);
      }
      if (WarExp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WarExp);
      }
      if (CurHeroHP != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurHeroHP);
      }
      if (MaxHeroHP != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxHeroHP);
      }
      if (Type != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Type);
      }
      if (RebirthNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RebirthNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (CurStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurStage);
      }
      size += oneSkill_.CalculateSize(_repeated_oneSkill_codec);
      size += oneDrop_.CalculateSize(_repeated_oneDrop_codec);
      if (KillNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillNum);
      }
      if (KillBossNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillBossNum);
      }
      if (WarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarLevel);
      }
      if (WarExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarExp);
      }
      if (CurHeroHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHeroHP);
      }
      if (MaxHeroHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHeroHP);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (RebirthNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RebirthNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_fbStageEnd other) {
      if (other == null) {
        return;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.CurStage != 0) {
        CurStage = other.CurStage;
      }
      oneSkill_.Add(other.oneSkill_);
      oneDrop_.Add(other.oneDrop_);
      if (other.KillNum != 0) {
        KillNum = other.KillNum;
      }
      if (other.KillBossNum != 0) {
        KillBossNum = other.KillBossNum;
      }
      if (other.WarLevel != 0) {
        WarLevel = other.WarLevel;
      }
      if (other.WarExp != 0) {
        WarExp = other.WarExp;
      }
      if (other.CurHeroHP != 0) {
        CurHeroHP = other.CurHeroHP;
      }
      if (other.MaxHeroHP != 0) {
        MaxHeroHP = other.MaxHeroHP;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.RebirthNum != 0) {
        RebirthNum = other.RebirthNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            CurStage = input.ReadInt32();
            break;
          }
          case 26: {
            oneSkill_.AddEntriesFrom(input, _repeated_oneSkill_codec);
            break;
          }
          case 34: {
            oneDrop_.AddEntriesFrom(input, _repeated_oneDrop_codec);
            break;
          }
          case 40: {
            KillNum = input.ReadInt32();
            break;
          }
          case 48: {
            KillBossNum = input.ReadInt32();
            break;
          }
          case 56: {
            WarLevel = input.ReadInt32();
            break;
          }
          case 64: {
            WarExp = input.ReadInt32();
            break;
          }
          case 72: {
            CurHeroHP = input.ReadInt32();
            break;
          }
          case 80: {
            MaxHeroHP = input.ReadInt32();
            break;
          }
          case 88: {
            Type = input.ReadInt32();
            break;
          }
          case 96: {
            RebirthNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到章节关卡结束
  /// </summary>
  public sealed partial class SC_war_fbStageEnd : pb::IMessage<SC_war_fbStageEnd> {
    private static readonly pb::MessageParser<SC_war_fbStageEnd> _parser = new pb::MessageParser<SC_war_fbStageEnd>(() => new SC_war_fbStageEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_fbStageEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbStageEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbStageEnd(SC_war_fbStageEnd other) : this() {
      chapterId_ = other.chapterId_;
      curStage_ = other.curStage_;
      isUseTime_ = other.isUseTime_;
      hangUpGetTime_ = other.hangUpGetTime_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbStageEnd Clone() {
      return new SC_war_fbStageEnd(this);
    }

    /// <summary>Field number for the "ChapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    /// <summary>
    ///章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "CurStage" field.</summary>
    public const int CurStageFieldNumber = 2;
    private int curStage_;
    /// <summary>
    ///当前关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurStage {
      get { return curStage_; }
      set {
        curStage_ = value;
      }
    }

    /// <summary>Field number for the "IsUseTime" field.</summary>
    public const int IsUseTimeFieldNumber = 3;
    private bool isUseTime_;
    /// <summary>
    ///是否使用挂机时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUseTime {
      get { return isUseTime_; }
      set {
        isUseTime_ = value;
      }
    }

    /// <summary>Field number for the "HangUpGetTime" field.</summary>
    public const int HangUpGetTimeFieldNumber = 4;
    private int hangUpGetTime_;
    /// <summary>
    ///第一章第一次通关通知客户端挂机奖励可领时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HangUpGetTime {
      get { return hangUpGetTime_; }
      set {
        hangUpGetTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    /// <summary>
    ///1简单 2困难  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_fbStageEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_fbStageEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterId != other.ChapterId) return false;
      if (CurStage != other.CurStage) return false;
      if (IsUseTime != other.IsUseTime) return false;
      if (HangUpGetTime != other.HangUpGetTime) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (CurStage != 0) hash ^= CurStage.GetHashCode();
      if (IsUseTime != false) hash ^= IsUseTime.GetHashCode();
      if (HangUpGetTime != 0) hash ^= HangUpGetTime.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      if (CurStage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurStage);
      }
      if (IsUseTime != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUseTime);
      }
      if (HangUpGetTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HangUpGetTime);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (CurStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurStage);
      }
      if (IsUseTime != false) {
        size += 1 + 1;
      }
      if (HangUpGetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HangUpGetTime);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_fbStageEnd other) {
      if (other == null) {
        return;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.CurStage != 0) {
        CurStage = other.CurStage;
      }
      if (other.IsUseTime != false) {
        IsUseTime = other.IsUseTime;
      }
      if (other.HangUpGetTime != 0) {
        HangUpGetTime = other.HangUpGetTime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            CurStage = input.ReadInt32();
            break;
          }
          case 24: {
            IsUseTime = input.ReadBool();
            break;
          }
          case 32: {
            HangUpGetTime = input.ReadInt32();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求退出章节
  /// </summary>
  public sealed partial class CS_war_fbExit : pb::IMessage<CS_war_fbExit> {
    private static readonly pb::MessageParser<CS_war_fbExit> _parser = new pb::MessageParser<CS_war_fbExit>(() => new CS_war_fbExit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_fbExit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbExit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbExit(CS_war_fbExit other) : this() {
      chapterId_ = other.chapterId_;
      exitType_ = other.exitType_;
      type_ = other.type_;
      oneDrop_ = other.oneDrop_.Clone();
      curStage_ = other.curStage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbExit Clone() {
      return new CS_war_fbExit(this);
    }

    /// <summary>Field number for the "ChapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    /// <summary>
    ///章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "exitType" field.</summary>
    public const int ExitTypeFieldNumber = 2;
    private int exitType_;
    /// <summary>
    ///退出类型（1 战斗失败退出 2 玩家主动退出）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExitType {
      get { return exitType_; }
      set {
        exitType_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///1简单 2困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "oneDrop" field.</summary>
    public const int OneDropFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PbWar.One_DropItem> _repeated_oneDrop_codec
        = pb::FieldCodec.ForMessage(42, global::PbWar.One_DropItem.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_DropItem> oneDrop_ = new pbc::RepeatedField<global::PbWar.One_DropItem>();
    /// <summary>
    ///当前掉落物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_DropItem> OneDrop {
      get { return oneDrop_; }
    }

    /// <summary>Field number for the "CurStage" field.</summary>
    public const int CurStageFieldNumber = 6;
    private int curStage_;
    /// <summary>
    ///当前关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurStage {
      get { return curStage_; }
      set {
        curStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_fbExit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_fbExit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterId != other.ChapterId) return false;
      if (ExitType != other.ExitType) return false;
      if (Type != other.Type) return false;
      if(!oneDrop_.Equals(other.oneDrop_)) return false;
      if (CurStage != other.CurStage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (ExitType != 0) hash ^= ExitType.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= oneDrop_.GetHashCode();
      if (CurStage != 0) hash ^= CurStage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      if (ExitType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExitType);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      oneDrop_.WriteTo(output, _repeated_oneDrop_codec);
      if (CurStage != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurStage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (ExitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitType);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += oneDrop_.CalculateSize(_repeated_oneDrop_codec);
      if (CurStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurStage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_fbExit other) {
      if (other == null) {
        return;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.ExitType != 0) {
        ExitType = other.ExitType;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      oneDrop_.Add(other.oneDrop_);
      if (other.CurStage != 0) {
        CurStage = other.CurStage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            ExitType = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            oneDrop_.AddEntriesFrom(input, _repeated_oneDrop_codec);
            break;
          }
          case 48: {
            CurStage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求副本战斗重生
  /// </summary>
  public sealed partial class CS_war_fbRebirth : pb::IMessage<CS_war_fbRebirth> {
    private static readonly pb::MessageParser<CS_war_fbRebirth> _parser = new pb::MessageParser<CS_war_fbRebirth>(() => new CS_war_fbRebirth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_fbRebirth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbRebirth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbRebirth(CS_war_fbRebirth other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_fbRebirth Clone() {
      return new CS_war_fbRebirth(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_fbRebirth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_fbRebirth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_fbRebirth other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到副本战斗重生
  /// </summary>
  public sealed partial class SC_war_fbRebirth : pb::IMessage<SC_war_fbRebirth> {
    private static readonly pb::MessageParser<SC_war_fbRebirth> _parser = new pb::MessageParser<SC_war_fbRebirth>(() => new SC_war_fbRebirth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_fbRebirth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbRebirth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbRebirth(SC_war_fbRebirth other) : this() {
      rebirthNum_ = other.rebirthNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_fbRebirth Clone() {
      return new SC_war_fbRebirth(this);
    }

    /// <summary>Field number for the "RebirthNum" field.</summary>
    public const int RebirthNumFieldNumber = 1;
    private int rebirthNum_;
    /// <summary>
    ///当前重生次数  (客户端HP加满,当前回合置0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RebirthNum {
      get { return rebirthNum_; }
      set {
        rebirthNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_fbRebirth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_fbRebirth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RebirthNum != other.RebirthNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RebirthNum != 0) hash ^= RebirthNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RebirthNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RebirthNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RebirthNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RebirthNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_fbRebirth other) {
      if (other == null) {
        return;
      }
      if (other.RebirthNum != 0) {
        RebirthNum = other.RebirthNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RebirthNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取章节宝箱
  /// </summary>
  public sealed partial class CS_war_GetBox : pb::IMessage<CS_war_GetBox> {
    private static readonly pb::MessageParser<CS_war_GetBox> _parser = new pb::MessageParser<CS_war_GetBox>(() => new CS_war_GetBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_GetBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_GetBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_GetBox(CS_war_GetBox other) : this() {
      boxId_ = other.boxId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_GetBox Clone() {
      return new CS_war_GetBox(this);
    }

    /// <summary>Field number for the "BoxId" field.</summary>
    public const int BoxIdFieldNumber = 1;
    private int boxId_;
    /// <summary>
    ///领取宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_GetBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_GetBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoxId != other.BoxId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoxId != 0) hash ^= BoxId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoxId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_GetBox other) {
      if (other == null) {
        return;
      }
      if (other.BoxId != 0) {
        BoxId = other.BoxId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到领取章节宝箱结果
  /// </summary>
  public sealed partial class SC_war_GetBox : pb::IMessage<SC_war_GetBox> {
    private static readonly pb::MessageParser<SC_war_GetBox> _parser = new pb::MessageParser<SC_war_GetBox>(() => new SC_war_GetBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_GetBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_GetBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_GetBox(SC_war_GetBox other) : this() {
      boxId_ = other.boxId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_GetBox Clone() {
      return new SC_war_GetBox(this);
    }

    /// <summary>Field number for the "BoxId" field.</summary>
    public const int BoxIdFieldNumber = 1;
    private int boxId_;
    /// <summary>
    ///领取宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_GetBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_GetBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoxId != other.BoxId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoxId != 0) hash ^= BoxId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoxId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_GetBox other) {
      if (other == null) {
        return;
      }
      if (other.BoxId != 0) {
        BoxId = other.BoxId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到章节宝箱可领取通知
  /// </summary>
  public sealed partial class SC_war_GetBoxUpdate : pb::IMessage<SC_war_GetBoxUpdate> {
    private static readonly pb::MessageParser<SC_war_GetBoxUpdate> _parser = new pb::MessageParser<SC_war_GetBoxUpdate>(() => new SC_war_GetBoxUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_GetBoxUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_GetBoxUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_GetBoxUpdate(SC_war_GetBoxUpdate other) : this() {
      ids_ = other.ids_.Clone();
      waitIds_ = other.waitIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_GetBoxUpdate Clone() {
      return new SC_war_GetBoxUpdate(this);
    }

    /// <summary>Field number for the "Ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///进度达成，发送可领取宝箱id （只有一个可领）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "WaitIds" field.</summary>
    public const int WaitIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_waitIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> waitIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已激活待领取宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WaitIds {
      get { return waitIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_GetBoxUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_GetBoxUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if(!waitIds_.Equals(other.waitIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      hash ^= waitIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      waitIds_.WriteTo(output, _repeated_waitIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += waitIds_.CalculateSize(_repeated_waitIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_GetBoxUpdate other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      waitIds_.Add(other.waitIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 18:
          case 16: {
            waitIds_.AddEntriesFrom(input, _repeated_waitIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个掉落物品
  /// </summary>
  public sealed partial class One_DropItem : pb::IMessage<One_DropItem> {
    private static readonly pb::MessageParser<One_DropItem> _parser = new pb::MessageParser<One_DropItem>(() => new One_DropItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_DropItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_DropItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_DropItem(One_DropItem other) : this() {
      itemId_ = other.itemId_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_DropItem Clone() {
      return new One_DropItem(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///物品模板id(负数表示英雄)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_DropItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_DropItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_DropItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求随机商人购买
  /// </summary>
  public sealed partial class CS_war_TraderBuy : pb::IMessage<CS_war_TraderBuy> {
    private static readonly pb::MessageParser<CS_war_TraderBuy> _parser = new pb::MessageParser<CS_war_TraderBuy>(() => new CS_war_TraderBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_TraderBuy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_TraderBuy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_TraderBuy(CS_war_TraderBuy other) : this() {
      shopId_ = other.shopId_;
      itemId_ = other.itemId_;
      itemNum_ = other.itemNum_;
      costId_ = other.costId_;
      costNum_ = other.costNum_;
      chapterId_ = other.chapterId_;
      fbType_ = other.fbType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_TraderBuy Clone() {
      return new CS_war_TraderBuy(this);
    }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ItemNum" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private int itemNum_;
    /// <summary>
    ///道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "CostId" field.</summary>
    public const int CostIdFieldNumber = 4;
    private int costId_;
    /// <summary>
    ///虚拟物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostId {
      get { return costId_; }
      set {
        costId_ = value;
      }
    }

    /// <summary>Field number for the "CostNum" field.</summary>
    public const int CostNumFieldNumber = 5;
    private int costNum_;
    /// <summary>
    ///消耗虚拟物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostNum {
      get { return costNum_; }
      set {
        costNum_ = value;
      }
    }

    /// <summary>Field number for the "ChapterId" field.</summary>
    public const int ChapterIdFieldNumber = 6;
    private int chapterId_;
    /// <summary>
    ///章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "fbType" field.</summary>
    public const int FbTypeFieldNumber = 7;
    private int fbType_;
    /// <summary>
    ///副本类型  1 简单 2 困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FbType {
      get { return fbType_; }
      set {
        fbType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_TraderBuy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_TraderBuy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemNum != other.ItemNum) return false;
      if (CostId != other.CostId) return false;
      if (CostNum != other.CostNum) return false;
      if (ChapterId != other.ChapterId) return false;
      if (FbType != other.FbType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      if (CostId != 0) hash ^= CostId.GetHashCode();
      if (CostNum != 0) hash ^= CostNum.GetHashCode();
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (FbType != 0) hash ^= FbType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemNum);
      }
      if (CostId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CostId);
      }
      if (CostNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CostNum);
      }
      if (ChapterId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChapterId);
      }
      if (FbType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FbType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (CostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostId);
      }
      if (CostNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostNum);
      }
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (FbType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FbType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_TraderBuy other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
      if (other.CostId != 0) {
        CostId = other.CostId;
      }
      if (other.CostNum != 0) {
        CostNum = other.CostNum;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.FbType != 0) {
        FbType = other.FbType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemNum = input.ReadInt32();
            break;
          }
          case 32: {
            CostId = input.ReadInt32();
            break;
          }
          case 40: {
            CostNum = input.ReadInt32();
            break;
          }
          case 48: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 56: {
            FbType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到随机商人购买
  /// </summary>
  public sealed partial class SC_war_TraderBuy : pb::IMessage<SC_war_TraderBuy> {
    private static readonly pb::MessageParser<SC_war_TraderBuy> _parser = new pb::MessageParser<SC_war_TraderBuy>(() => new SC_war_TraderBuy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_TraderBuy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_TraderBuy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_TraderBuy(SC_war_TraderBuy other) : this() {
      shopId_ = other.shopId_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_TraderBuy Clone() {
      return new SC_war_TraderBuy(this);
    }

    /// <summary>Field number for the "ShopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::PbWar.Enum_TraderBuy_result result_ = 0;
    /// <summary>
    ///购买结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbWar.Enum_TraderBuy_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_TraderBuy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_TraderBuy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_TraderBuy other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 16: {
            result_ = (global::PbWar.Enum_TraderBuy_result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求章节内看广告复活
  /// </summary>
  public sealed partial class CS_war_RebornByAD : pb::IMessage<CS_war_RebornByAD> {
    private static readonly pb::MessageParser<CS_war_RebornByAD> _parser = new pb::MessageParser<CS_war_RebornByAD>(() => new CS_war_RebornByAD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_RebornByAD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_RebornByAD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_RebornByAD(CS_war_RebornByAD other) : this() {
      chapterId_ = other.chapterId_;
      fbType_ = other.fbType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_RebornByAD Clone() {
      return new CS_war_RebornByAD(this);
    }

    /// <summary>Field number for the "ChapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    /// <summary>
    ///章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "fbType" field.</summary>
    public const int FbTypeFieldNumber = 2;
    private int fbType_;
    /// <summary>
    ///副本类型  1 简单 2 困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FbType {
      get { return fbType_; }
      set {
        fbType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_RebornByAD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_RebornByAD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterId != other.ChapterId) return false;
      if (FbType != other.FbType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (FbType != 0) hash ^= FbType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      if (FbType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FbType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (FbType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FbType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_RebornByAD other) {
      if (other == null) {
        return;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.FbType != 0) {
        FbType = other.FbType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            FbType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求退出活动副本
  /// </summary>
  public sealed partial class CS_war_ExitAcFb : pb::IMessage<CS_war_ExitAcFb> {
    private static readonly pb::MessageParser<CS_war_ExitAcFb> _parser = new pb::MessageParser<CS_war_ExitAcFb>(() => new CS_war_ExitAcFb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_ExitAcFb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_ExitAcFb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_ExitAcFb(CS_war_ExitAcFb other) : this() {
      fbType_ = other.fbType_;
      isAdJoin_ = other.isAdJoin_;
      oneDrop_ = other.oneDrop_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_ExitAcFb Clone() {
      return new CS_war_ExitAcFb(this);
    }

    /// <summary>Field number for the "fbType" field.</summary>
    public const int FbTypeFieldNumber = 1;
    private int fbType_;
    /// <summary>
    ///副本类型  1 金币 2 装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FbType {
      get { return fbType_; }
      set {
        fbType_ = value;
      }
    }

    /// <summary>Field number for the "IsAdJoin" field.</summary>
    public const int IsAdJoinFieldNumber = 2;
    private bool isAdJoin_;
    /// <summary>
    ///是否广告进入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdJoin {
      get { return isAdJoin_; }
      set {
        isAdJoin_ = value;
      }
    }

    /// <summary>Field number for the "oneDrop" field.</summary>
    public const int OneDropFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbWar.One_DropItem> _repeated_oneDrop_codec
        = pb::FieldCodec.ForMessage(26, global::PbWar.One_DropItem.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_DropItem> oneDrop_ = new pbc::RepeatedField<global::PbWar.One_DropItem>();
    /// <summary>
    ///当前掉落物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_DropItem> OneDrop {
      get { return oneDrop_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_ExitAcFb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_ExitAcFb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FbType != other.FbType) return false;
      if (IsAdJoin != other.IsAdJoin) return false;
      if(!oneDrop_.Equals(other.oneDrop_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FbType != 0) hash ^= FbType.GetHashCode();
      if (IsAdJoin != false) hash ^= IsAdJoin.GetHashCode();
      hash ^= oneDrop_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FbType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FbType);
      }
      if (IsAdJoin != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAdJoin);
      }
      oneDrop_.WriteTo(output, _repeated_oneDrop_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FbType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FbType);
      }
      if (IsAdJoin != false) {
        size += 1 + 1;
      }
      size += oneDrop_.CalculateSize(_repeated_oneDrop_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_ExitAcFb other) {
      if (other == null) {
        return;
      }
      if (other.FbType != 0) {
        FbType = other.FbType;
      }
      if (other.IsAdJoin != false) {
        IsAdJoin = other.IsAdJoin;
      }
      oneDrop_.Add(other.oneDrop_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FbType = input.ReadInt32();
            break;
          }
          case 16: {
            IsAdJoin = input.ReadBool();
            break;
          }
          case 26: {
            oneDrop_.AddEntriesFrom(input, _repeated_oneDrop_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到退出活动副本
  /// </summary>
  public sealed partial class SC_war_ExitAcFb : pb::IMessage<SC_war_ExitAcFb> {
    private static readonly pb::MessageParser<SC_war_ExitAcFb> _parser = new pb::MessageParser<SC_war_ExitAcFb>(() => new SC_war_ExitAcFb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_ExitAcFb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_ExitAcFb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_ExitAcFb(SC_war_ExitAcFb other) : this() {
      fbType_ = other.fbType_;
      isAdJoin_ = other.isAdJoin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_ExitAcFb Clone() {
      return new SC_war_ExitAcFb(this);
    }

    /// <summary>Field number for the "fbType" field.</summary>
    public const int FbTypeFieldNumber = 1;
    private int fbType_;
    /// <summary>
    ///副本类型  1 简单 2 困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FbType {
      get { return fbType_; }
      set {
        fbType_ = value;
      }
    }

    /// <summary>Field number for the "IsAdJoin" field.</summary>
    public const int IsAdJoinFieldNumber = 2;
    private bool isAdJoin_;
    /// <summary>
    ///是否广告进入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdJoin {
      get { return isAdJoin_; }
      set {
        isAdJoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_ExitAcFb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_ExitAcFb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FbType != other.FbType) return false;
      if (IsAdJoin != other.IsAdJoin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FbType != 0) hash ^= FbType.GetHashCode();
      if (IsAdJoin != false) hash ^= IsAdJoin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FbType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FbType);
      }
      if (IsAdJoin != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAdJoin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FbType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FbType);
      }
      if (IsAdJoin != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_ExitAcFb other) {
      if (other == null) {
        return;
      }
      if (other.FbType != 0) {
        FbType = other.FbType;
      }
      if (other.IsAdJoin != false) {
        IsAdJoin = other.IsAdJoin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FbType = input.ReadInt32();
            break;
          }
          case 16: {
            IsAdJoin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///检测消息加密
  /// </summary>
  public sealed partial class CS_TestEncrypt : pb::IMessage<CS_TestEncrypt> {
    private static readonly pb::MessageParser<CS_TestEncrypt> _parser = new pb::MessageParser<CS_TestEncrypt>(() => new CS_TestEncrypt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_TestEncrypt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_TestEncrypt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_TestEncrypt(CS_TestEncrypt other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_TestEncrypt Clone() {
      return new CS_TestEncrypt(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_TestEncrypt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_TestEncrypt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_TestEncrypt other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_TestEncrypt : pb::IMessage<SC_TestEncrypt> {
    private static readonly pb::MessageParser<SC_TestEncrypt> _parser = new pb::MessageParser<SC_TestEncrypt>(() => new SC_TestEncrypt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_TestEncrypt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_TestEncrypt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_TestEncrypt(SC_TestEncrypt other) : this() {
      returnValue_ = other.returnValue_;
      returnValue1_ = other.returnValue1_;
      returnValue2_ = other.returnValue2_;
      returnValue3_ = other.returnValue3_;
      returnValue4_ = other.returnValue4_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_TestEncrypt Clone() {
      return new SC_TestEncrypt(this);
    }

    /// <summary>Field number for the "ReturnValue" field.</summary>
    public const int ReturnValueFieldNumber = 1;
    private int returnValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReturnValue {
      get { return returnValue_; }
      set {
        returnValue_ = value;
      }
    }

    /// <summary>Field number for the "ReturnValue1" field.</summary>
    public const int ReturnValue1FieldNumber = 2;
    private int returnValue1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReturnValue1 {
      get { return returnValue1_; }
      set {
        returnValue1_ = value;
      }
    }

    /// <summary>Field number for the "ReturnValue2" field.</summary>
    public const int ReturnValue2FieldNumber = 3;
    private int returnValue2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReturnValue2 {
      get { return returnValue2_; }
      set {
        returnValue2_ = value;
      }
    }

    /// <summary>Field number for the "ReturnValue3" field.</summary>
    public const int ReturnValue3FieldNumber = 4;
    private int returnValue3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReturnValue3 {
      get { return returnValue3_; }
      set {
        returnValue3_ = value;
      }
    }

    /// <summary>Field number for the "ReturnValue4" field.</summary>
    public const int ReturnValue4FieldNumber = 5;
    private string returnValue4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReturnValue4 {
      get { return returnValue4_; }
      set {
        returnValue4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_TestEncrypt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_TestEncrypt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReturnValue != other.ReturnValue) return false;
      if (ReturnValue1 != other.ReturnValue1) return false;
      if (ReturnValue2 != other.ReturnValue2) return false;
      if (ReturnValue3 != other.ReturnValue3) return false;
      if (ReturnValue4 != other.ReturnValue4) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReturnValue != 0) hash ^= ReturnValue.GetHashCode();
      if (ReturnValue1 != 0) hash ^= ReturnValue1.GetHashCode();
      if (ReturnValue2 != 0) hash ^= ReturnValue2.GetHashCode();
      if (ReturnValue3 != 0) hash ^= ReturnValue3.GetHashCode();
      if (ReturnValue4.Length != 0) hash ^= ReturnValue4.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReturnValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReturnValue);
      }
      if (ReturnValue1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReturnValue1);
      }
      if (ReturnValue2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReturnValue2);
      }
      if (ReturnValue3 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReturnValue3);
      }
      if (ReturnValue4.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReturnValue4);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReturnValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReturnValue);
      }
      if (ReturnValue1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReturnValue1);
      }
      if (ReturnValue2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReturnValue2);
      }
      if (ReturnValue3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReturnValue3);
      }
      if (ReturnValue4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReturnValue4);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_TestEncrypt other) {
      if (other == null) {
        return;
      }
      if (other.ReturnValue != 0) {
        ReturnValue = other.ReturnValue;
      }
      if (other.ReturnValue1 != 0) {
        ReturnValue1 = other.ReturnValue1;
      }
      if (other.ReturnValue2 != 0) {
        ReturnValue2 = other.ReturnValue2;
      }
      if (other.ReturnValue3 != 0) {
        ReturnValue3 = other.ReturnValue3;
      }
      if (other.ReturnValue4.Length != 0) {
        ReturnValue4 = other.ReturnValue4;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReturnValue = input.ReadInt32();
            break;
          }
          case 16: {
            ReturnValue1 = input.ReadInt32();
            break;
          }
          case 24: {
            ReturnValue2 = input.ReadInt32();
            break;
          }
          case 32: {
            ReturnValue3 = input.ReadInt32();
            break;
          }
          case 42: {
            ReturnValue4 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求进入世界Boss副本
  /// </summary>
  public sealed partial class CS_war_worldBossFb : pb::IMessage<CS_war_worldBossFb> {
    private static readonly pb::MessageParser<CS_war_worldBossFb> _parser = new pb::MessageParser<CS_war_worldBossFb>(() => new CS_war_worldBossFb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_worldBossFb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_worldBossFb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_worldBossFb(CS_war_worldBossFb other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_worldBossFb Clone() {
      return new CS_war_worldBossFb(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///副本类型  1 免费进入 2 购买进入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_worldBossFb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_worldBossFb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_worldBossFb other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到进入世界Boss副本
  /// </summary>
  public sealed partial class SC_war_worldBossFb : pb::IMessage<SC_war_worldBossFb> {
    private static readonly pb::MessageParser<SC_war_worldBossFb> _parser = new pb::MessageParser<SC_war_worldBossFb>(() => new SC_war_worldBossFb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_worldBossFb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFb(SC_war_worldBossFb other) : this() {
      type_ = other.type_;
      totalHurt_ = other.totalHurt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFb Clone() {
      return new SC_war_worldBossFb(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///副本类型  1 简单 2 困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "totalHurt" field.</summary>
    public const int TotalHurtFieldNumber = 2;
    private long totalHurt_;
    /// <summary>
    ///当日累计伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalHurt {
      get { return totalHurt_; }
      set {
        totalHurt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_worldBossFb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_worldBossFb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TotalHurt != other.TotalHurt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TotalHurt != 0L) hash ^= TotalHurt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (TotalHurt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalHurt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (TotalHurt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalHurt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_worldBossFb other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TotalHurt != 0L) {
        TotalHurt = other.TotalHurt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            TotalHurt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求退出世界Boss副本
  /// </summary>
  public sealed partial class CS_war_ExworldBossFb : pb::IMessage<CS_war_ExworldBossFb> {
    private static readonly pb::MessageParser<CS_war_ExworldBossFb> _parser = new pb::MessageParser<CS_war_ExworldBossFb>(() => new CS_war_ExworldBossFb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_ExworldBossFb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_ExworldBossFb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_ExworldBossFb(CS_war_ExworldBossFb other) : this() {
      curHurt_ = other.curHurt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_ExworldBossFb Clone() {
      return new CS_war_ExworldBossFb(this);
    }

    /// <summary>Field number for the "curHurt" field.</summary>
    public const int CurHurtFieldNumber = 1;
    private long curHurt_;
    /// <summary>
    ///当前伤害	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurHurt {
      get { return curHurt_; }
      set {
        curHurt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_ExworldBossFb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_ExworldBossFb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurHurt != other.CurHurt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurHurt != 0L) hash ^= CurHurt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurHurt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurHurt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurHurt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurHurt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_ExworldBossFb other) {
      if (other == null) {
        return;
      }
      if (other.CurHurt != 0L) {
        CurHurt = other.CurHurt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurHurt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到退出世界Boss副本
  /// </summary>
  public sealed partial class SC_war_ExworldBossFb : pb::IMessage<SC_war_ExworldBossFb> {
    private static readonly pb::MessageParser<SC_war_ExworldBossFb> _parser = new pb::MessageParser<SC_war_ExworldBossFb>(() => new SC_war_ExworldBossFb());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_ExworldBossFb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_ExworldBossFb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_ExworldBossFb(SC_war_ExworldBossFb other) : this() {
      totalHurt_ = other.totalHurt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_ExworldBossFb Clone() {
      return new SC_war_ExworldBossFb(this);
    }

    /// <summary>Field number for the "totalHurt" field.</summary>
    public const int TotalHurtFieldNumber = 2;
    private long totalHurt_;
    /// <summary>
    ///当日累计伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalHurt {
      get { return totalHurt_; }
      set {
        totalHurt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_ExworldBossFb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_ExworldBossFb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalHurt != other.TotalHurt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalHurt != 0L) hash ^= TotalHurt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalHurt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalHurt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalHurt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalHurt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_ExworldBossFb other) {
      if (other == null) {
        return;
      }
      if (other.TotalHurt != 0L) {
        TotalHurt = other.TotalHurt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            TotalHurt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到世界Boss副本信息
  /// </summary>
  public sealed partial class SC_war_worldBossFbInfo : pb::IMessage<SC_war_worldBossFbInfo> {
    private static readonly pb::MessageParser<SC_war_worldBossFbInfo> _parser = new pb::MessageParser<SC_war_worldBossFbInfo>(() => new SC_war_worldBossFbInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_worldBossFbInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFbInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFbInfo(SC_war_worldBossFbInfo other) : this() {
      freeLeft_ = other.freeLeft_;
      buyLeft_ = other.buyLeft_;
      totalHurt_ = other.totalHurt_;
      isReBuildFB_ = other.isReBuildFB_;
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFbInfo Clone() {
      return new SC_war_worldBossFbInfo(this);
    }

    /// <summary>Field number for the "freeLeft" field.</summary>
    public const int FreeLeftFieldNumber = 1;
    private int freeLeft_;
    /// <summary>
    ///免费进入剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeLeft {
      get { return freeLeft_; }
      set {
        freeLeft_ = value;
      }
    }

    /// <summary>Field number for the "buyLeft" field.</summary>
    public const int BuyLeftFieldNumber = 2;
    private int buyLeft_;
    /// <summary>
    ///购买进入剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyLeft {
      get { return buyLeft_; }
      set {
        buyLeft_ = value;
      }
    }

    /// <summary>Field number for the "totalHurt" field.</summary>
    public const int TotalHurtFieldNumber = 3;
    private long totalHurt_;
    /// <summary>
    ///当日累计伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalHurt {
      get { return totalHurt_; }
      set {
        totalHurt_ = value;
      }
    }

    /// <summary>Field number for the "IsReBuildFB" field.</summary>
    public const int IsReBuildFBFieldNumber = 4;
    private bool isReBuildFB_;
    /// <summary>
    ///是否重建副本（true 未退出需重建）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReBuildFB {
      get { return isReBuildFB_; }
      set {
        isReBuildFB_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_worldBossFbInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_worldBossFbInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeLeft != other.FreeLeft) return false;
      if (BuyLeft != other.BuyLeft) return false;
      if (TotalHurt != other.TotalHurt) return false;
      if (IsReBuildFB != other.IsReBuildFB) return false;
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeLeft != 0) hash ^= FreeLeft.GetHashCode();
      if (BuyLeft != 0) hash ^= BuyLeft.GetHashCode();
      if (TotalHurt != 0L) hash ^= TotalHurt.GetHashCode();
      if (IsReBuildFB != false) hash ^= IsReBuildFB.GetHashCode();
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FreeLeft != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeLeft);
      }
      if (BuyLeft != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuyLeft);
      }
      if (TotalHurt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalHurt);
      }
      if (IsReBuildFB != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsReBuildFB);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeLeft);
      }
      if (BuyLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyLeft);
      }
      if (TotalHurt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalHurt);
      }
      if (IsReBuildFB != false) {
        size += 1 + 1;
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_worldBossFbInfo other) {
      if (other == null) {
        return;
      }
      if (other.FreeLeft != 0) {
        FreeLeft = other.FreeLeft;
      }
      if (other.BuyLeft != 0) {
        BuyLeft = other.BuyLeft;
      }
      if (other.TotalHurt != 0L) {
        TotalHurt = other.TotalHurt;
      }
      if (other.IsReBuildFB != false) {
        IsReBuildFB = other.IsReBuildFB;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FreeLeft = input.ReadInt32();
            break;
          }
          case 16: {
            BuyLeft = input.ReadInt32();
            break;
          }
          case 24: {
            TotalHurt = input.ReadInt64();
            break;
          }
          case 32: {
            IsReBuildFB = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求一键领取世界Boss副本奖励
  /// </summary>
  public sealed partial class CS_war_worldBossFbGet : pb::IMessage<CS_war_worldBossFbGet> {
    private static readonly pb::MessageParser<CS_war_worldBossFbGet> _parser = new pb::MessageParser<CS_war_worldBossFbGet>(() => new CS_war_worldBossFbGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_worldBossFbGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_worldBossFbGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_worldBossFbGet(CS_war_worldBossFbGet other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_worldBossFbGet Clone() {
      return new CS_war_worldBossFbGet(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_worldBossFbGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_worldBossFbGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_worldBossFbGet other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到一键领取世界Boss副本奖励
  /// </summary>
  public sealed partial class SC_war_worldBossFbGet : pb::IMessage<SC_war_worldBossFbGet> {
    private static readonly pb::MessageParser<SC_war_worldBossFbGet> _parser = new pb::MessageParser<SC_war_worldBossFbGet>(() => new SC_war_worldBossFbGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_worldBossFbGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFbGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFbGet(SC_war_worldBossFbGet other) : this() {
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_worldBossFbGet Clone() {
      return new SC_war_worldBossFbGet(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_worldBossFbGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_worldBossFbGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_worldBossFbGet other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求爬塔副本关卡结束
  /// </summary>
  public sealed partial class CS_war_TowerFbEnd : pb::IMessage<CS_war_TowerFbEnd> {
    private static readonly pb::MessageParser<CS_war_TowerFbEnd> _parser = new pb::MessageParser<CS_war_TowerFbEnd>(() => new CS_war_TowerFbEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_TowerFbEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_TowerFbEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_TowerFbEnd(CS_war_TowerFbEnd other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_TowerFbEnd Clone() {
      return new CS_war_TowerFbEnd(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_TowerFbEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_TowerFbEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_TowerFbEnd other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到爬塔副本关卡信息
  /// </summary>
  public sealed partial class SC_war_TowerFbEnd : pb::IMessage<SC_war_TowerFbEnd> {
    private static readonly pb::MessageParser<SC_war_TowerFbEnd> _parser = new pb::MessageParser<SC_war_TowerFbEnd>(() => new SC_war_TowerFbEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_TowerFbEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_TowerFbEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_TowerFbEnd(SC_war_TowerFbEnd other) : this() {
      toplevel_ = other.toplevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_TowerFbEnd Clone() {
      return new SC_war_TowerFbEnd(this);
    }

    /// <summary>Field number for the "Toplevel" field.</summary>
    public const int ToplevelFieldNumber = 1;
    private int toplevel_;
    /// <summary>
    ///最高层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Toplevel {
      get { return toplevel_; }
      set {
        toplevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_TowerFbEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_TowerFbEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Toplevel != other.Toplevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Toplevel != 0) hash ^= Toplevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Toplevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Toplevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Toplevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Toplevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_TowerFbEnd other) {
      if (other == null) {
        return;
      }
      if (other.Toplevel != 0) {
        Toplevel = other.Toplevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Toplevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到无尽副本信息
  /// </summary>
  public sealed partial class SC_war_InfinityFbInfo : pb::IMessage<SC_war_InfinityFbInfo> {
    private static readonly pb::MessageParser<SC_war_InfinityFbInfo> _parser = new pb::MessageParser<SC_war_InfinityFbInfo>(() => new SC_war_InfinityFbInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_InfinityFbInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbInfo(SC_war_InfinityFbInfo other) : this() {
      toplevel_ = other.toplevel_;
      resetTime_ = other.resetTime_;
      joinCostId_ = other.joinCostId_;
      joinCostnum_ = other.joinCostnum_;
      awardIds_ = other.awardIds_.Clone();
      isReBuildFB_ = other.isReBuildFB_;
      freeTimes_ = other.freeTimes_;
      oneSkill_ = other.oneSkill_.Clone();
      list_ = other.list_.Clone();
      curTop_ = other.curTop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbInfo Clone() {
      return new SC_war_InfinityFbInfo(this);
    }

    /// <summary>Field number for the "Toplevel" field.</summary>
    public const int ToplevelFieldNumber = 1;
    private int toplevel_;
    /// <summary>
    ///最高层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Toplevel {
      get { return toplevel_; }
      set {
        toplevel_ = value;
      }
    }

    /// <summary>Field number for the "resetTime" field.</summary>
    public const int ResetTimeFieldNumber = 2;
    private int resetTime_;
    /// <summary>
    ///重置时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = value;
      }
    }

    /// <summary>Field number for the "joinCostId" field.</summary>
    public const int JoinCostIdFieldNumber = 3;
    private int joinCostId_;
    /// <summary>
    ///挑战消耗物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinCostId {
      get { return joinCostId_; }
      set {
        joinCostId_ = value;
      }
    }

    /// <summary>Field number for the "joinCostnum" field.</summary>
    public const int JoinCostnumFieldNumber = 4;
    private int joinCostnum_;
    /// <summary>
    ///挑战消耗物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinCostnum {
      get { return joinCostnum_; }
      set {
        joinCostnum_ = value;
      }
    }

    /// <summary>Field number for the "AwardIds" field.</summary>
    public const int AwardIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_awardIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> awardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取奖励ids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AwardIds {
      get { return awardIds_; }
    }

    /// <summary>Field number for the "IsReBuildFB" field.</summary>
    public const int IsReBuildFBFieldNumber = 6;
    private bool isReBuildFB_;
    /// <summary>
    ///是否重建副本（true 未退出需重建）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReBuildFB {
      get { return isReBuildFB_; }
      set {
        isReBuildFB_ = value;
      }
    }

    /// <summary>Field number for the "FreeTimes" field.</summary>
    public const int FreeTimesFieldNumber = 7;
    private int freeTimes_;
    /// <summary>
    ///剩余免费进入次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTimes {
      get { return freeTimes_; }
      set {
        freeTimes_ = value;
      }
    }

    /// <summary>Field number for the "oneSkill" field.</summary>
    public const int OneSkillFieldNumber = 8;
    private static readonly pb::FieldCodec<global::PbWar.One_ChapterSkill> _repeated_oneSkill_codec
        = pb::FieldCodec.ForMessage(66, global::PbWar.One_ChapterSkill.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_ChapterSkill> oneSkill_ = new pbc::RepeatedField<global::PbWar.One_ChapterSkill>();
    /// <summary>
    ///当前已获得技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_ChapterSkill> OneSkill {
      get { return oneSkill_; }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::PbWar.One_DropItem> _repeated_list_codec
        = pb::FieldCodec.ForMessage(74, global::PbWar.One_DropItem.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_DropItem> list_ = new pbc::RepeatedField<global::PbWar.One_DropItem>();
    /// <summary>
    ///累计掉落
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_DropItem> List {
      get { return list_; }
    }

    /// <summary>Field number for the "CurTop" field.</summary>
    public const int CurTopFieldNumber = 10;
    private int curTop_;
    /// <summary>
    ///当前最高层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTop {
      get { return curTop_; }
      set {
        curTop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_InfinityFbInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_InfinityFbInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Toplevel != other.Toplevel) return false;
      if (ResetTime != other.ResetTime) return false;
      if (JoinCostId != other.JoinCostId) return false;
      if (JoinCostnum != other.JoinCostnum) return false;
      if(!awardIds_.Equals(other.awardIds_)) return false;
      if (IsReBuildFB != other.IsReBuildFB) return false;
      if (FreeTimes != other.FreeTimes) return false;
      if(!oneSkill_.Equals(other.oneSkill_)) return false;
      if(!list_.Equals(other.list_)) return false;
      if (CurTop != other.CurTop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Toplevel != 0) hash ^= Toplevel.GetHashCode();
      if (ResetTime != 0) hash ^= ResetTime.GetHashCode();
      if (JoinCostId != 0) hash ^= JoinCostId.GetHashCode();
      if (JoinCostnum != 0) hash ^= JoinCostnum.GetHashCode();
      hash ^= awardIds_.GetHashCode();
      if (IsReBuildFB != false) hash ^= IsReBuildFB.GetHashCode();
      if (FreeTimes != 0) hash ^= FreeTimes.GetHashCode();
      hash ^= oneSkill_.GetHashCode();
      hash ^= list_.GetHashCode();
      if (CurTop != 0) hash ^= CurTop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Toplevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Toplevel);
      }
      if (ResetTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ResetTime);
      }
      if (JoinCostId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinCostId);
      }
      if (JoinCostnum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JoinCostnum);
      }
      awardIds_.WriteTo(output, _repeated_awardIds_codec);
      if (IsReBuildFB != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsReBuildFB);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeTimes);
      }
      oneSkill_.WriteTo(output, _repeated_oneSkill_codec);
      list_.WriteTo(output, _repeated_list_codec);
      if (CurTop != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CurTop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Toplevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Toplevel);
      }
      if (ResetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResetTime);
      }
      if (JoinCostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinCostId);
      }
      if (JoinCostnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinCostnum);
      }
      size += awardIds_.CalculateSize(_repeated_awardIds_codec);
      if (IsReBuildFB != false) {
        size += 1 + 1;
      }
      if (FreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTimes);
      }
      size += oneSkill_.CalculateSize(_repeated_oneSkill_codec);
      size += list_.CalculateSize(_repeated_list_codec);
      if (CurTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_InfinityFbInfo other) {
      if (other == null) {
        return;
      }
      if (other.Toplevel != 0) {
        Toplevel = other.Toplevel;
      }
      if (other.ResetTime != 0) {
        ResetTime = other.ResetTime;
      }
      if (other.JoinCostId != 0) {
        JoinCostId = other.JoinCostId;
      }
      if (other.JoinCostnum != 0) {
        JoinCostnum = other.JoinCostnum;
      }
      awardIds_.Add(other.awardIds_);
      if (other.IsReBuildFB != false) {
        IsReBuildFB = other.IsReBuildFB;
      }
      if (other.FreeTimes != 0) {
        FreeTimes = other.FreeTimes;
      }
      oneSkill_.Add(other.oneSkill_);
      list_.Add(other.list_);
      if (other.CurTop != 0) {
        CurTop = other.CurTop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Toplevel = input.ReadInt32();
            break;
          }
          case 16: {
            ResetTime = input.ReadInt32();
            break;
          }
          case 24: {
            JoinCostId = input.ReadInt32();
            break;
          }
          case 32: {
            JoinCostnum = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            awardIds_.AddEntriesFrom(input, _repeated_awardIds_codec);
            break;
          }
          case 48: {
            IsReBuildFB = input.ReadBool();
            break;
          }
          case 56: {
            FreeTimes = input.ReadInt32();
            break;
          }
          case 66: {
            oneSkill_.AddEntriesFrom(input, _repeated_oneSkill_codec);
            break;
          }
          case 74: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 80: {
            CurTop = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求无尽副本关卡进入
  /// </summary>
  public sealed partial class CS_war_InfinityFbStart : pb::IMessage<CS_war_InfinityFbStart> {
    private static readonly pb::MessageParser<CS_war_InfinityFbStart> _parser = new pb::MessageParser<CS_war_InfinityFbStart>(() => new CS_war_InfinityFbStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_InfinityFbStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbStart(CS_war_InfinityFbStart other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbStart Clone() {
      return new CS_war_InfinityFbStart(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_InfinityFbStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_InfinityFbStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_InfinityFbStart other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到无尽副本关卡进入
  /// </summary>
  public sealed partial class SC_war_InfinityFbStart : pb::IMessage<SC_war_InfinityFbStart> {
    private static readonly pb::MessageParser<SC_war_InfinityFbStart> _parser = new pb::MessageParser<SC_war_InfinityFbStart>(() => new SC_war_InfinityFbStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_InfinityFbStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbStart(SC_war_InfinityFbStart other) : this() {
      joinCostId_ = other.joinCostId_;
      joinCostnum_ = other.joinCostnum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbStart Clone() {
      return new SC_war_InfinityFbStart(this);
    }

    /// <summary>Field number for the "joinCostId" field.</summary>
    public const int JoinCostIdFieldNumber = 1;
    private int joinCostId_;
    /// <summary>
    ///下次挑战消耗物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinCostId {
      get { return joinCostId_; }
      set {
        joinCostId_ = value;
      }
    }

    /// <summary>Field number for the "joinCostnum" field.</summary>
    public const int JoinCostnumFieldNumber = 2;
    private int joinCostnum_;
    /// <summary>
    ///下次挑战消耗物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinCostnum {
      get { return joinCostnum_; }
      set {
        joinCostnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_InfinityFbStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_InfinityFbStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JoinCostId != other.JoinCostId) return false;
      if (JoinCostnum != other.JoinCostnum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JoinCostId != 0) hash ^= JoinCostId.GetHashCode();
      if (JoinCostnum != 0) hash ^= JoinCostnum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JoinCostId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JoinCostId);
      }
      if (JoinCostnum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JoinCostnum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JoinCostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinCostId);
      }
      if (JoinCostnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinCostnum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_InfinityFbStart other) {
      if (other == null) {
        return;
      }
      if (other.JoinCostId != 0) {
        JoinCostId = other.JoinCostId;
      }
      if (other.JoinCostnum != 0) {
        JoinCostnum = other.JoinCostnum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            JoinCostId = input.ReadInt32();
            break;
          }
          case 16: {
            JoinCostnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求无尽副本关卡结束
  /// </summary>
  public sealed partial class CS_war_InfinityFbEnd : pb::IMessage<CS_war_InfinityFbEnd> {
    private static readonly pb::MessageParser<CS_war_InfinityFbEnd> _parser = new pb::MessageParser<CS_war_InfinityFbEnd>(() => new CS_war_InfinityFbEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_InfinityFbEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbEnd(CS_war_InfinityFbEnd other) : this() {
      level_ = other.level_;
      list_ = other.list_.Clone();
      oneSkill_ = other.oneSkill_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbEnd Clone() {
      return new CS_war_InfinityFbEnd(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbWar.One_DropItem> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::PbWar.One_DropItem.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_DropItem> list_ = new pbc::RepeatedField<global::PbWar.One_DropItem>();
    /// <summary>
    ///累计掉落
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_DropItem> List {
      get { return list_; }
    }

    /// <summary>Field number for the "oneSkill" field.</summary>
    public const int OneSkillFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbWar.One_ChapterSkill> _repeated_oneSkill_codec
        = pb::FieldCodec.ForMessage(26, global::PbWar.One_ChapterSkill.Parser);
    private readonly pbc::RepeatedField<global::PbWar.One_ChapterSkill> oneSkill_ = new pbc::RepeatedField<global::PbWar.One_ChapterSkill>();
    /// <summary>
    ///当前已获得技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbWar.One_ChapterSkill> OneSkill {
      get { return oneSkill_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_InfinityFbEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_InfinityFbEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if(!list_.Equals(other.list_)) return false;
      if(!oneSkill_.Equals(other.oneSkill_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= list_.GetHashCode();
      hash ^= oneSkill_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      list_.WriteTo(output, _repeated_list_codec);
      oneSkill_.WriteTo(output, _repeated_oneSkill_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      size += oneSkill_.CalculateSize(_repeated_oneSkill_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_InfinityFbEnd other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      list_.Add(other.list_);
      oneSkill_.Add(other.oneSkill_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 26: {
            oneSkill_.AddEntriesFrom(input, _repeated_oneSkill_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到无尽副本关卡结束
  /// </summary>
  public sealed partial class SC_war_InfinityFbEnd : pb::IMessage<SC_war_InfinityFbEnd> {
    private static readonly pb::MessageParser<SC_war_InfinityFbEnd> _parser = new pb::MessageParser<SC_war_InfinityFbEnd>(() => new SC_war_InfinityFbEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_InfinityFbEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbEnd(SC_war_InfinityFbEnd other) : this() {
      toplevel_ = other.toplevel_;
      curTop_ = other.curTop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbEnd Clone() {
      return new SC_war_InfinityFbEnd(this);
    }

    /// <summary>Field number for the "Toplevel" field.</summary>
    public const int ToplevelFieldNumber = 1;
    private int toplevel_;
    /// <summary>
    ///最高层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Toplevel {
      get { return toplevel_; }
      set {
        toplevel_ = value;
      }
    }

    /// <summary>Field number for the "curTop" field.</summary>
    public const int CurTopFieldNumber = 2;
    private int curTop_;
    /// <summary>
    ///当前最高层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTop {
      get { return curTop_; }
      set {
        curTop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_InfinityFbEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_InfinityFbEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Toplevel != other.Toplevel) return false;
      if (CurTop != other.CurTop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Toplevel != 0) hash ^= Toplevel.GetHashCode();
      if (CurTop != 0) hash ^= CurTop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Toplevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Toplevel);
      }
      if (CurTop != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Toplevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Toplevel);
      }
      if (CurTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_InfinityFbEnd other) {
      if (other == null) {
        return;
      }
      if (other.Toplevel != 0) {
        Toplevel = other.Toplevel;
      }
      if (other.CurTop != 0) {
        CurTop = other.CurTop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Toplevel = input.ReadInt32();
            break;
          }
          case 16: {
            CurTop = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求退出无尽副本
  /// </summary>
  public sealed partial class CS_war_InfinityFbExit : pb::IMessage<CS_war_InfinityFbExit> {
    private static readonly pb::MessageParser<CS_war_InfinityFbExit> _parser = new pb::MessageParser<CS_war_InfinityFbExit>(() => new CS_war_InfinityFbExit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_InfinityFbExit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbExit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbExit(CS_war_InfinityFbExit other) : this() {
      exitType_ = other.exitType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbExit Clone() {
      return new CS_war_InfinityFbExit(this);
    }

    /// <summary>Field number for the "exitType" field.</summary>
    public const int ExitTypeFieldNumber = 1;
    private int exitType_;
    /// <summary>
    ///退出类型（1失败退出   2 主动退出）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExitType {
      get { return exitType_; }
      set {
        exitType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_InfinityFbExit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_InfinityFbExit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExitType != other.ExitType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExitType != 0) hash ^= ExitType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExitType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ExitType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_InfinityFbExit other) {
      if (other == null) {
        return;
      }
      if (other.ExitType != 0) {
        ExitType = other.ExitType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExitType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到退出无尽副本
  /// </summary>
  public sealed partial class SC_war_InfinityFbExit : pb::IMessage<SC_war_InfinityFbExit> {
    private static readonly pb::MessageParser<SC_war_InfinityFbExit> _parser = new pb::MessageParser<SC_war_InfinityFbExit>(() => new SC_war_InfinityFbExit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_InfinityFbExit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbExit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbExit(SC_war_InfinityFbExit other) : this() {
      toplevel_ = other.toplevel_;
      curTop_ = other.curTop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbExit Clone() {
      return new SC_war_InfinityFbExit(this);
    }

    /// <summary>Field number for the "Toplevel" field.</summary>
    public const int ToplevelFieldNumber = 1;
    private int toplevel_;
    /// <summary>
    ///最高层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Toplevel {
      get { return toplevel_; }
      set {
        toplevel_ = value;
      }
    }

    /// <summary>Field number for the "curTop" field.</summary>
    public const int CurTopFieldNumber = 2;
    private int curTop_;
    /// <summary>
    ///当前最高层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTop {
      get { return curTop_; }
      set {
        curTop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_InfinityFbExit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_InfinityFbExit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Toplevel != other.Toplevel) return false;
      if (CurTop != other.CurTop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Toplevel != 0) hash ^= Toplevel.GetHashCode();
      if (CurTop != 0) hash ^= CurTop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Toplevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Toplevel);
      }
      if (CurTop != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurTop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Toplevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Toplevel);
      }
      if (CurTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_InfinityFbExit other) {
      if (other == null) {
        return;
      }
      if (other.Toplevel != 0) {
        Toplevel = other.Toplevel;
      }
      if (other.CurTop != 0) {
        CurTop = other.CurTop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Toplevel = input.ReadInt32();
            break;
          }
          case 16: {
            CurTop = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求无尽副本进度奖励
  /// </summary>
  public sealed partial class CS_war_InfinityFbGet : pb::IMessage<CS_war_InfinityFbGet> {
    private static readonly pb::MessageParser<CS_war_InfinityFbGet> _parser = new pb::MessageParser<CS_war_InfinityFbGet>(() => new CS_war_InfinityFbGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_war_InfinityFbGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbGet(CS_war_InfinityFbGet other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_war_InfinityFbGet Clone() {
      return new CS_war_InfinityFbGet(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_war_InfinityFbGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_war_InfinityFbGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_war_InfinityFbGet other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到无尽副本进度奖励
  /// </summary>
  public sealed partial class SC_war_InfinityFbGet : pb::IMessage<SC_war_InfinityFbGet> {
    private static readonly pb::MessageParser<SC_war_InfinityFbGet> _parser = new pb::MessageParser<SC_war_InfinityFbGet>(() => new SC_war_InfinityFbGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_war_InfinityFbGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbWar.PbWarReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbGet(SC_war_InfinityFbGet other) : this() {
      awardIds_ = other.awardIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_war_InfinityFbGet Clone() {
      return new SC_war_InfinityFbGet(this);
    }

    /// <summary>Field number for the "AwardIds" field.</summary>
    public const int AwardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_awardIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> awardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取奖励ids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AwardIds {
      get { return awardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_war_InfinityFbGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_war_InfinityFbGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!awardIds_.Equals(other.awardIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= awardIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awardIds_.WriteTo(output, _repeated_awardIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awardIds_.CalculateSize(_repeated_awardIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_war_InfinityFbGet other) {
      if (other == null) {
        return;
      }
      awardIds_.Add(other.awardIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            awardIds_.AddEntriesFrom(input, _repeated_awardIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
