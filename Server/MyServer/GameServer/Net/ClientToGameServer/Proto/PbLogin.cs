// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbLogin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbLogin {

  /// <summary>Holder for reflection information generated from PbLogin.proto</summary>
  public static partial class PbLoginReflection {

    #region Descriptor
    /// <summary>File descriptor for PbLogin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbLoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1QYkxvZ2luLnByb3RvEgdQYkxvZ2luIsQCCg9DU19sb2dpbl92ZXJpZnkS",
            "EgoKUGxhdGZvcm1JZBgBIAEoCRIuCghQbGF0Zm9ybRgCIAEoDjIcLlBiTG9n",
            "aW4uRW51bV9sb2dpbl9wbGF0Zm9ybRINCgVUb2tlbhgDIAEoCRIQCghTZXJ2",
            "ZXJJZBgEIAEoBRIRCglUaW1lc3RhbXAYBSABKAUSDAoEQ2hJZBgGIAEoCRIM",
            "CgRMYW5nGAcgASgFEisKCUxvZ2luVHlwZRgIIAEoDjIYLlBiTG9naW4uRW51",
            "bV9sb2dpbl90eXBlEhAKCERldmljZUlkGAkgASgJEg8KB0NoYW5uZWwYCiAB",
            "KAkSDwoHVmVyc2lvbhgLIAEoCRIQCghTZGtQYXlDaBgMIAEoCRIRCglJc1Jl",
            "TG9naW4YDSABKAgSFwoPU2VydmVyU3RhcnRUaW1lGA4gASgFItEBCg9TQ19s",
            "b2dpbl92ZXJpZnkSKwoGUmVzdWx0GAEgASgOMhsuUGJMb2dpbi5FbnVtX3Zl",
            "cmlmeV9yZXN1bHQSLgoIUGxhdGZvcm0YAiABKA4yHC5QYkxvZ2luLkVudW1f",
            "bG9naW5fcGxhdGZvcm0SEwoLRGVmYXVsdE5hbWUYAyABKAkSEgoKUGxhdGZv",
            "cm1JZBgEIAEoCRISCgpTZXJ2ZXJUaW1lGAUgASgFEhEKCUlzUmVMb2dpbhgG",
            "IAEoCBIRCglVVENPZmZzZXQYByABKAUi0wQKE1NDX2xvZ2luX3BsYXllcklu",
            "Zm8SCwoDU0lEGAEgASgFEgwKBE5hbWUYAiABKAkSDQoFTGV2ZWwYAyABKAUS",
            "CwoDRXhwGAQgASgFEgwKBEdvbGQYBSABKAMSDgoGVGlja2V0GAYgASgFEhQK",
            "DEtlZXBMb2dpbk51bRgHIAEoBRIOCgZSZWdEYXkYCCABKAUSCgoCSWQYCSAB",
            "KAkSEAoIUGZVc2VySWQYCiABKAkSDQoFUG93ZXIYCyABKAUSFQoNTmV4dEFk",
            "ZEFQVGltZRgMIAEoBRISCgpDcmVhdGVUaW1lGA0gASgFEhAKCFBheU1vbmV5",
            "GA4gASgFEhAKCExvZ2luRGF5GA8gASgFEhEKCUlzUmVMb2dpbhgQIAEoCBIT",
            "CgtJc1NlYXNvblZpcBgRIAEoCBIRCglTZWFzb25FeHAYEiABKAUSEAoIU2Vh",
            "c29uSWQYEyABKAUSEgoKRG93ZXJMZXZlbBgUIAMoBRIVCg1Ub3RhbERvd2Vy",
            "TnVtGBUgASgFEhYKDkxlZnREb3dlclBvaW50GBYgASgFEhEKCWxlZnRBZE51",
            "bRgXIAEoBRITCgtCdXlQb3dlck51bRgYIAEoBRIRCglDdXJGYlR5cGUYGSAB",
            "KAUSFQoNSXNGaW5pc2hHdWlkZRgaIAEoCBIVCg1TZWFzb25FbmRUaW1lGBsg",
            "ASgFEhIKClRvdGFsQWROdW0YHCABKAUSDAoER051bRgdIAEoBRINCgVHQU51",
            "bRgeIAEoBRIMCgRFTnVtGB8gASgFEg0KBUVBTnVtGCAgASgFIlAKDlNDX2xv",
            "Z2luX2VudGVyEhIKClNlcnZlclRpbWUYASABKAUSFwoPU2VydmVyU3RhcnRU",
            "aW1lGAIgASgFEhEKCVVUQ09mZnNldBgDIAEoBSI5ChBTQ19sb2dpbl9yZUxv",
            "Z2luEhIKClNlcnZlclRpbWUYASABKAUSEQoJVVRDT2Zmc2V0GAIgASgFImEK",
            "DUNTX2xvZ2luX2JpbmQSEgoKUGxhdGZvcm1JZBgBIAEoCRIPCgdBY2NvdW50",
            "GAIgASgJEisKCUxvZ2luVHlwZRgDIAEoDjIYLlBiTG9naW4uRW51bV9sb2dp",
            "bl90eXBlInsKDVNDX2xvZ2luX2JpbmQSKQoGUmVzdWx0GAEgASgOMhkuUGJM",
            "b2dpbi5FbnVtX2JpbmRfcmVzdWx0EhIKClBsYXRmb3JtSWQYAiABKAkSKwoJ",
            "TG9naW5UeXBlGAMgASgOMhguUGJMb2dpbi5FbnVtX2xvZ2luX3R5cGUqMQoT",
            "RW51bV9sb2dpbl9wbGF0Zm9ybRIQCgxMcEFjY291bnRQd2QQABIICgRMcEN5",
            "EAEqcwoSRW51bV92ZXJpZnlfcmVzdWx0Eg0KCVZyVW5rbm93bhAAEg0KCVZy",
            "U3VjY2VlZBABEg0KCVZyRmFpbHVyZRACEhMKD1ZyU2VydmVySWRFcnJvchAD",
            "Eg0KCVZyQ2hFcnJvchAEEgwKCFZyQmFubmVkEAUqbAoPRW51bV9sb2dpbl90",
            "eXBlEhAKDEx0QWNjb3VudFB3ZBAAEgoKBkx0TWFpbBABEg4KCkx0RmFjZWJv",
            "b2sQAhIMCghMdEdvb2dsZRADEgsKB0x0QXBwbGUQBBIQCgxMdEdhbWVDZW50",
            "ZXIQBSpcChBFbnVtX2JpbmRfcmVzdWx0Eg0KCUJyVW5rbm93bhAAEg0KCUJy",
            "U3VjY2VlZBABEg0KCUJyRmFpbHVyZRACEgwKCEJySWRVc2VkEAMSDQoJQnJD",
            "aEVycm9yEARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbLogin.Enum_login_platform), typeof(global::PbLogin.Enum_verify_result), typeof(global::PbLogin.Enum_login_type), typeof(global::PbLogin.Enum_bind_result), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.CS_login_verify), global::PbLogin.CS_login_verify.Parser, new[]{ "PlatformId", "Platform", "Token", "ServerId", "Timestamp", "ChId", "Lang", "LoginType", "DeviceId", "Channel", "Version", "SdkPayCh", "IsReLogin", "ServerStartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.SC_login_verify), global::PbLogin.SC_login_verify.Parser, new[]{ "Result", "Platform", "DefaultName", "PlatformId", "ServerTime", "IsReLogin", "UTCOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.SC_login_playerInfo), global::PbLogin.SC_login_playerInfo.Parser, new[]{ "SID", "Name", "Level", "Exp", "Gold", "Ticket", "KeepLoginNum", "RegDay", "Id", "PfUserId", "Power", "NextAddAPTime", "CreateTime", "PayMoney", "LoginDay", "IsReLogin", "IsSeasonVip", "SeasonExp", "SeasonId", "DowerLevel", "TotalDowerNum", "LeftDowerPoint", "LeftAdNum", "BuyPowerNum", "CurFbType", "IsFinishGuide", "SeasonEndTime", "TotalAdNum", "GNum", "GANum", "ENum", "EANum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.SC_login_enter), global::PbLogin.SC_login_enter.Parser, new[]{ "ServerTime", "ServerStartTime", "UTCOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.SC_login_reLogin), global::PbLogin.SC_login_reLogin.Parser, new[]{ "ServerTime", "UTCOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.CS_login_bind), global::PbLogin.CS_login_bind.Parser, new[]{ "PlatformId", "Account", "LoginType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbLogin.SC_login_bind), global::PbLogin.SC_login_bind.Parser, new[]{ "Result", "PlatformId", "LoginType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///平台登录方式
  /// </summary>
  public enum Enum_login_platform {
    /// <summary>
    ///账号密码登录
    /// </summary>
    [pbr::OriginalName("LpAccountPwd")] LpAccountPwd = 0,
    /// <summary>
    ///畅游
    /// </summary>
    [pbr::OriginalName("LpCy")] LpCy = 1,
  }

  /// <summary>
  ///登录验证结构枚举
  /// </summary>
  public enum Enum_verify_result {
    /// <summary>
    ///未知错误
    /// </summary>
    [pbr::OriginalName("VrUnknown")] VrUnknown = 0,
    /// <summary>
    ///登录成功
    /// </summary>
    [pbr::OriginalName("VrSucceed")] VrSucceed = 1,
    /// <summary>
    ///验证失败
    /// </summary>
    [pbr::OriginalName("VrFailure")] VrFailure = 2,
    /// <summary>
    ///服务器Id错误
    /// </summary>
    [pbr::OriginalName("VrServerIdError")] VrServerIdError = 3,
    /// <summary>
    ///渠道未开放
    /// </summary>
    [pbr::OriginalName("VrChError")] VrChError = 4,
    /// <summary>
    ///禁止登陆
    /// </summary>
    [pbr::OriginalName("VrBanned")] VrBanned = 5,
  }

  /// <summary>
  ///登录绑定类型
  /// </summary>
  public enum Enum_login_type {
    /// <summary>
    ///账号密码登录
    /// </summary>
    [pbr::OriginalName("LtAccountPwd")] LtAccountPwd = 0,
    /// <summary>
    ///邮箱登录
    /// </summary>
    [pbr::OriginalName("LtMail")] LtMail = 1,
    /// <summary>
    ///facebook登录
    /// </summary>
    [pbr::OriginalName("LtFacebook")] LtFacebook = 2,
    /// <summary>
    ///google登录
    /// </summary>
    [pbr::OriginalName("LtGoogle")] LtGoogle = 3,
    /// <summary>
    ///apple登录
    /// </summary>
    [pbr::OriginalName("LtApple")] LtApple = 4,
    /// <summary>
    ///apple gamecenter
    /// </summary>
    [pbr::OriginalName("LtGameCenter")] LtGameCenter = 5,
  }

  /// <summary>
  ///绑定验证结构枚举
  /// </summary>
  public enum Enum_bind_result {
    /// <summary>
    ///未知错误
    /// </summary>
    [pbr::OriginalName("BrUnknown")] BrUnknown = 0,
    /// <summary>
    ///绑定成功
    /// </summary>
    [pbr::OriginalName("BrSucceed")] BrSucceed = 1,
    /// <summary>
    ///验证失败
    /// </summary>
    [pbr::OriginalName("BrFailure")] BrFailure = 2,
    /// <summary>
    ///Id已用于其他账号
    /// </summary>
    [pbr::OriginalName("BrIdUsed")] BrIdUsed = 3,
    /// <summary>
    ///渠道未开放
    /// </summary>
    [pbr::OriginalName("BrChError")] BrChError = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///请求登录验证
  /// </summary>
  public sealed partial class CS_login_verify : pb::IMessage<CS_login_verify> {
    private static readonly pb::MessageParser<CS_login_verify> _parser = new pb::MessageParser<CS_login_verify>(() => new CS_login_verify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_login_verify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_login_verify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_login_verify(CS_login_verify other) : this() {
      platformId_ = other.platformId_;
      platform_ = other.platform_;
      token_ = other.token_;
      serverId_ = other.serverId_;
      timestamp_ = other.timestamp_;
      chId_ = other.chId_;
      lang_ = other.lang_;
      loginType_ = other.loginType_;
      deviceId_ = other.deviceId_;
      channel_ = other.channel_;
      version_ = other.version_;
      sdkPayCh_ = other.sdkPayCh_;
      isReLogin_ = other.isReLogin_;
      serverStartTime_ = other.serverStartTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_login_verify Clone() {
      return new CS_login_verify(this);
    }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 1;
    private string platformId_ = "";
    /// <summary>
    ///平台用户唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private global::PbLogin.Enum_login_platform platform_ = 0;
    /// <summary>
    ///平台类型 0账密登录 1畅游sdk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_platform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///LoginServer生成的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private int serverId_;
    /// <summary>
    ///服务器Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private int timestamp_;
    /// <summary>
    ///LoginServer登录时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "ChId" field.</summary>
    public const int ChIdFieldNumber = 6;
    private string chId_ = "";
    /// <summary>
    ///渠道Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChId {
      get { return chId_; }
      set {
        chId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Lang" field.</summary>
    public const int LangFieldNumber = 7;
    private int lang_;
    /// <summary>
    ///登录选择的默认语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lang {
      get { return lang_; }
      set {
        lang_ = value;
      }
    }

    /// <summary>Field number for the "LoginType" field.</summary>
    public const int LoginTypeFieldNumber = 8;
    private global::PbLogin.Enum_login_type loginType_ = 0;
    /// <summary>
    ///登录类型 0账密 1游客 2facebook 3Apple
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_type LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 9;
    private string deviceId_ = "";
    /// <summary>
    ///设备id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 10;
    private string channel_ = "";
    /// <summary>
    ///sdk推广渠道号 10位（getMediaChannelId）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 11;
    private string version_ = "";
    /// <summary>
    ///客户端版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SdkPayCh" field.</summary>
    public const int SdkPayChFieldNumber = 12;
    private string sdkPayCh_ = "";
    /// <summary>
    ///sdk充值渠道号 4位（getChannel）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkPayCh {
      get { return sdkPayCh_; }
      set {
        sdkPayCh_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsReLogin" field.</summary>
    public const int IsReLoginFieldNumber = 13;
    private bool isReLogin_;
    /// <summary>
    ///是否为重登
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReLogin {
      get { return isReLogin_; }
      set {
        isReLogin_ = value;
      }
    }

    /// <summary>Field number for the "ServerStartTime" field.</summary>
    public const int ServerStartTimeFieldNumber = 14;
    private int serverStartTime_;
    /// <summary>
    ///重登时带到服务器验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerStartTime {
      get { return serverStartTime_; }
      set {
        serverStartTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_login_verify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_login_verify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlatformId != other.PlatformId) return false;
      if (Platform != other.Platform) return false;
      if (Token != other.Token) return false;
      if (ServerId != other.ServerId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ChId != other.ChId) return false;
      if (Lang != other.Lang) return false;
      if (LoginType != other.LoginType) return false;
      if (DeviceId != other.DeviceId) return false;
      if (Channel != other.Channel) return false;
      if (Version != other.Version) return false;
      if (SdkPayCh != other.SdkPayCh) return false;
      if (IsReLogin != other.IsReLogin) return false;
      if (ServerStartTime != other.ServerStartTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ChId.Length != 0) hash ^= ChId.GetHashCode();
      if (Lang != 0) hash ^= Lang.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (SdkPayCh.Length != 0) hash ^= SdkPayCh.GetHashCode();
      if (IsReLogin != false) hash ^= IsReLogin.GetHashCode();
      if (ServerStartTime != 0) hash ^= ServerStartTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlatformId);
      }
      if (Platform != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Platform);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Timestamp);
      }
      if (ChId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ChId);
      }
      if (Lang != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Lang);
      }
      if (LoginType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) LoginType);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DeviceId);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Channel);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Version);
      }
      if (SdkPayCh.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SdkPayCh);
      }
      if (IsReLogin != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsReLogin);
      }
      if (ServerStartTime != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ServerStartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (ChId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChId);
      }
      if (Lang != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lang);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (SdkPayCh.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkPayCh);
      }
      if (IsReLogin != false) {
        size += 1 + 1;
      }
      if (ServerStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerStartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_login_verify other) {
      if (other == null) {
        return;
      }
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ChId.Length != 0) {
        ChId = other.ChId;
      }
      if (other.Lang != 0) {
        Lang = other.Lang;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.SdkPayCh.Length != 0) {
        SdkPayCh = other.SdkPayCh;
      }
      if (other.IsReLogin != false) {
        IsReLogin = other.IsReLogin;
      }
      if (other.ServerStartTime != 0) {
        ServerStartTime = other.ServerStartTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlatformId = input.ReadString();
            break;
          }
          case 16: {
            platform_ = (global::PbLogin.Enum_login_platform) input.ReadEnum();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 40: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 50: {
            ChId = input.ReadString();
            break;
          }
          case 56: {
            Lang = input.ReadInt32();
            break;
          }
          case 64: {
            loginType_ = (global::PbLogin.Enum_login_type) input.ReadEnum();
            break;
          }
          case 74: {
            DeviceId = input.ReadString();
            break;
          }
          case 82: {
            Channel = input.ReadString();
            break;
          }
          case 90: {
            Version = input.ReadString();
            break;
          }
          case 98: {
            SdkPayCh = input.ReadString();
            break;
          }
          case 104: {
            IsReLogin = input.ReadBool();
            break;
          }
          case 112: {
            ServerStartTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到登录验证
  /// </summary>
  public sealed partial class SC_login_verify : pb::IMessage<SC_login_verify> {
    private static readonly pb::MessageParser<SC_login_verify> _parser = new pb::MessageParser<SC_login_verify>(() => new SC_login_verify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_verify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_verify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_verify(SC_login_verify other) : this() {
      result_ = other.result_;
      platform_ = other.platform_;
      defaultName_ = other.defaultName_;
      platformId_ = other.platformId_;
      serverTime_ = other.serverTime_;
      isReLogin_ = other.isReLogin_;
      uTCOffset_ = other.uTCOffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_verify Clone() {
      return new SC_login_verify(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbLogin.Enum_verify_result result_ = 0;
    /// <summary>
    ///验证结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_verify_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private global::PbLogin.Enum_login_platform platform_ = 0;
    /// <summary>
    ///平台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_platform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "DefaultName" field.</summary>
    public const int DefaultNameFieldNumber = 3;
    private string defaultName_ = "";
    /// <summary>
    ///验证成功，返回平台默认名字	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultName {
      get { return defaultName_; }
      set {
        defaultName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 4;
    private string platformId_ = "";
    /// <summary>
    ///验证成功，返回平台用户的唯一Id		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerTime" field.</summary>
    public const int ServerTimeFieldNumber = 5;
    private int serverTime_;
    /// <summary>
    ///服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "IsReLogin" field.</summary>
    public const int IsReLoginFieldNumber = 6;
    private bool isReLogin_;
    /// <summary>
    ///是否为重登
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReLogin {
      get { return isReLogin_; }
      set {
        isReLogin_ = value;
      }
    }

    /// <summary>Field number for the "UTCOffset" field.</summary>
    public const int UTCOffsetFieldNumber = 7;
    private int uTCOffset_;
    /// <summary>
    ///UTC时间偏移量，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UTCOffset {
      get { return uTCOffset_; }
      set {
        uTCOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_login_verify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_login_verify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Platform != other.Platform) return false;
      if (DefaultName != other.DefaultName) return false;
      if (PlatformId != other.PlatformId) return false;
      if (ServerTime != other.ServerTime) return false;
      if (IsReLogin != other.IsReLogin) return false;
      if (UTCOffset != other.UTCOffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      if (DefaultName.Length != 0) hash ^= DefaultName.GetHashCode();
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (ServerTime != 0) hash ^= ServerTime.GetHashCode();
      if (IsReLogin != false) hash ^= IsReLogin.GetHashCode();
      if (UTCOffset != 0) hash ^= UTCOffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Platform != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Platform);
      }
      if (DefaultName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DefaultName);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlatformId);
      }
      if (ServerTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerTime);
      }
      if (IsReLogin != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsReLogin);
      }
      if (UTCOffset != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UTCOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (DefaultName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultName);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
      }
      if (IsReLogin != false) {
        size += 1 + 1;
      }
      if (UTCOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UTCOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_login_verify other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
      if (other.DefaultName.Length != 0) {
        DefaultName = other.DefaultName;
      }
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.ServerTime != 0) {
        ServerTime = other.ServerTime;
      }
      if (other.IsReLogin != false) {
        IsReLogin = other.IsReLogin;
      }
      if (other.UTCOffset != 0) {
        UTCOffset = other.UTCOffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbLogin.Enum_verify_result) input.ReadEnum();
            break;
          }
          case 16: {
            platform_ = (global::PbLogin.Enum_login_platform) input.ReadEnum();
            break;
          }
          case 26: {
            DefaultName = input.ReadString();
            break;
          }
          case 34: {
            PlatformId = input.ReadString();
            break;
          }
          case 40: {
            ServerTime = input.ReadInt32();
            break;
          }
          case 48: {
            IsReLogin = input.ReadBool();
            break;
          }
          case 56: {
            UTCOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到登录成功或创角成功返回角色信息
  /// </summary>
  public sealed partial class SC_login_playerInfo : pb::IMessage<SC_login_playerInfo> {
    private static readonly pb::MessageParser<SC_login_playerInfo> _parser = new pb::MessageParser<SC_login_playerInfo>(() => new SC_login_playerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_playerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_playerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_playerInfo(SC_login_playerInfo other) : this() {
      sID_ = other.sID_;
      name_ = other.name_;
      level_ = other.level_;
      exp_ = other.exp_;
      gold_ = other.gold_;
      ticket_ = other.ticket_;
      keepLoginNum_ = other.keepLoginNum_;
      regDay_ = other.regDay_;
      id_ = other.id_;
      pfUserId_ = other.pfUserId_;
      power_ = other.power_;
      nextAddAPTime_ = other.nextAddAPTime_;
      createTime_ = other.createTime_;
      payMoney_ = other.payMoney_;
      loginDay_ = other.loginDay_;
      isReLogin_ = other.isReLogin_;
      isSeasonVip_ = other.isSeasonVip_;
      seasonExp_ = other.seasonExp_;
      seasonId_ = other.seasonId_;
      dowerLevel_ = other.dowerLevel_.Clone();
      totalDowerNum_ = other.totalDowerNum_;
      leftDowerPoint_ = other.leftDowerPoint_;
      leftAdNum_ = other.leftAdNum_;
      buyPowerNum_ = other.buyPowerNum_;
      curFbType_ = other.curFbType_;
      isFinishGuide_ = other.isFinishGuide_;
      seasonEndTime_ = other.seasonEndTime_;
      totalAdNum_ = other.totalAdNum_;
      gNum_ = other.gNum_;
      gANum_ = other.gANum_;
      eNum_ = other.eNum_;
      eANum_ = other.eANum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_playerInfo Clone() {
      return new SC_login_playerInfo(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///角色SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 5;
    private long gold_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Ticket" field.</summary>
    public const int TicketFieldNumber = 6;
    private int ticket_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "KeepLoginNum" field.</summary>
    public const int KeepLoginNumFieldNumber = 7;
    private int keepLoginNum_;
    /// <summary>
    ///连续登录次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepLoginNum {
      get { return keepLoginNum_; }
      set {
        keepLoginNum_ = value;
      }
    }

    /// <summary>Field number for the "RegDay" field.</summary>
    public const int RegDayFieldNumber = 8;
    private int regDay_;
    /// <summary>
    ///注册天数(可做登录天数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegDay {
      get { return regDay_; }
      set {
        regDay_ = value;
      }
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 9;
    private string id_ = "";
    /// <summary>
    ///玩家唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PfUserId" field.</summary>
    public const int PfUserIdFieldNumber = 10;
    private string pfUserId_ = "";
    /// <summary>
    ///平台的用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PfUserId {
      get { return pfUserId_; }
      set {
        pfUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 11;
    private int power_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "NextAddAPTime" field.</summary>
    public const int NextAddAPTimeFieldNumber = 12;
    private int nextAddAPTime_;
    /// <summary>
    ///下次恢复体力时间戳(没有为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextAddAPTime {
      get { return nextAddAPTime_; }
      set {
        nextAddAPTime_ = value;
      }
    }

    /// <summary>Field number for the "CreateTime" field.</summary>
    public const int CreateTimeFieldNumber = 13;
    private int createTime_;
    /// <summary>
    ///创角时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "PayMoney" field.</summary>
    public const int PayMoneyFieldNumber = 14;
    private int payMoney_;
    /// <summary>
    ///累计充值金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayMoney {
      get { return payMoney_; }
      set {
        payMoney_ = value;
      }
    }

    /// <summary>Field number for the "LoginDay" field.</summary>
    public const int LoginDayFieldNumber = 15;
    private int loginDay_;
    /// <summary>
    ///累计登录天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginDay {
      get { return loginDay_; }
      set {
        loginDay_ = value;
      }
    }

    /// <summary>Field number for the "IsReLogin" field.</summary>
    public const int IsReLoginFieldNumber = 16;
    private bool isReLogin_;
    /// <summary>
    ///是否为重登数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReLogin {
      get { return isReLogin_; }
      set {
        isReLogin_ = value;
      }
    }

    /// <summary>Field number for the "IsSeasonVip" field.</summary>
    public const int IsSeasonVipFieldNumber = 17;
    private bool isSeasonVip_;
    /// <summary>
    ///当前赛季是否购买令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSeasonVip {
      get { return isSeasonVip_; }
      set {
        isSeasonVip_ = value;
      }
    }

    /// <summary>Field number for the "SeasonExp" field.</summary>
    public const int SeasonExpFieldNumber = 18;
    private int seasonExp_;
    /// <summary>
    ///令牌经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonExp {
      get { return seasonExp_; }
      set {
        seasonExp_ = value;
      }
    }

    /// <summary>Field number for the "SeasonId" field.</summary>
    public const int SeasonIdFieldNumber = 19;
    private int seasonId_;
    /// <summary>
    ///赛季id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "DowerLevel" field.</summary>
    public const int DowerLevelFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_dowerLevel_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> dowerLevel_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前天赋等级(9个)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DowerLevel {
      get { return dowerLevel_; }
    }

    /// <summary>Field number for the "TotalDowerNum" field.</summary>
    public const int TotalDowerNumFieldNumber = 21;
    private int totalDowerNum_;
    /// <summary>
    ///累计升级天赋次数（用于+1 *系数计算金币消耗）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDowerNum {
      get { return totalDowerNum_; }
      set {
        totalDowerNum_ = value;
      }
    }

    /// <summary>Field number for the "LeftDowerPoint" field.</summary>
    public const int LeftDowerPointFieldNumber = 22;
    private int leftDowerPoint_;
    /// <summary>
    ///剩余可用天赋点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftDowerPoint {
      get { return leftDowerPoint_; }
      set {
        leftDowerPoint_ = value;
      }
    }

    /// <summary>Field number for the "leftAdNum" field.</summary>
    public const int LeftAdNumFieldNumber = 23;
    private int leftAdNum_;
    /// <summary>
    ///当日获取体力剩余广告次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftAdNum {
      get { return leftAdNum_; }
      set {
        leftAdNum_ = value;
      }
    }

    /// <summary>Field number for the "BuyPowerNum" field.</summary>
    public const int BuyPowerNumFieldNumber = 24;
    private int buyPowerNum_;
    /// <summary>
    ///当日购买体力次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyPowerNum {
      get { return buyPowerNum_; }
      set {
        buyPowerNum_ = value;
      }
    }

    /// <summary>Field number for the "CurFbType" field.</summary>
    public const int CurFbTypeFieldNumber = 25;
    private int curFbType_;
    /// <summary>
    ///当前关卡类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFbType {
      get { return curFbType_; }
      set {
        curFbType_ = value;
      }
    }

    /// <summary>Field number for the "IsFinishGuide" field.</summary>
    public const int IsFinishGuideFieldNumber = 26;
    private bool isFinishGuide_;
    /// <summary>
    ///是否完成新手关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinishGuide {
      get { return isFinishGuide_; }
      set {
        isFinishGuide_ = value;
      }
    }

    /// <summary>Field number for the "SeasonEndTime" field.</summary>
    public const int SeasonEndTimeFieldNumber = 27;
    private int seasonEndTime_;
    /// <summary>
    ///赛季结束时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonEndTime {
      get { return seasonEndTime_; }
      set {
        seasonEndTime_ = value;
      }
    }

    /// <summary>Field number for the "TotalAdNum" field.</summary>
    public const int TotalAdNumFieldNumber = 28;
    private int totalAdNum_;
    /// <summary>
    ///累计广告次数（用于令牌显示）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalAdNum {
      get { return totalAdNum_; }
      set {
        totalAdNum_ = value;
      }
    }

    /// <summary>Field number for the "GNum" field.</summary>
    public const int GNumFieldNumber = 29;
    private int gNum_;
    /// <summary>
    ///金币副本今日剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GNum {
      get { return gNum_; }
      set {
        gNum_ = value;
      }
    }

    /// <summary>Field number for the "GANum" field.</summary>
    public const int GANumFieldNumber = 30;
    private int gANum_;
    /// <summary>
    ///金币副本今日广告剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GANum {
      get { return gANum_; }
      set {
        gANum_ = value;
      }
    }

    /// <summary>Field number for the "ENum" field.</summary>
    public const int ENumFieldNumber = 31;
    private int eNum_;
    /// <summary>
    ///装备副本今日剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ENum {
      get { return eNum_; }
      set {
        eNum_ = value;
      }
    }

    /// <summary>Field number for the "EANum" field.</summary>
    public const int EANumFieldNumber = 32;
    private int eANum_;
    /// <summary>
    ///装备副本今日广告剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EANum {
      get { return eANum_; }
      set {
        eANum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_login_playerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_login_playerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Gold != other.Gold) return false;
      if (Ticket != other.Ticket) return false;
      if (KeepLoginNum != other.KeepLoginNum) return false;
      if (RegDay != other.RegDay) return false;
      if (Id != other.Id) return false;
      if (PfUserId != other.PfUserId) return false;
      if (Power != other.Power) return false;
      if (NextAddAPTime != other.NextAddAPTime) return false;
      if (CreateTime != other.CreateTime) return false;
      if (PayMoney != other.PayMoney) return false;
      if (LoginDay != other.LoginDay) return false;
      if (IsReLogin != other.IsReLogin) return false;
      if (IsSeasonVip != other.IsSeasonVip) return false;
      if (SeasonExp != other.SeasonExp) return false;
      if (SeasonId != other.SeasonId) return false;
      if(!dowerLevel_.Equals(other.dowerLevel_)) return false;
      if (TotalDowerNum != other.TotalDowerNum) return false;
      if (LeftDowerPoint != other.LeftDowerPoint) return false;
      if (LeftAdNum != other.LeftAdNum) return false;
      if (BuyPowerNum != other.BuyPowerNum) return false;
      if (CurFbType != other.CurFbType) return false;
      if (IsFinishGuide != other.IsFinishGuide) return false;
      if (SeasonEndTime != other.SeasonEndTime) return false;
      if (TotalAdNum != other.TotalAdNum) return false;
      if (GNum != other.GNum) return false;
      if (GANum != other.GANum) return false;
      if (ENum != other.ENum) return false;
      if (EANum != other.EANum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (KeepLoginNum != 0) hash ^= KeepLoginNum.GetHashCode();
      if (RegDay != 0) hash ^= RegDay.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PfUserId.Length != 0) hash ^= PfUserId.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (NextAddAPTime != 0) hash ^= NextAddAPTime.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (PayMoney != 0) hash ^= PayMoney.GetHashCode();
      if (LoginDay != 0) hash ^= LoginDay.GetHashCode();
      if (IsReLogin != false) hash ^= IsReLogin.GetHashCode();
      if (IsSeasonVip != false) hash ^= IsSeasonVip.GetHashCode();
      if (SeasonExp != 0) hash ^= SeasonExp.GetHashCode();
      if (SeasonId != 0) hash ^= SeasonId.GetHashCode();
      hash ^= dowerLevel_.GetHashCode();
      if (TotalDowerNum != 0) hash ^= TotalDowerNum.GetHashCode();
      if (LeftDowerPoint != 0) hash ^= LeftDowerPoint.GetHashCode();
      if (LeftAdNum != 0) hash ^= LeftAdNum.GetHashCode();
      if (BuyPowerNum != 0) hash ^= BuyPowerNum.GetHashCode();
      if (CurFbType != 0) hash ^= CurFbType.GetHashCode();
      if (IsFinishGuide != false) hash ^= IsFinishGuide.GetHashCode();
      if (SeasonEndTime != 0) hash ^= SeasonEndTime.GetHashCode();
      if (TotalAdNum != 0) hash ^= TotalAdNum.GetHashCode();
      if (GNum != 0) hash ^= GNum.GetHashCode();
      if (GANum != 0) hash ^= GANum.GetHashCode();
      if (ENum != 0) hash ^= ENum.GetHashCode();
      if (EANum != 0) hash ^= EANum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (Gold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Gold);
      }
      if (Ticket != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Ticket);
      }
      if (KeepLoginNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(KeepLoginNum);
      }
      if (RegDay != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RegDay);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Id);
      }
      if (PfUserId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PfUserId);
      }
      if (Power != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Power);
      }
      if (NextAddAPTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NextAddAPTime);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CreateTime);
      }
      if (PayMoney != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PayMoney);
      }
      if (LoginDay != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(LoginDay);
      }
      if (IsReLogin != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsReLogin);
      }
      if (IsSeasonVip != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsSeasonVip);
      }
      if (SeasonExp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SeasonExp);
      }
      if (SeasonId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SeasonId);
      }
      dowerLevel_.WriteTo(output, _repeated_dowerLevel_codec);
      if (TotalDowerNum != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(TotalDowerNum);
      }
      if (LeftDowerPoint != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(LeftDowerPoint);
      }
      if (LeftAdNum != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(LeftAdNum);
      }
      if (BuyPowerNum != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BuyPowerNum);
      }
      if (CurFbType != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CurFbType);
      }
      if (IsFinishGuide != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsFinishGuide);
      }
      if (SeasonEndTime != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SeasonEndTime);
      }
      if (TotalAdNum != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(TotalAdNum);
      }
      if (GNum != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GNum);
      }
      if (GANum != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(GANum);
      }
      if (ENum != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ENum);
      }
      if (EANum != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(EANum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (KeepLoginNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepLoginNum);
      }
      if (RegDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegDay);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PfUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PfUserId);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (NextAddAPTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextAddAPTime);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTime);
      }
      if (PayMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayMoney);
      }
      if (LoginDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginDay);
      }
      if (IsReLogin != false) {
        size += 2 + 1;
      }
      if (IsSeasonVip != false) {
        size += 2 + 1;
      }
      if (SeasonExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeasonExp);
      }
      if (SeasonId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeasonId);
      }
      size += dowerLevel_.CalculateSize(_repeated_dowerLevel_codec);
      if (TotalDowerNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalDowerNum);
      }
      if (LeftDowerPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeftDowerPoint);
      }
      if (LeftAdNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeftAdNum);
      }
      if (BuyPowerNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuyPowerNum);
      }
      if (CurFbType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurFbType);
      }
      if (IsFinishGuide != false) {
        size += 2 + 1;
      }
      if (SeasonEndTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeasonEndTime);
      }
      if (TotalAdNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalAdNum);
      }
      if (GNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GNum);
      }
      if (GANum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GANum);
      }
      if (ENum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ENum);
      }
      if (EANum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EANum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_login_playerInfo other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      if (other.KeepLoginNum != 0) {
        KeepLoginNum = other.KeepLoginNum;
      }
      if (other.RegDay != 0) {
        RegDay = other.RegDay;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PfUserId.Length != 0) {
        PfUserId = other.PfUserId;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.NextAddAPTime != 0) {
        NextAddAPTime = other.NextAddAPTime;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.PayMoney != 0) {
        PayMoney = other.PayMoney;
      }
      if (other.LoginDay != 0) {
        LoginDay = other.LoginDay;
      }
      if (other.IsReLogin != false) {
        IsReLogin = other.IsReLogin;
      }
      if (other.IsSeasonVip != false) {
        IsSeasonVip = other.IsSeasonVip;
      }
      if (other.SeasonExp != 0) {
        SeasonExp = other.SeasonExp;
      }
      if (other.SeasonId != 0) {
        SeasonId = other.SeasonId;
      }
      dowerLevel_.Add(other.dowerLevel_);
      if (other.TotalDowerNum != 0) {
        TotalDowerNum = other.TotalDowerNum;
      }
      if (other.LeftDowerPoint != 0) {
        LeftDowerPoint = other.LeftDowerPoint;
      }
      if (other.LeftAdNum != 0) {
        LeftAdNum = other.LeftAdNum;
      }
      if (other.BuyPowerNum != 0) {
        BuyPowerNum = other.BuyPowerNum;
      }
      if (other.CurFbType != 0) {
        CurFbType = other.CurFbType;
      }
      if (other.IsFinishGuide != false) {
        IsFinishGuide = other.IsFinishGuide;
      }
      if (other.SeasonEndTime != 0) {
        SeasonEndTime = other.SeasonEndTime;
      }
      if (other.TotalAdNum != 0) {
        TotalAdNum = other.TotalAdNum;
      }
      if (other.GNum != 0) {
        GNum = other.GNum;
      }
      if (other.GANum != 0) {
        GANum = other.GANum;
      }
      if (other.ENum != 0) {
        ENum = other.ENum;
      }
      if (other.EANum != 0) {
        EANum = other.EANum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            Gold = input.ReadInt64();
            break;
          }
          case 48: {
            Ticket = input.ReadInt32();
            break;
          }
          case 56: {
            KeepLoginNum = input.ReadInt32();
            break;
          }
          case 64: {
            RegDay = input.ReadInt32();
            break;
          }
          case 74: {
            Id = input.ReadString();
            break;
          }
          case 82: {
            PfUserId = input.ReadString();
            break;
          }
          case 88: {
            Power = input.ReadInt32();
            break;
          }
          case 96: {
            NextAddAPTime = input.ReadInt32();
            break;
          }
          case 104: {
            CreateTime = input.ReadInt32();
            break;
          }
          case 112: {
            PayMoney = input.ReadInt32();
            break;
          }
          case 120: {
            LoginDay = input.ReadInt32();
            break;
          }
          case 128: {
            IsReLogin = input.ReadBool();
            break;
          }
          case 136: {
            IsSeasonVip = input.ReadBool();
            break;
          }
          case 144: {
            SeasonExp = input.ReadInt32();
            break;
          }
          case 152: {
            SeasonId = input.ReadInt32();
            break;
          }
          case 162:
          case 160: {
            dowerLevel_.AddEntriesFrom(input, _repeated_dowerLevel_codec);
            break;
          }
          case 168: {
            TotalDowerNum = input.ReadInt32();
            break;
          }
          case 176: {
            LeftDowerPoint = input.ReadInt32();
            break;
          }
          case 184: {
            LeftAdNum = input.ReadInt32();
            break;
          }
          case 192: {
            BuyPowerNum = input.ReadInt32();
            break;
          }
          case 200: {
            CurFbType = input.ReadInt32();
            break;
          }
          case 208: {
            IsFinishGuide = input.ReadBool();
            break;
          }
          case 216: {
            SeasonEndTime = input.ReadInt32();
            break;
          }
          case 224: {
            TotalAdNum = input.ReadInt32();
            break;
          }
          case 232: {
            GNum = input.ReadInt32();
            break;
          }
          case 240: {
            GANum = input.ReadInt32();
            break;
          }
          case 248: {
            ENum = input.ReadInt32();
            break;
          }
          case 256: {
            EANum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到服务器通知客户端进入游戏,进入游戏必要数据发送完成
  /// </summary>
  public sealed partial class SC_login_enter : pb::IMessage<SC_login_enter> {
    private static readonly pb::MessageParser<SC_login_enter> _parser = new pb::MessageParser<SC_login_enter>(() => new SC_login_enter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_enter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_enter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_enter(SC_login_enter other) : this() {
      serverTime_ = other.serverTime_;
      serverStartTime_ = other.serverStartTime_;
      uTCOffset_ = other.uTCOffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_enter Clone() {
      return new SC_login_enter(this);
    }

    /// <summary>Field number for the "ServerTime" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private int serverTime_;
    /// <summary>
    ///服务器当前时间截，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "ServerStartTime" field.</summary>
    public const int ServerStartTimeFieldNumber = 2;
    private int serverStartTime_;
    /// <summary>
    ///服务器启动时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerStartTime {
      get { return serverStartTime_; }
      set {
        serverStartTime_ = value;
      }
    }

    /// <summary>Field number for the "UTCOffset" field.</summary>
    public const int UTCOffsetFieldNumber = 3;
    private int uTCOffset_;
    /// <summary>
    ///UTC时间偏移量，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UTCOffset {
      get { return uTCOffset_; }
      set {
        uTCOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_login_enter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_login_enter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTime != other.ServerTime) return false;
      if (ServerStartTime != other.ServerStartTime) return false;
      if (UTCOffset != other.UTCOffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTime != 0) hash ^= ServerTime.GetHashCode();
      if (ServerStartTime != 0) hash ^= ServerStartTime.GetHashCode();
      if (UTCOffset != 0) hash ^= UTCOffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerTime);
      }
      if (ServerStartTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerStartTime);
      }
      if (UTCOffset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UTCOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
      }
      if (ServerStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerStartTime);
      }
      if (UTCOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UTCOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_login_enter other) {
      if (other == null) {
        return;
      }
      if (other.ServerTime != 0) {
        ServerTime = other.ServerTime;
      }
      if (other.ServerStartTime != 0) {
        ServerStartTime = other.ServerStartTime;
      }
      if (other.UTCOffset != 0) {
        UTCOffset = other.UTCOffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadInt32();
            break;
          }
          case 16: {
            ServerStartTime = input.ReadInt32();
            break;
          }
          case 24: {
            UTCOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重登后返回的数据
  /// </summary>
  public sealed partial class SC_login_reLogin : pb::IMessage<SC_login_reLogin> {
    private static readonly pb::MessageParser<SC_login_reLogin> _parser = new pb::MessageParser<SC_login_reLogin>(() => new SC_login_reLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_reLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_reLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_reLogin(SC_login_reLogin other) : this() {
      serverTime_ = other.serverTime_;
      uTCOffset_ = other.uTCOffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_reLogin Clone() {
      return new SC_login_reLogin(this);
    }

    /// <summary>Field number for the "ServerTime" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private int serverTime_;
    /// <summary>
    ///服务器当前时间截，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "UTCOffset" field.</summary>
    public const int UTCOffsetFieldNumber = 2;
    private int uTCOffset_;
    /// <summary>
    ///UTC时间偏移量，秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UTCOffset {
      get { return uTCOffset_; }
      set {
        uTCOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_login_reLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_login_reLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTime != other.ServerTime) return false;
      if (UTCOffset != other.UTCOffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTime != 0) hash ^= ServerTime.GetHashCode();
      if (UTCOffset != 0) hash ^= UTCOffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerTime);
      }
      if (UTCOffset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UTCOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
      }
      if (UTCOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UTCOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_login_reLogin other) {
      if (other == null) {
        return;
      }
      if (other.ServerTime != 0) {
        ServerTime = other.ServerTime;
      }
      if (other.UTCOffset != 0) {
        UTCOffset = other.UTCOffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadInt32();
            break;
          }
          case 16: {
            UTCOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求游客绑定
  /// </summary>
  public sealed partial class CS_login_bind : pb::IMessage<CS_login_bind> {
    private static readonly pb::MessageParser<CS_login_bind> _parser = new pb::MessageParser<CS_login_bind>(() => new CS_login_bind());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_login_bind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_login_bind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_login_bind(CS_login_bind other) : this() {
      platformId_ = other.platformId_;
      account_ = other.account_;
      loginType_ = other.loginType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_login_bind Clone() {
      return new CS_login_bind(this);
    }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 1;
    private string platformId_ = "";
    /// <summary>
    ///平台用户唯一Id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///平台返回账号Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginType" field.</summary>
    public const int LoginTypeFieldNumber = 3;
    private global::PbLogin.Enum_login_type loginType_ = 0;
    /// <summary>
    ///登录类型 1邮箱 2facebook 3google
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_type LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_login_bind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_login_bind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlatformId != other.PlatformId) return false;
      if (Account != other.Account) return false;
      if (LoginType != other.LoginType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlatformId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (LoginType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LoginType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_login_bind other) {
      if (other == null) {
        return;
      }
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlatformId = input.ReadString();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 24: {
            loginType_ = (global::PbLogin.Enum_login_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到游客绑定
  /// </summary>
  public sealed partial class SC_login_bind : pb::IMessage<SC_login_bind> {
    private static readonly pb::MessageParser<SC_login_bind> _parser = new pb::MessageParser<SC_login_bind>(() => new SC_login_bind());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_login_bind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbLogin.PbLoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_bind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_bind(SC_login_bind other) : this() {
      result_ = other.result_;
      platformId_ = other.platformId_;
      loginType_ = other.loginType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_login_bind Clone() {
      return new SC_login_bind(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbLogin.Enum_bind_result result_ = 0;
    /// <summary>
    ///验证结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_bind_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "PlatformId" field.</summary>
    public const int PlatformIdFieldNumber = 2;
    private string platformId_ = "";
    /// <summary>
    ///验证成功，返回平台用户的唯一Id		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginType" field.</summary>
    public const int LoginTypeFieldNumber = 3;
    private global::PbLogin.Enum_login_type loginType_ = 0;
    /// <summary>
    ///登录类型 1邮箱 2facebook 3google
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbLogin.Enum_login_type LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_login_bind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_login_bind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (PlatformId != other.PlatformId) return false;
      if (LoginType != other.LoginType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlatformId);
      }
      if (LoginType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LoginType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_login_bind other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbLogin.Enum_bind_result) input.ReadEnum();
            break;
          }
          case 18: {
            PlatformId = input.ReadString();
            break;
          }
          case 24: {
            loginType_ = (global::PbLogin.Enum_login_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
