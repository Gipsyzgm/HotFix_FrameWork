// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbPlayer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbPlayer {

  /// <summary>Holder for reflection information generated from PbPlayer.proto</summary>
  public static partial class PbPlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for PbPlayer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbPlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5QYlBsYXllci5wcm90bxIIUGJQbGF5ZXIaC1BiQ29tLnByb3RvIs8BChNT",
            "Q19wbGF5ZXJfcmVzZXREYXRhEhQKDEtlZXBMb2dpbk51bRgBIAEoBRIOCgZS",
            "ZWdEYXkYAiABKAUSDQoFTUNEYXkYAyABKAUSDwoHSXNHZXRNQxgEIAEoCBIQ",
            "CghMb2dpbkRheRgFIAEoBRIRCglMZWZ0QWROdW0YBiABKAUSEwoLQnV5UG93",
            "ZXJOdW0YByABKAUSDAoER051bRgIIAEoBRINCgVHQU51bRgJIAEoBRIMCgRF",
            "TnVtGAogASgFEg0KBUVBTnVtGAsgASgFIj0KF1NDX3BsYXllcl91cGRhdGVW",
            "aXJ0dWFsEhMKC1ZpcnR1YWxUeXBlGAEgASgFEg0KBVZhbHVlGAIgASgDIjsK",
            "DVNDX3BsYXllcl9leHASDQoFTGV2ZWwYASABKAUSCwoDRXhwGAIgASgFEg4K",
            "BkFkZEV4cBgDIAEoBSIgCg1DU19zYXZlX2d1aWRlEg8KB0d1aWRlSWQYASAB",
            "KAUiKAoRQ1Nfc2F2ZV9ndWlkZVN0ZXASEwoLR3VpZGVTdGVwSWQYASABKAUi",
            "oAIKEFNDX3BsYXllcl9yZWREb3QSFgoOUmFua1JhY2hXYXJOdW0YASABKAUS",
            "GwoTUmFua1JhY2hMYXN0V2FyVGltZRgCIAEoBRIYChBSYW5rUmFjaEdldEF3",
            "YXJkGAMgASgIEhMKC01pbmVMZWZ0TnVtGAQgASgFEhcKD01pbmVDdXJyRW5k",
            "VGltZRgFIAEoBRIUCgxCdXNBRExlZnROdW0YBiABKAUSGAoQQnVzQURDdXJy",
            "RW5kVGltZRgHIAEoBRIWCg5FeHBsb3JlTGVmdE51bRgIIAEoBRIaChJFeHBs",
            "b3JlQ3VyckVuZFRpbWUYCSABKAUSEgoKR3Vlc3NBd2FyZBgKIAEoCBIXCg9K",
            "b2NEaW5pbmdFYXROdW0YCyABKAUiJAoUQ1NfcGxheWVyX2NoYW5nZU5hbWUS",
            "DAoETmFtZRgBIAEoCSJWChRTQ19wbGF5ZXJfY2hhbmdlTmFtZRIwCgZSZXN1",
            "bHQYASABKA4yIC5QYlBsYXllci5FbnVtX2NoYW5nZU5hbWVfcmVzdWx0EgwK",
            "BE5hbWUYAiABKAkiJAoUQ1NfcGxheWVyX2NoYW5nZUljb24SDAoESWNvbhgB",
            "IAMoBSIkChRTQ19wbGF5ZXJfY2hhbmdlSWNvbhIMCgRJY29uGAEgAygFIhMK",
            "EUNTX3BsYXllcl9idXlHb2xkIiEKEVNDX3BsYXllcl9idXlHb2xkEgwKBGdv",
            "bGQYASABKAUiPwoPU0NfcGxheWVyX3BvaW50EhIKClBvd2VyUG9pbnQYASAB",
            "KAUSGAoQTmV4dEFkZFBvd2VyVGltZRgCIAEoBSIUChJDU19wbGF5ZXJfYnV5",
            "UG93ZXIiKQoSU0NfcGxheWVyX2J1eVBvd2VyEhMKC0J1eVBvd2VyTnVtGAEg",
            "ASgFIhgKFkNTX3BsYXllcl9kb3dlckxldmVsVXAijAEKFlNDX3BsYXllcl9k",
            "b3dlckxldmVsVXASMgoGcmVzdWx0GAEgASgOMiIuUGJQbGF5ZXIuRW51bV9k",
            "b3dlckxldmVsVXBfcmVzdWx0EhIKCkRvd2VyTGV2ZWwYAiADKAUSFgoOTGVm",
            "dERvd2VyUG9pbnQYAyABKAUSEgoKVG90YWxUaW1lcxgEIAEoBSIuChRTQ19w",
            "bGF5ZXJfZG93ZXJQb2ludBIWCg5MZWZ0RG93ZXJQb2ludBgBIAEoBSI1ChFT",
            "Q19wbGF5ZXJfbmV3UHVzaBIgCgRJbmZvGAEgAygLMhIuUGJDb20uT25lX1B1",
            "c2hNc2ciYwoWU0NfcGxheWVyX1NlYXNvblVwZGF0ZRIQCghTZWFzb25JZBgB",
            "IAEoBRIPCgdFbmRUaW1lGAIgASgFEhMKC0lzU2Vhc29uVmlwGAMgASgIEhEK",
            "CVNlYXNvbkV4cBgEIAEoBSI0ChJDU19wbGF5ZXJfQWREb3VibGUSDAoEVHlw",
            "ZRgBIAEoBRIQCghJc0RvdWJsZRgCIAEoCCIXChVDU19wbGF5ZXJfRmluaXNo",
            "R3VpZGUiGQoXU0NfcGxheWVyX1NlYXNvblZJUE9wZW4iLwoTQ1NfcGxheWVy",
            "X1NlYXNvbkdldBIKCgJJZBgBIAEoBRIMCgRUeXBlGAIgASgFIj4KE1NDX3Bs",
            "YXllcl9TZWFzb25HZXQSJwoEbGlzdBgBIAMoCzIZLlBiUGxheWVyLk9uZV9T",
            "ZWFzb25Bd2FyZCJBCg9PbmVfU2Vhc29uQXdhcmQSCgoCSUQYASABKAUSEAoI",
            "SXNOb3JHZXQYAiABKAgSEAoISXNWaXBHZXQYAyABKAgqaQoYRW51bV9kb3dl",
            "ckxldmVsVXBfcmVzdWx0Eg0KCUR1VW5rbm93bhAAEg0KCUR1U3VjY2VlZBAB",
            "Eg4KCkR1TGFja0dvbGQQAhIPCgtEdUxhY2tQb2ludBADEg4KCkR1TWF4RG93",
            "ZXIQBCp3ChZFbnVtX2NoYW5nZU5hbWVfcmVzdWx0Eg0KCUNuVW5rbm93bhAA",
            "Eg0KCUNuU3VjY2VlZBABEg4KCkNuU2FtZU5hbWUQAhIMCghDbk1heExlbhAD",
            "EhEKDUNuSWxsZWdhbENoYXIQBBIOCgpDblRpbWVMYWNrEAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbCom.PbComReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbPlayer.Enum_dowerLevelUp_result), typeof(global::PbPlayer.Enum_changeName_result), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_resetData), global::PbPlayer.SC_player_resetData.Parser, new[]{ "KeepLoginNum", "RegDay", "MCDay", "IsGetMC", "LoginDay", "LeftAdNum", "BuyPowerNum", "GNum", "GANum", "ENum", "EANum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_updateVirtual), global::PbPlayer.SC_player_updateVirtual.Parser, new[]{ "VirtualType", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_exp), global::PbPlayer.SC_player_exp.Parser, new[]{ "Level", "Exp", "AddExp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_save_guide), global::PbPlayer.CS_save_guide.Parser, new[]{ "GuideId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_save_guideStep), global::PbPlayer.CS_save_guideStep.Parser, new[]{ "GuideStepId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_redDot), global::PbPlayer.SC_player_redDot.Parser, new[]{ "RankRachWarNum", "RankRachLastWarTime", "RankRachGetAward", "MineLeftNum", "MineCurrEndTime", "BusADLeftNum", "BusADCurrEndTime", "ExploreLeftNum", "ExploreCurrEndTime", "GuessAward", "JocDiningEatNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_player_changeName), global::PbPlayer.CS_player_changeName.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_changeName), global::PbPlayer.SC_player_changeName.Parser, new[]{ "Result", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_player_changeIcon), global::PbPlayer.CS_player_changeIcon.Parser, new[]{ "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_changeIcon), global::PbPlayer.SC_player_changeIcon.Parser, new[]{ "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_player_buyGold), global::PbPlayer.CS_player_buyGold.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_buyGold), global::PbPlayer.SC_player_buyGold.Parser, new[]{ "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_point), global::PbPlayer.SC_player_point.Parser, new[]{ "PowerPoint", "NextAddPowerTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_player_buyPower), global::PbPlayer.CS_player_buyPower.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_buyPower), global::PbPlayer.SC_player_buyPower.Parser, new[]{ "BuyPowerNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_player_dowerLevelUp), global::PbPlayer.CS_player_dowerLevelUp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_dowerLevelUp), global::PbPlayer.SC_player_dowerLevelUp.Parser, new[]{ "Result", "DowerLevel", "LeftDowerPoint", "TotalTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_dowerPoint), global::PbPlayer.SC_player_dowerPoint.Parser, new[]{ "LeftDowerPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_newPush), global::PbPlayer.SC_player_newPush.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_SeasonUpdate), global::PbPlayer.SC_player_SeasonUpdate.Parser, new[]{ "SeasonId", "EndTime", "IsSeasonVip", "SeasonExp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_player_AdDouble), global::PbPlayer.CS_player_AdDouble.Parser, new[]{ "Type", "IsDouble" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_player_FinishGuide), global::PbPlayer.CS_player_FinishGuide.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_SeasonVIPOpen), global::PbPlayer.SC_player_SeasonVIPOpen.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.CS_player_SeasonGet), global::PbPlayer.CS_player_SeasonGet.Parser, new[]{ "Id", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.SC_player_SeasonGet), global::PbPlayer.SC_player_SeasonGet.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPlayer.One_SeasonAward), global::PbPlayer.One_SeasonAward.Parser, new[]{ "ID", "IsNorGet", "IsVipGet" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///天赋升级结果
  /// </summary>
  public enum Enum_dowerLevelUp_result {
    /// <summary>
    ///未知错误
    /// </summary>
    [pbr::OriginalName("DuUnknown")] DuUnknown = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("DuSucceed")] DuSucceed = 1,
    /// <summary>
    ///金币不足
    /// </summary>
    [pbr::OriginalName("DuLackGold")] DuLackGold = 2,
    /// <summary>
    ///天赋点不足
    /// </summary>
    [pbr::OriginalName("DuLackPoint")] DuLackPoint = 3,
    /// <summary>
    ///天赋已满
    /// </summary>
    [pbr::OriginalName("DuMaxDower")] DuMaxDower = 4,
  }

  /// <summary>
  ///角色改名结果
  /// </summary>
  public enum Enum_changeName_result {
    /// <summary>
    ///未知错误
    /// </summary>
    [pbr::OriginalName("CnUnknown")] CnUnknown = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("CnSucceed")] CnSucceed = 1,
    /// <summary>
    ///角色名已存在
    /// </summary>
    [pbr::OriginalName("CnSameName")] CnSameName = 2,
    /// <summary>
    ///角色名字符过长
    /// </summary>
    [pbr::OriginalName("CnMaxLen")] CnMaxLen = 3,
    /// <summary>
    ///角色名中有非法字符
    /// </summary>
    [pbr::OriginalName("CnIllegalChar")] CnIllegalChar = 4,
    /// <summary>
    ///可改名时间未到（上次改名满一周）
    /// </summary>
    [pbr::OriginalName("CnTimeLack")] CnTimeLack = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///收到每天0点重置数据
  /// </summary>
  public sealed partial class SC_player_resetData : pb::IMessage<SC_player_resetData> {
    private static readonly pb::MessageParser<SC_player_resetData> _parser = new pb::MessageParser<SC_player_resetData>(() => new SC_player_resetData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_resetData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_resetData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_resetData(SC_player_resetData other) : this() {
      keepLoginNum_ = other.keepLoginNum_;
      regDay_ = other.regDay_;
      mCDay_ = other.mCDay_;
      isGetMC_ = other.isGetMC_;
      loginDay_ = other.loginDay_;
      leftAdNum_ = other.leftAdNum_;
      buyPowerNum_ = other.buyPowerNum_;
      gNum_ = other.gNum_;
      gANum_ = other.gANum_;
      eNum_ = other.eNum_;
      eANum_ = other.eANum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_resetData Clone() {
      return new SC_player_resetData(this);
    }

    /// <summary>Field number for the "KeepLoginNum" field.</summary>
    public const int KeepLoginNumFieldNumber = 1;
    private int keepLoginNum_;
    /// <summary>
    ///连续登录次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepLoginNum {
      get { return keepLoginNum_; }
      set {
        keepLoginNum_ = value;
      }
    }

    /// <summary>Field number for the "RegDay" field.</summary>
    public const int RegDayFieldNumber = 2;
    private int regDay_;
    /// <summary>
    ///注册天数(可做登录天数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegDay {
      get { return regDay_; }
      set {
        regDay_ = value;
      }
    }

    /// <summary>Field number for the "MCDay" field.</summary>
    public const int MCDayFieldNumber = 3;
    private int mCDay_;
    /// <summary>
    ///剩余月卡天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCDay {
      get { return mCDay_; }
      set {
        mCDay_ = value;
      }
    }

    /// <summary>Field number for the "IsGetMC" field.</summary>
    public const int IsGetMCFieldNumber = 4;
    private bool isGetMC_;
    /// <summary>
    ///月卡今日是否已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetMC {
      get { return isGetMC_; }
      set {
        isGetMC_ = value;
      }
    }

    /// <summary>Field number for the "LoginDay" field.</summary>
    public const int LoginDayFieldNumber = 5;
    private int loginDay_;
    /// <summary>
    ///累计登录天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginDay {
      get { return loginDay_; }
      set {
        loginDay_ = value;
      }
    }

    /// <summary>Field number for the "LeftAdNum" field.</summary>
    public const int LeftAdNumFieldNumber = 6;
    private int leftAdNum_;
    /// <summary>
    ///当日剩余广告次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftAdNum {
      get { return leftAdNum_; }
      set {
        leftAdNum_ = value;
      }
    }

    /// <summary>Field number for the "BuyPowerNum" field.</summary>
    public const int BuyPowerNumFieldNumber = 7;
    private int buyPowerNum_;
    /// <summary>
    ///当日累计购买体力次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyPowerNum {
      get { return buyPowerNum_; }
      set {
        buyPowerNum_ = value;
      }
    }

    /// <summary>Field number for the "GNum" field.</summary>
    public const int GNumFieldNumber = 8;
    private int gNum_;
    /// <summary>
    ///金币副本今日剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GNum {
      get { return gNum_; }
      set {
        gNum_ = value;
      }
    }

    /// <summary>Field number for the "GANum" field.</summary>
    public const int GANumFieldNumber = 9;
    private int gANum_;
    /// <summary>
    ///金币副本今日广告剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GANum {
      get { return gANum_; }
      set {
        gANum_ = value;
      }
    }

    /// <summary>Field number for the "ENum" field.</summary>
    public const int ENumFieldNumber = 10;
    private int eNum_;
    /// <summary>
    ///装备副本今日剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ENum {
      get { return eNum_; }
      set {
        eNum_ = value;
      }
    }

    /// <summary>Field number for the "EANum" field.</summary>
    public const int EANumFieldNumber = 11;
    private int eANum_;
    /// <summary>
    ///装备副本今日广告剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EANum {
      get { return eANum_; }
      set {
        eANum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_resetData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_resetData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeepLoginNum != other.KeepLoginNum) return false;
      if (RegDay != other.RegDay) return false;
      if (MCDay != other.MCDay) return false;
      if (IsGetMC != other.IsGetMC) return false;
      if (LoginDay != other.LoginDay) return false;
      if (LeftAdNum != other.LeftAdNum) return false;
      if (BuyPowerNum != other.BuyPowerNum) return false;
      if (GNum != other.GNum) return false;
      if (GANum != other.GANum) return false;
      if (ENum != other.ENum) return false;
      if (EANum != other.EANum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeepLoginNum != 0) hash ^= KeepLoginNum.GetHashCode();
      if (RegDay != 0) hash ^= RegDay.GetHashCode();
      if (MCDay != 0) hash ^= MCDay.GetHashCode();
      if (IsGetMC != false) hash ^= IsGetMC.GetHashCode();
      if (LoginDay != 0) hash ^= LoginDay.GetHashCode();
      if (LeftAdNum != 0) hash ^= LeftAdNum.GetHashCode();
      if (BuyPowerNum != 0) hash ^= BuyPowerNum.GetHashCode();
      if (GNum != 0) hash ^= GNum.GetHashCode();
      if (GANum != 0) hash ^= GANum.GetHashCode();
      if (ENum != 0) hash ^= ENum.GetHashCode();
      if (EANum != 0) hash ^= EANum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeepLoginNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(KeepLoginNum);
      }
      if (RegDay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RegDay);
      }
      if (MCDay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MCDay);
      }
      if (IsGetMC != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsGetMC);
      }
      if (LoginDay != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LoginDay);
      }
      if (LeftAdNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LeftAdNum);
      }
      if (BuyPowerNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BuyPowerNum);
      }
      if (GNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GNum);
      }
      if (GANum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GANum);
      }
      if (ENum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ENum);
      }
      if (EANum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EANum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeepLoginNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepLoginNum);
      }
      if (RegDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegDay);
      }
      if (MCDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCDay);
      }
      if (IsGetMC != false) {
        size += 1 + 1;
      }
      if (LoginDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginDay);
      }
      if (LeftAdNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftAdNum);
      }
      if (BuyPowerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyPowerNum);
      }
      if (GNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GNum);
      }
      if (GANum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GANum);
      }
      if (ENum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ENum);
      }
      if (EANum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EANum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_resetData other) {
      if (other == null) {
        return;
      }
      if (other.KeepLoginNum != 0) {
        KeepLoginNum = other.KeepLoginNum;
      }
      if (other.RegDay != 0) {
        RegDay = other.RegDay;
      }
      if (other.MCDay != 0) {
        MCDay = other.MCDay;
      }
      if (other.IsGetMC != false) {
        IsGetMC = other.IsGetMC;
      }
      if (other.LoginDay != 0) {
        LoginDay = other.LoginDay;
      }
      if (other.LeftAdNum != 0) {
        LeftAdNum = other.LeftAdNum;
      }
      if (other.BuyPowerNum != 0) {
        BuyPowerNum = other.BuyPowerNum;
      }
      if (other.GNum != 0) {
        GNum = other.GNum;
      }
      if (other.GANum != 0) {
        GANum = other.GANum;
      }
      if (other.ENum != 0) {
        ENum = other.ENum;
      }
      if (other.EANum != 0) {
        EANum = other.EANum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            KeepLoginNum = input.ReadInt32();
            break;
          }
          case 16: {
            RegDay = input.ReadInt32();
            break;
          }
          case 24: {
            MCDay = input.ReadInt32();
            break;
          }
          case 32: {
            IsGetMC = input.ReadBool();
            break;
          }
          case 40: {
            LoginDay = input.ReadInt32();
            break;
          }
          case 48: {
            LeftAdNum = input.ReadInt32();
            break;
          }
          case 56: {
            BuyPowerNum = input.ReadInt32();
            break;
          }
          case 64: {
            GNum = input.ReadInt32();
            break;
          }
          case 72: {
            GANum = input.ReadInt32();
            break;
          }
          case 80: {
            ENum = input.ReadInt32();
            break;
          }
          case 88: {
            EANum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到玩家虚拟物品更新
  /// </summary>
  public sealed partial class SC_player_updateVirtual : pb::IMessage<SC_player_updateVirtual> {
    private static readonly pb::MessageParser<SC_player_updateVirtual> _parser = new pb::MessageParser<SC_player_updateVirtual>(() => new SC_player_updateVirtual());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_updateVirtual> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_updateVirtual() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_updateVirtual(SC_player_updateVirtual other) : this() {
      virtualType_ = other.virtualType_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_updateVirtual Clone() {
      return new SC_player_updateVirtual(this);
    }

    /// <summary>Field number for the "VirtualType" field.</summary>
    public const int VirtualTypeFieldNumber = 1;
    private int virtualType_;
    /// <summary>
    ///虚拟物品类型 EItemSubTypeVirtual
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VirtualType {
      get { return virtualType_; }
      set {
        virtualType_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    /// <summary>
    ///值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_updateVirtual);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_updateVirtual other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VirtualType != other.VirtualType) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VirtualType != 0) hash ^= VirtualType.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VirtualType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VirtualType);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VirtualType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualType);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_updateVirtual other) {
      if (other == null) {
        return;
      }
      if (other.VirtualType != 0) {
        VirtualType = other.VirtualType;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VirtualType = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到玩家经验发生改变
  /// </summary>
  public sealed partial class SC_player_exp : pb::IMessage<SC_player_exp> {
    private static readonly pb::MessageParser<SC_player_exp> _parser = new pb::MessageParser<SC_player_exp>(() => new SC_player_exp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_exp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_exp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_exp(SC_player_exp other) : this() {
      level_ = other.level_;
      exp_ = other.exp_;
      addExp_ = other.addExp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_exp Clone() {
      return new SC_player_exp(this);
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "AddExp" field.</summary>
    public const int AddExpFieldNumber = 3;
    private int addExp_;
    /// <summary>
    ///增加经验(提示用)	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddExp {
      get { return addExp_; }
      set {
        addExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_exp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_exp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (AddExp != other.AddExp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (AddExp != 0) hash ^= AddExp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (AddExp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AddExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (AddExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_exp other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.AddExp != 0) {
        AddExp = other.AddExp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            AddExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保存指引步骤
  /// </summary>
  public sealed partial class CS_save_guide : pb::IMessage<CS_save_guide> {
    private static readonly pb::MessageParser<CS_save_guide> _parser = new pb::MessageParser<CS_save_guide>(() => new CS_save_guide());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_save_guide> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_save_guide() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_save_guide(CS_save_guide other) : this() {
      guideId_ = other.guideId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_save_guide Clone() {
      return new CS_save_guide(this);
    }

    /// <summary>Field number for the "GuideId" field.</summary>
    public const int GuideIdFieldNumber = 1;
    private int guideId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuideId {
      get { return guideId_; }
      set {
        guideId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_save_guide);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_save_guide other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuideId != other.GuideId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuideId != 0) hash ^= GuideId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuideId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuideId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuideId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_save_guide other) {
      if (other == null) {
        return;
      }
      if (other.GuideId != 0) {
        GuideId = other.GuideId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuideId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保存指引小步骤
  /// </summary>
  public sealed partial class CS_save_guideStep : pb::IMessage<CS_save_guideStep> {
    private static readonly pb::MessageParser<CS_save_guideStep> _parser = new pb::MessageParser<CS_save_guideStep>(() => new CS_save_guideStep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_save_guideStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_save_guideStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_save_guideStep(CS_save_guideStep other) : this() {
      guideStepId_ = other.guideStepId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_save_guideStep Clone() {
      return new CS_save_guideStep(this);
    }

    /// <summary>Field number for the "GuideStepId" field.</summary>
    public const int GuideStepIdFieldNumber = 1;
    private int guideStepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuideStepId {
      get { return guideStepId_; }
      set {
        guideStepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_save_guideStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_save_guideStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuideStepId != other.GuideStepId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuideStepId != 0) hash ^= GuideStepId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuideStepId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuideStepId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuideStepId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideStepId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_save_guideStep other) {
      if (other == null) {
        return;
      }
      if (other.GuideStepId != 0) {
        GuideStepId = other.GuideStepId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuideStepId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///红点用到的一些数据
  /// </summary>
  public sealed partial class SC_player_redDot : pb::IMessage<SC_player_redDot> {
    private static readonly pb::MessageParser<SC_player_redDot> _parser = new pb::MessageParser<SC_player_redDot>(() => new SC_player_redDot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_redDot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_redDot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_redDot(SC_player_redDot other) : this() {
      rankRachWarNum_ = other.rankRachWarNum_;
      rankRachLastWarTime_ = other.rankRachLastWarTime_;
      rankRachGetAward_ = other.rankRachGetAward_;
      mineLeftNum_ = other.mineLeftNum_;
      mineCurrEndTime_ = other.mineCurrEndTime_;
      busADLeftNum_ = other.busADLeftNum_;
      busADCurrEndTime_ = other.busADCurrEndTime_;
      exploreLeftNum_ = other.exploreLeftNum_;
      exploreCurrEndTime_ = other.exploreCurrEndTime_;
      guessAward_ = other.guessAward_;
      jocDiningEatNum_ = other.jocDiningEatNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_redDot Clone() {
      return new SC_player_redDot(this);
    }

    /// <summary>Field number for the "RankRachWarNum" field.</summary>
    public const int RankRachWarNumFieldNumber = 1;
    private int rankRachWarNum_;
    /// <summary>
    ///升班赛 今日剩余挑战次数		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankRachWarNum {
      get { return rankRachWarNum_; }
      set {
        rankRachWarNum_ = value;
      }
    }

    /// <summary>Field number for the "RankRachLastWarTime" field.</summary>
    public const int RankRachLastWarTimeFieldNumber = 2;
    private int rankRachLastWarTime_;
    /// <summary>
    ///升班赛 上次挑战时间(有CD时:传上次挑战时间戳 其他时为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankRachLastWarTime {
      get { return rankRachLastWarTime_; }
      set {
        rankRachLastWarTime_ = value;
      }
    }

    /// <summary>Field number for the "RankRachGetAward" field.</summary>
    public const int RankRachGetAwardFieldNumber = 3;
    private bool rankRachGetAward_;
    /// <summary>
    ///升班赛 是否可领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RankRachGetAward {
      get { return rankRachGetAward_; }
      set {
        rankRachGetAward_ = value;
      }
    }

    /// <summary>Field number for the "MineLeftNum" field.</summary>
    public const int MineLeftNumFieldNumber = 4;
    private int mineLeftNum_;
    /// <summary>
    ///矿山剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MineLeftNum {
      get { return mineLeftNum_; }
      set {
        mineLeftNum_ = value;
      }
    }

    /// <summary>Field number for the "MineCurrEndTime" field.</summary>
    public const int MineCurrEndTimeFieldNumber = 5;
    private int mineCurrEndTime_;
    /// <summary>
    ///当前矿山结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MineCurrEndTime {
      get { return mineCurrEndTime_; }
      set {
        mineCurrEndTime_ = value;
      }
    }

    /// <summary>Field number for the "BusADLeftNum" field.</summary>
    public const int BusADLeftNumFieldNumber = 6;
    private int busADLeftNum_;
    /// <summary>
    ///广告活动剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BusADLeftNum {
      get { return busADLeftNum_; }
      set {
        busADLeftNum_ = value;
      }
    }

    /// <summary>Field number for the "BusADCurrEndTime" field.</summary>
    public const int BusADCurrEndTimeFieldNumber = 7;
    private int busADCurrEndTime_;
    /// <summary>
    ///当前广告活动结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BusADCurrEndTime {
      get { return busADCurrEndTime_; }
      set {
        busADCurrEndTime_ = value;
      }
    }

    /// <summary>Field number for the "ExploreLeftNum" field.</summary>
    public const int ExploreLeftNumFieldNumber = 8;
    private int exploreLeftNum_;
    /// <summary>
    ///探索剩余次数		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExploreLeftNum {
      get { return exploreLeftNum_; }
      set {
        exploreLeftNum_ = value;
      }
    }

    /// <summary>Field number for the "ExploreCurrEndTime" field.</summary>
    public const int ExploreCurrEndTimeFieldNumber = 9;
    private int exploreCurrEndTime_;
    /// <summary>
    ///探索结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExploreCurrEndTime {
      get { return exploreCurrEndTime_; }
      set {
        exploreCurrEndTime_ = value;
      }
    }

    /// <summary>Field number for the "GuessAward" field.</summary>
    public const int GuessAwardFieldNumber = 10;
    private bool guessAward_;
    /// <summary>
    ///竞猜是否有奖励未领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GuessAward {
      get { return guessAward_; }
      set {
        guessAward_ = value;
      }
    }

    /// <summary>Field number for the "JocDiningEatNum" field.</summary>
    public const int JocDiningEatNumFieldNumber = 11;
    private int jocDiningEatNum_;
    /// <summary>
    ///骑师餐厅进餐次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JocDiningEatNum {
      get { return jocDiningEatNum_; }
      set {
        jocDiningEatNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_redDot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_redDot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RankRachWarNum != other.RankRachWarNum) return false;
      if (RankRachLastWarTime != other.RankRachLastWarTime) return false;
      if (RankRachGetAward != other.RankRachGetAward) return false;
      if (MineLeftNum != other.MineLeftNum) return false;
      if (MineCurrEndTime != other.MineCurrEndTime) return false;
      if (BusADLeftNum != other.BusADLeftNum) return false;
      if (BusADCurrEndTime != other.BusADCurrEndTime) return false;
      if (ExploreLeftNum != other.ExploreLeftNum) return false;
      if (ExploreCurrEndTime != other.ExploreCurrEndTime) return false;
      if (GuessAward != other.GuessAward) return false;
      if (JocDiningEatNum != other.JocDiningEatNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RankRachWarNum != 0) hash ^= RankRachWarNum.GetHashCode();
      if (RankRachLastWarTime != 0) hash ^= RankRachLastWarTime.GetHashCode();
      if (RankRachGetAward != false) hash ^= RankRachGetAward.GetHashCode();
      if (MineLeftNum != 0) hash ^= MineLeftNum.GetHashCode();
      if (MineCurrEndTime != 0) hash ^= MineCurrEndTime.GetHashCode();
      if (BusADLeftNum != 0) hash ^= BusADLeftNum.GetHashCode();
      if (BusADCurrEndTime != 0) hash ^= BusADCurrEndTime.GetHashCode();
      if (ExploreLeftNum != 0) hash ^= ExploreLeftNum.GetHashCode();
      if (ExploreCurrEndTime != 0) hash ^= ExploreCurrEndTime.GetHashCode();
      if (GuessAward != false) hash ^= GuessAward.GetHashCode();
      if (JocDiningEatNum != 0) hash ^= JocDiningEatNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RankRachWarNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RankRachWarNum);
      }
      if (RankRachLastWarTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RankRachLastWarTime);
      }
      if (RankRachGetAward != false) {
        output.WriteRawTag(24);
        output.WriteBool(RankRachGetAward);
      }
      if (MineLeftNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MineLeftNum);
      }
      if (MineCurrEndTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MineCurrEndTime);
      }
      if (BusADLeftNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BusADLeftNum);
      }
      if (BusADCurrEndTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BusADCurrEndTime);
      }
      if (ExploreLeftNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ExploreLeftNum);
      }
      if (ExploreCurrEndTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ExploreCurrEndTime);
      }
      if (GuessAward != false) {
        output.WriteRawTag(80);
        output.WriteBool(GuessAward);
      }
      if (JocDiningEatNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(JocDiningEatNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankRachWarNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankRachWarNum);
      }
      if (RankRachLastWarTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankRachLastWarTime);
      }
      if (RankRachGetAward != false) {
        size += 1 + 1;
      }
      if (MineLeftNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MineLeftNum);
      }
      if (MineCurrEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MineCurrEndTime);
      }
      if (BusADLeftNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BusADLeftNum);
      }
      if (BusADCurrEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BusADCurrEndTime);
      }
      if (ExploreLeftNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExploreLeftNum);
      }
      if (ExploreCurrEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExploreCurrEndTime);
      }
      if (GuessAward != false) {
        size += 1 + 1;
      }
      if (JocDiningEatNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JocDiningEatNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_redDot other) {
      if (other == null) {
        return;
      }
      if (other.RankRachWarNum != 0) {
        RankRachWarNum = other.RankRachWarNum;
      }
      if (other.RankRachLastWarTime != 0) {
        RankRachLastWarTime = other.RankRachLastWarTime;
      }
      if (other.RankRachGetAward != false) {
        RankRachGetAward = other.RankRachGetAward;
      }
      if (other.MineLeftNum != 0) {
        MineLeftNum = other.MineLeftNum;
      }
      if (other.MineCurrEndTime != 0) {
        MineCurrEndTime = other.MineCurrEndTime;
      }
      if (other.BusADLeftNum != 0) {
        BusADLeftNum = other.BusADLeftNum;
      }
      if (other.BusADCurrEndTime != 0) {
        BusADCurrEndTime = other.BusADCurrEndTime;
      }
      if (other.ExploreLeftNum != 0) {
        ExploreLeftNum = other.ExploreLeftNum;
      }
      if (other.ExploreCurrEndTime != 0) {
        ExploreCurrEndTime = other.ExploreCurrEndTime;
      }
      if (other.GuessAward != false) {
        GuessAward = other.GuessAward;
      }
      if (other.JocDiningEatNum != 0) {
        JocDiningEatNum = other.JocDiningEatNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RankRachWarNum = input.ReadInt32();
            break;
          }
          case 16: {
            RankRachLastWarTime = input.ReadInt32();
            break;
          }
          case 24: {
            RankRachGetAward = input.ReadBool();
            break;
          }
          case 32: {
            MineLeftNum = input.ReadInt32();
            break;
          }
          case 40: {
            MineCurrEndTime = input.ReadInt32();
            break;
          }
          case 48: {
            BusADLeftNum = input.ReadInt32();
            break;
          }
          case 56: {
            BusADCurrEndTime = input.ReadInt32();
            break;
          }
          case 64: {
            ExploreLeftNum = input.ReadInt32();
            break;
          }
          case 72: {
            ExploreCurrEndTime = input.ReadInt32();
            break;
          }
          case 80: {
            GuessAward = input.ReadBool();
            break;
          }
          case 88: {
            JocDiningEatNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求玩家改名
  /// </summary>
  public sealed partial class CS_player_changeName : pb::IMessage<CS_player_changeName> {
    private static readonly pb::MessageParser<CS_player_changeName> _parser = new pb::MessageParser<CS_player_changeName>(() => new CS_player_changeName());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_player_changeName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_changeName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_changeName(CS_player_changeName other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_changeName Clone() {
      return new CS_player_changeName(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///新的名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_player_changeName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_player_changeName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_player_changeName other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到玩家改名
  /// </summary>
  public sealed partial class SC_player_changeName : pb::IMessage<SC_player_changeName> {
    private static readonly pb::MessageParser<SC_player_changeName> _parser = new pb::MessageParser<SC_player_changeName>(() => new SC_player_changeName());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_changeName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_changeName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_changeName(SC_player_changeName other) : this() {
      result_ = other.result_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_changeName Clone() {
      return new SC_player_changeName(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbPlayer.Enum_changeName_result result_ = 0;
    /// <summary>
    ///改名结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPlayer.Enum_changeName_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///新的名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_changeName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_changeName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_changeName other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbPlayer.Enum_changeName_result) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求玩家修改头像
  /// </summary>
  public sealed partial class CS_player_changeIcon : pb::IMessage<CS_player_changeIcon> {
    private static readonly pb::MessageParser<CS_player_changeIcon> _parser = new pb::MessageParser<CS_player_changeIcon>(() => new CS_player_changeIcon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_player_changeIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_changeIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_changeIcon(CS_player_changeIcon other) : this() {
      icon_ = other.icon_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_changeIcon Clone() {
      return new CS_player_changeIcon(this);
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///头像[头像、背景、角标]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_player_changeIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_player_changeIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      icon_.WriteTo(output, _repeated_icon_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_player_changeIcon other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到玩家修改头像
  /// </summary>
  public sealed partial class SC_player_changeIcon : pb::IMessage<SC_player_changeIcon> {
    private static readonly pb::MessageParser<SC_player_changeIcon> _parser = new pb::MessageParser<SC_player_changeIcon>(() => new SC_player_changeIcon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_changeIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_changeIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_changeIcon(SC_player_changeIcon other) : this() {
      icon_ = other.icon_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_changeIcon Clone() {
      return new SC_player_changeIcon(this);
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///头像[头像、背景、角标]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_changeIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_changeIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      icon_.WriteTo(output, _repeated_icon_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_changeIcon other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求购买金币
  /// </summary>
  public sealed partial class CS_player_buyGold : pb::IMessage<CS_player_buyGold> {
    private static readonly pb::MessageParser<CS_player_buyGold> _parser = new pb::MessageParser<CS_player_buyGold>(() => new CS_player_buyGold());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_player_buyGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_buyGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_buyGold(CS_player_buyGold other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_buyGold Clone() {
      return new CS_player_buyGold(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_player_buyGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_player_buyGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_player_buyGold other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到购买金币
  /// </summary>
  public sealed partial class SC_player_buyGold : pb::IMessage<SC_player_buyGold> {
    private static readonly pb::MessageParser<SC_player_buyGold> _parser = new pb::MessageParser<SC_player_buyGold>(() => new SC_player_buyGold());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_buyGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_buyGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_buyGold(SC_player_buyGold other) : this() {
      gold_ = other.gold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_buyGold Clone() {
      return new SC_player_buyGold(this);
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private int gold_;
    /// <summary>
    ///金币增加的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_buyGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_buyGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0) hash ^= Gold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_buyGold other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到玩家体力变化
  /// </summary>
  public sealed partial class SC_player_point : pb::IMessage<SC_player_point> {
    private static readonly pb::MessageParser<SC_player_point> _parser = new pb::MessageParser<SC_player_point>(() => new SC_player_point());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_point(SC_player_point other) : this() {
      powerPoint_ = other.powerPoint_;
      nextAddPowerTime_ = other.nextAddPowerTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_point Clone() {
      return new SC_player_point(this);
    }

    /// <summary>Field number for the "PowerPoint" field.</summary>
    public const int PowerPointFieldNumber = 1;
    private int powerPoint_;
    /// <summary>
    ///当前体力点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerPoint {
      get { return powerPoint_; }
      set {
        powerPoint_ = value;
      }
    }

    /// <summary>Field number for the "NextAddPowerTime" field.</summary>
    public const int NextAddPowerTimeFieldNumber = 2;
    private int nextAddPowerTime_;
    /// <summary>
    ///下次恢复体力时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextAddPowerTime {
      get { return nextAddPowerTime_; }
      set {
        nextAddPowerTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PowerPoint != other.PowerPoint) return false;
      if (NextAddPowerTime != other.NextAddPowerTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PowerPoint != 0) hash ^= PowerPoint.GetHashCode();
      if (NextAddPowerTime != 0) hash ^= NextAddPowerTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PowerPoint != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PowerPoint);
      }
      if (NextAddPowerTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextAddPowerTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PowerPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerPoint);
      }
      if (NextAddPowerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextAddPowerTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_point other) {
      if (other == null) {
        return;
      }
      if (other.PowerPoint != 0) {
        PowerPoint = other.PowerPoint;
      }
      if (other.NextAddPowerTime != 0) {
        NextAddPowerTime = other.NextAddPowerTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PowerPoint = input.ReadInt32();
            break;
          }
          case 16: {
            NextAddPowerTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求钻石购买体力
  /// </summary>
  public sealed partial class CS_player_buyPower : pb::IMessage<CS_player_buyPower> {
    private static readonly pb::MessageParser<CS_player_buyPower> _parser = new pb::MessageParser<CS_player_buyPower>(() => new CS_player_buyPower());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_player_buyPower> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_buyPower() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_buyPower(CS_player_buyPower other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_buyPower Clone() {
      return new CS_player_buyPower(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_player_buyPower);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_player_buyPower other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_player_buyPower other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SC_player_buyPower : pb::IMessage<SC_player_buyPower> {
    private static readonly pb::MessageParser<SC_player_buyPower> _parser = new pb::MessageParser<SC_player_buyPower>(() => new SC_player_buyPower());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_buyPower> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_buyPower() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_buyPower(SC_player_buyPower other) : this() {
      buyPowerNum_ = other.buyPowerNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_buyPower Clone() {
      return new SC_player_buyPower(this);
    }

    /// <summary>Field number for the "BuyPowerNum" field.</summary>
    public const int BuyPowerNumFieldNumber = 1;
    private int buyPowerNum_;
    /// <summary>
    ///当前购买体力次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyPowerNum {
      get { return buyPowerNum_; }
      set {
        buyPowerNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_buyPower);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_buyPower other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuyPowerNum != other.BuyPowerNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuyPowerNum != 0) hash ^= BuyPowerNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuyPowerNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuyPowerNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuyPowerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyPowerNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_buyPower other) {
      if (other == null) {
        return;
      }
      if (other.BuyPowerNum != 0) {
        BuyPowerNum = other.BuyPowerNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuyPowerNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求天赋升级
  /// </summary>
  public sealed partial class CS_player_dowerLevelUp : pb::IMessage<CS_player_dowerLevelUp> {
    private static readonly pb::MessageParser<CS_player_dowerLevelUp> _parser = new pb::MessageParser<CS_player_dowerLevelUp>(() => new CS_player_dowerLevelUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_player_dowerLevelUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_dowerLevelUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_dowerLevelUp(CS_player_dowerLevelUp other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_dowerLevelUp Clone() {
      return new CS_player_dowerLevelUp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_player_dowerLevelUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_player_dowerLevelUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_player_dowerLevelUp other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到天赋升级
  /// </summary>
  public sealed partial class SC_player_dowerLevelUp : pb::IMessage<SC_player_dowerLevelUp> {
    private static readonly pb::MessageParser<SC_player_dowerLevelUp> _parser = new pb::MessageParser<SC_player_dowerLevelUp>(() => new SC_player_dowerLevelUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_dowerLevelUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_dowerLevelUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_dowerLevelUp(SC_player_dowerLevelUp other) : this() {
      result_ = other.result_;
      dowerLevel_ = other.dowerLevel_.Clone();
      leftDowerPoint_ = other.leftDowerPoint_;
      totalTimes_ = other.totalTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_dowerLevelUp Clone() {
      return new SC_player_dowerLevelUp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbPlayer.Enum_dowerLevelUp_result result_ = 0;
    /// <summary>
    ///升级结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPlayer.Enum_dowerLevelUp_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "DowerLevel" field.</summary>
    public const int DowerLevelFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_dowerLevel_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> dowerLevel_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前天赋等级（9个）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DowerLevel {
      get { return dowerLevel_; }
    }

    /// <summary>Field number for the "LeftDowerPoint" field.</summary>
    public const int LeftDowerPointFieldNumber = 3;
    private int leftDowerPoint_;
    /// <summary>
    ///剩余天赋点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftDowerPoint {
      get { return leftDowerPoint_; }
      set {
        leftDowerPoint_ = value;
      }
    }

    /// <summary>Field number for the "TotalTimes" field.</summary>
    public const int TotalTimesFieldNumber = 4;
    private int totalTimes_;
    /// <summary>
    ///总计升级天赋次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTimes {
      get { return totalTimes_; }
      set {
        totalTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_dowerLevelUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_dowerLevelUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!dowerLevel_.Equals(other.dowerLevel_)) return false;
      if (LeftDowerPoint != other.LeftDowerPoint) return false;
      if (TotalTimes != other.TotalTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      hash ^= dowerLevel_.GetHashCode();
      if (LeftDowerPoint != 0) hash ^= LeftDowerPoint.GetHashCode();
      if (TotalTimes != 0) hash ^= TotalTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      dowerLevel_.WriteTo(output, _repeated_dowerLevel_codec);
      if (LeftDowerPoint != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftDowerPoint);
      }
      if (TotalTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      size += dowerLevel_.CalculateSize(_repeated_dowerLevel_codec);
      if (LeftDowerPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftDowerPoint);
      }
      if (TotalTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_dowerLevelUp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      dowerLevel_.Add(other.dowerLevel_);
      if (other.LeftDowerPoint != 0) {
        LeftDowerPoint = other.LeftDowerPoint;
      }
      if (other.TotalTimes != 0) {
        TotalTimes = other.TotalTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbPlayer.Enum_dowerLevelUp_result) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            dowerLevel_.AddEntriesFrom(input, _repeated_dowerLevel_codec);
            break;
          }
          case 24: {
            LeftDowerPoint = input.ReadInt32();
            break;
          }
          case 32: {
            TotalTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到天赋点增加
  /// </summary>
  public sealed partial class SC_player_dowerPoint : pb::IMessage<SC_player_dowerPoint> {
    private static readonly pb::MessageParser<SC_player_dowerPoint> _parser = new pb::MessageParser<SC_player_dowerPoint>(() => new SC_player_dowerPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_dowerPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_dowerPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_dowerPoint(SC_player_dowerPoint other) : this() {
      leftDowerPoint_ = other.leftDowerPoint_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_dowerPoint Clone() {
      return new SC_player_dowerPoint(this);
    }

    /// <summary>Field number for the "LeftDowerPoint" field.</summary>
    public const int LeftDowerPointFieldNumber = 1;
    private int leftDowerPoint_;
    /// <summary>
    ///剩余天赋点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftDowerPoint {
      get { return leftDowerPoint_; }
      set {
        leftDowerPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_dowerPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_dowerPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftDowerPoint != other.LeftDowerPoint) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftDowerPoint != 0) hash ^= LeftDowerPoint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftDowerPoint != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeftDowerPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftDowerPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftDowerPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_dowerPoint other) {
      if (other == null) {
        return;
      }
      if (other.LeftDowerPoint != 0) {
        LeftDowerPoint = other.LeftDowerPoint;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeftDowerPoint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到新客服推送消息(AIHelp)
  /// </summary>
  public sealed partial class SC_player_newPush : pb::IMessage<SC_player_newPush> {
    private static readonly pb::MessageParser<SC_player_newPush> _parser = new pb::MessageParser<SC_player_newPush>(() => new SC_player_newPush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_newPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_newPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_newPush(SC_player_newPush other) : this() {
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_newPush Clone() {
      return new SC_player_newPush(this);
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbCom.One_PushMsg> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::PbCom.One_PushMsg.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_PushMsg> info_ = new pbc::RepeatedField<global::PbCom.One_PushMsg>();
    /// <summary>
    ///推送消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_PushMsg> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_newPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_newPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_newPush other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到赛季更新
  /// </summary>
  public sealed partial class SC_player_SeasonUpdate : pb::IMessage<SC_player_SeasonUpdate> {
    private static readonly pb::MessageParser<SC_player_SeasonUpdate> _parser = new pb::MessageParser<SC_player_SeasonUpdate>(() => new SC_player_SeasonUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_SeasonUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonUpdate(SC_player_SeasonUpdate other) : this() {
      seasonId_ = other.seasonId_;
      endTime_ = other.endTime_;
      isSeasonVip_ = other.isSeasonVip_;
      seasonExp_ = other.seasonExp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonUpdate Clone() {
      return new SC_player_SeasonUpdate(this);
    }

    /// <summary>Field number for the "SeasonId" field.</summary>
    public const int SeasonIdFieldNumber = 1;
    private int seasonId_;
    /// <summary>
    ///赛季id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "EndTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private int endTime_;
    /// <summary>
    ///赛季过期时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "IsSeasonVip" field.</summary>
    public const int IsSeasonVipFieldNumber = 3;
    private bool isSeasonVip_;
    /// <summary>
    ///是否购买赛季令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSeasonVip {
      get { return isSeasonVip_; }
      set {
        isSeasonVip_ = value;
      }
    }

    /// <summary>Field number for the "SeasonExp" field.</summary>
    public const int SeasonExpFieldNumber = 4;
    private int seasonExp_;
    /// <summary>
    ///令牌经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonExp {
      get { return seasonExp_; }
      set {
        seasonExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_SeasonUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_SeasonUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeasonId != other.SeasonId) return false;
      if (EndTime != other.EndTime) return false;
      if (IsSeasonVip != other.IsSeasonVip) return false;
      if (SeasonExp != other.SeasonExp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeasonId != 0) hash ^= SeasonId.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (IsSeasonVip != false) hash ^= IsSeasonVip.GetHashCode();
      if (SeasonExp != 0) hash ^= SeasonExp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeasonId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeasonId);
      }
      if (EndTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndTime);
      }
      if (IsSeasonVip != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSeasonVip);
      }
      if (SeasonExp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SeasonExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonId);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (IsSeasonVip != false) {
        size += 1 + 1;
      }
      if (SeasonExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_SeasonUpdate other) {
      if (other == null) {
        return;
      }
      if (other.SeasonId != 0) {
        SeasonId = other.SeasonId;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      if (other.IsSeasonVip != false) {
        IsSeasonVip = other.IsSeasonVip;
      }
      if (other.SeasonExp != 0) {
        SeasonExp = other.SeasonExp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeasonId = input.ReadInt32();
            break;
          }
          case 16: {
            EndTime = input.ReadInt32();
            break;
          }
          case 24: {
            IsSeasonVip = input.ReadBool();
            break;
          }
          case 32: {
            SeasonExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取玩家广告双倍奖励
  /// </summary>
  public sealed partial class CS_player_AdDouble : pb::IMessage<CS_player_AdDouble> {
    private static readonly pb::MessageParser<CS_player_AdDouble> _parser = new pb::MessageParser<CS_player_AdDouble>(() => new CS_player_AdDouble());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_player_AdDouble> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_AdDouble() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_AdDouble(CS_player_AdDouble other) : this() {
      type_ = other.type_;
      isDouble_ = other.isDouble_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_AdDouble Clone() {
      return new CS_player_AdDouble(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///奖励类型  1 升级奖励 2 章节奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "IsDouble" field.</summary>
    public const int IsDoubleFieldNumber = 2;
    private bool isDouble_;
    /// <summary>
    ///奖励是否翻倍（看完广告后为true）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDouble {
      get { return isDouble_; }
      set {
        isDouble_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_player_AdDouble);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_player_AdDouble other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (IsDouble != other.IsDouble) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsDouble != false) hash ^= IsDouble.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (IsDouble != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDouble);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (IsDouble != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_player_AdDouble other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsDouble != false) {
        IsDouble = other.IsDouble;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            IsDouble = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求完成新手关卡
  /// </summary>
  public sealed partial class CS_player_FinishGuide : pb::IMessage<CS_player_FinishGuide> {
    private static readonly pb::MessageParser<CS_player_FinishGuide> _parser = new pb::MessageParser<CS_player_FinishGuide>(() => new CS_player_FinishGuide());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_player_FinishGuide> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_FinishGuide() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_FinishGuide(CS_player_FinishGuide other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_FinishGuide Clone() {
      return new CS_player_FinishGuide(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_player_FinishGuide);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_player_FinishGuide other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_player_FinishGuide other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到赛季令牌开启通知
  /// </summary>
  public sealed partial class SC_player_SeasonVIPOpen : pb::IMessage<SC_player_SeasonVIPOpen> {
    private static readonly pb::MessageParser<SC_player_SeasonVIPOpen> _parser = new pb::MessageParser<SC_player_SeasonVIPOpen>(() => new SC_player_SeasonVIPOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_SeasonVIPOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonVIPOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonVIPOpen(SC_player_SeasonVIPOpen other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonVIPOpen Clone() {
      return new SC_player_SeasonVIPOpen(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_SeasonVIPOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_SeasonVIPOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_SeasonVIPOpen other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求领取赛季令牌奖励
  /// </summary>
  public sealed partial class CS_player_SeasonGet : pb::IMessage<CS_player_SeasonGet> {
    private static readonly pb::MessageParser<CS_player_SeasonGet> _parser = new pb::MessageParser<CS_player_SeasonGet>(() => new CS_player_SeasonGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_player_SeasonGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_SeasonGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_SeasonGet(CS_player_SeasonGet other) : this() {
      id_ = other.id_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_player_SeasonGet Clone() {
      return new CS_player_SeasonGet(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///领取类型 （1 普通领取 2 赛季vip领取 3 全部领取）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_player_SeasonGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_player_SeasonGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_player_SeasonGet other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到已领取赛季令牌奖励详情
  /// </summary>
  public sealed partial class SC_player_SeasonGet : pb::IMessage<SC_player_SeasonGet> {
    private static readonly pb::MessageParser<SC_player_SeasonGet> _parser = new pb::MessageParser<SC_player_SeasonGet>(() => new SC_player_SeasonGet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_player_SeasonGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonGet(SC_player_SeasonGet other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_player_SeasonGet Clone() {
      return new SC_player_SeasonGet(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbPlayer.One_SeasonAward> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::PbPlayer.One_SeasonAward.Parser);
    private readonly pbc::RepeatedField<global::PbPlayer.One_SeasonAward> list_ = new pbc::RepeatedField<global::PbPlayer.One_SeasonAward>();
    /// <summary>
    ///已领取奖励详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbPlayer.One_SeasonAward> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_player_SeasonGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_player_SeasonGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_player_SeasonGet other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个赛季奖励数据
  /// </summary>
  public sealed partial class One_SeasonAward : pb::IMessage<One_SeasonAward> {
    private static readonly pb::MessageParser<One_SeasonAward> _parser = new pb::MessageParser<One_SeasonAward>(() => new One_SeasonAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_SeasonAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPlayer.PbPlayerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_SeasonAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_SeasonAward(One_SeasonAward other) : this() {
      iD_ = other.iD_;
      isNorGet_ = other.isNorGet_;
      isVipGet_ = other.isVipGet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_SeasonAward Clone() {
      return new One_SeasonAward(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "IsNorGet" field.</summary>
    public const int IsNorGetFieldNumber = 2;
    private bool isNorGet_;
    /// <summary>
    ///是否普通奖励已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNorGet {
      get { return isNorGet_; }
      set {
        isNorGet_ = value;
      }
    }

    /// <summary>Field number for the "IsVipGet" field.</summary>
    public const int IsVipGetFieldNumber = 3;
    private bool isVipGet_;
    /// <summary>
    ///是否赛季vip奖励已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVipGet {
      get { return isVipGet_; }
      set {
        isVipGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_SeasonAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_SeasonAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (IsNorGet != other.IsNorGet) return false;
      if (IsVipGet != other.IsVipGet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (IsNorGet != false) hash ^= IsNorGet.GetHashCode();
      if (IsVipGet != false) hash ^= IsVipGet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (IsNorGet != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsNorGet);
      }
      if (IsVipGet != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsVipGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (IsNorGet != false) {
        size += 1 + 1;
      }
      if (IsVipGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_SeasonAward other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.IsNorGet != false) {
        IsNorGet = other.IsNorGet;
      }
      if (other.IsVipGet != false) {
        IsVipGet = other.IsVipGet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            IsNorGet = input.ReadBool();
            break;
          }
          case 24: {
            IsVipGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
