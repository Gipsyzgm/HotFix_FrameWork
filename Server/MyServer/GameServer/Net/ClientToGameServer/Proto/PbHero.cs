// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbHero.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbHero {

  /// <summary>Holder for reflection information generated from PbHero.proto</summary>
  public static partial class PbHeroReflection {

    #region Descriptor
    /// <summary>File descriptor for PbHero.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbHeroReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQYkhlcm8ucHJvdG8SBlBiSGVybyIeCg9DU19oZXJvX2xldmVsVXASCwoD",
            "U0lEGAEgASgFIjoKD1NDX2hlcm9fbGV2ZWxVcBILCgNTSUQYASABKAUSDQoF",
            "TGV2ZWwYAiABKAUSCwoDTnVtGAQgASgFIhwKDUNTX2hlcm9fYnJlYWsSCwoD",
            "U0lEGAEgASgFIlcKDVNDX2hlcm9fYnJlYWsSCwoDU0lEGAEgASgFEg0KBUxl",
            "dmVsGAIgASgFEgsKA0V4cBgDIAEoBRIPCgdCcmVha0x2GAQgASgFEgwKBExl",
            "ZnQYBSABKAUiKAoLQ1NfaGVyb19HZXQSCwoDU0lEGAEgASgFEgwKBFR5cGUY",
            "AiABKAUiVQoLU0NfaGVyb19HZXQSCwoDU0lEGAEgASgFEgwKBFR5cGUYAiAB",
            "KAUSDQoFTGV2ZWwYAyABKAUSCwoDRXhwGAQgASgFEg8KB0JyZWFrTHYYBSAB",
            "KAUiHQoOQ1NfaGVyb19DaGFuZ2USCwoDU0lEGAEgASgFIlMKDlNDX2hlcm9f",
            "Q2hhbmdlEgsKA1NJRBgBIAEoBRIMCgRDU2lkGAIgASgFEhIKCk5ld0luQ3V0",
            "SWQYAyABKAUSEgoKT2xkSW5DdXRJZBgEIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbHero.CS_hero_levelUp), global::PbHero.CS_hero_levelUp.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbHero.SC_hero_levelUp), global::PbHero.SC_hero_levelUp.Parser, new[]{ "SID", "Level", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbHero.CS_hero_break), global::PbHero.CS_hero_break.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbHero.SC_hero_break), global::PbHero.SC_hero_break.Parser, new[]{ "SID", "Level", "Exp", "BreakLv", "Left" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbHero.CS_hero_Get), global::PbHero.CS_hero_Get.Parser, new[]{ "SID", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbHero.SC_hero_Get), global::PbHero.SC_hero_Get.Parser, new[]{ "SID", "Type", "Level", "Exp", "BreakLv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbHero.CS_hero_Change), global::PbHero.CS_hero_Change.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbHero.SC_hero_Change), global::PbHero.SC_hero_Change.Parser, new[]{ "SID", "CSid", "NewInCutId", "OldInCutId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///请求英雄升级
  /// </summary>
  public sealed partial class CS_hero_levelUp : pb::IMessage<CS_hero_levelUp> {
    private static readonly pb::MessageParser<CS_hero_levelUp> _parser = new pb::MessageParser<CS_hero_levelUp>(() => new CS_hero_levelUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_hero_levelUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbHero.PbHeroReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_levelUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_levelUp(CS_hero_levelUp other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_levelUp Clone() {
      return new CS_hero_levelUp(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///英雄SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_hero_levelUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_hero_levelUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_hero_levelUp other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到英雄升级结果
  /// </summary>
  public sealed partial class SC_hero_levelUp : pb::IMessage<SC_hero_levelUp> {
    private static readonly pb::MessageParser<SC_hero_levelUp> _parser = new pb::MessageParser<SC_hero_levelUp>(() => new SC_hero_levelUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_hero_levelUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbHero.PbHeroReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_levelUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_levelUp(SC_hero_levelUp other) : this() {
      sID_ = other.sID_;
      level_ = other.level_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_levelUp Clone() {
      return new SC_hero_levelUp(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 4;
    private int num_;
    /// <summary>
    ///int32 Exp = 3;				//英雄经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_hero_levelUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_hero_levelUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Level != other.Level) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Num != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_hero_levelUp other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄突破
  /// </summary>
  public sealed partial class CS_hero_break : pb::IMessage<CS_hero_break> {
    private static readonly pb::MessageParser<CS_hero_break> _parser = new pb::MessageParser<CS_hero_break>(() => new CS_hero_break());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_hero_break> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbHero.PbHeroReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_break() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_break(CS_hero_break other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_break Clone() {
      return new CS_hero_break(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///英雄SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_hero_break);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_hero_break other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_hero_break other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到英雄突破结果
  /// </summary>
  public sealed partial class SC_hero_break : pb::IMessage<SC_hero_break> {
    private static readonly pb::MessageParser<SC_hero_break> _parser = new pb::MessageParser<SC_hero_break>(() => new SC_hero_break());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_hero_break> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbHero.PbHeroReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_break() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_break(SC_hero_break other) : this() {
      sID_ = other.sID_;
      level_ = other.level_;
      exp_ = other.exp_;
      breakLv_ = other.breakLv_;
      left_ = other.left_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_break Clone() {
      return new SC_hero_break(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///英雄SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    /// <summary>
    ///英雄经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "BreakLv" field.</summary>
    public const int BreakLvFieldNumber = 4;
    private int breakLv_;
    /// <summary>
    ///英雄突破等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakLv {
      get { return breakLv_; }
      set {
        breakLv_ = value;
      }
    }

    /// <summary>Field number for the "Left" field.</summary>
    public const int LeftFieldNumber = 5;
    private int left_;
    /// <summary>
    ///突破剩余道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_hero_break);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_hero_break other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (BreakLv != other.BreakLv) return false;
      if (Left != other.Left) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (BreakLv != 0) hash ^= BreakLv.GetHashCode();
      if (Left != 0) hash ^= Left.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
      if (BreakLv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BreakLv);
      }
      if (Left != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Left);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (BreakLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakLv);
      }
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_hero_break other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.BreakLv != 0) {
        BreakLv = other.BreakLv;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
          case 32: {
            BreakLv = input.ReadInt32();
            break;
          }
          case 40: {
            Left = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求英雄获取
  /// </summary>
  public sealed partial class CS_hero_Get : pb::IMessage<CS_hero_Get> {
    private static readonly pb::MessageParser<CS_hero_Get> _parser = new pb::MessageParser<CS_hero_Get>(() => new CS_hero_Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_hero_Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbHero.PbHeroReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_Get(CS_hero_Get other) : this() {
      sID_ = other.sID_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_Get Clone() {
      return new CS_hero_Get(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///英雄模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///获取类型（1 钻石购买 2 广告次数获取）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_hero_Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_hero_Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_hero_Get other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到英雄获取结果
  /// </summary>
  public sealed partial class SC_hero_Get : pb::IMessage<SC_hero_Get> {
    private static readonly pb::MessageParser<SC_hero_Get> _parser = new pb::MessageParser<SC_hero_Get>(() => new SC_hero_Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_hero_Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbHero.PbHeroReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_Get(SC_hero_Get other) : this() {
      sID_ = other.sID_;
      type_ = other.type_;
      level_ = other.level_;
      exp_ = other.exp_;
      breakLv_ = other.breakLv_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_Get Clone() {
      return new SC_hero_Get(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///英雄模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///获取类型（1 钻石购买 2 广告次数获取）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    ///英雄经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "BreakLv" field.</summary>
    public const int BreakLvFieldNumber = 5;
    private int breakLv_;
    /// <summary>
    ///英雄突破等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakLv {
      get { return breakLv_; }
      set {
        breakLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_hero_Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_hero_Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (BreakLv != other.BreakLv) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (BreakLv != 0) hash ^= BreakLv.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (BreakLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BreakLv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (BreakLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakLv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_hero_Get other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.BreakLv != 0) {
        BreakLv = other.BreakLv;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            BreakLv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求更换出战英雄
  /// </summary>
  public sealed partial class CS_hero_Change : pb::IMessage<CS_hero_Change> {
    private static readonly pb::MessageParser<CS_hero_Change> _parser = new pb::MessageParser<CS_hero_Change>(() => new CS_hero_Change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_hero_Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbHero.PbHeroReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_Change(CS_hero_Change other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hero_Change Clone() {
      return new CS_hero_Change(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///英雄模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_hero_Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_hero_Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_hero_Change other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到英雄获取结果
  /// </summary>
  public sealed partial class SC_hero_Change : pb::IMessage<SC_hero_Change> {
    private static readonly pb::MessageParser<SC_hero_Change> _parser = new pb::MessageParser<SC_hero_Change>(() => new SC_hero_Change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_hero_Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbHero.PbHeroReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_Change(SC_hero_Change other) : this() {
      sID_ = other.sID_;
      cSid_ = other.cSid_;
      newInCutId_ = other.newInCutId_;
      oldInCutId_ = other.oldInCutId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hero_Change Clone() {
      return new SC_hero_Change(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///出战英雄模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "CSid" field.</summary>
    public const int CSidFieldNumber = 2;
    private int cSid_;
    /// <summary>
    ///被替换英雄模板ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CSid {
      get { return cSid_; }
      set {
        cSid_ = value;
      }
    }

    /// <summary>Field number for the "NewInCutId" field.</summary>
    public const int NewInCutIdFieldNumber = 3;
    private int newInCutId_;
    /// <summary>
    ///新上阵英雄内刀id（默认装备上，为0表示没有此装备）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewInCutId {
      get { return newInCutId_; }
      set {
        newInCutId_ = value;
      }
    }

    /// <summary>Field number for the "OldInCutId" field.</summary>
    public const int OldInCutIdFieldNumber = 4;
    private int oldInCutId_;
    /// <summary>
    ///原始已装备内刀id（原位置无内刀为 0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldInCutId {
      get { return oldInCutId_; }
      set {
        oldInCutId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_hero_Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_hero_Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (CSid != other.CSid) return false;
      if (NewInCutId != other.NewInCutId) return false;
      if (OldInCutId != other.OldInCutId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (CSid != 0) hash ^= CSid.GetHashCode();
      if (NewInCutId != 0) hash ^= NewInCutId.GetHashCode();
      if (OldInCutId != 0) hash ^= OldInCutId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (CSid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CSid);
      }
      if (NewInCutId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NewInCutId);
      }
      if (OldInCutId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OldInCutId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (CSid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CSid);
      }
      if (NewInCutId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewInCutId);
      }
      if (OldInCutId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldInCutId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_hero_Change other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.CSid != 0) {
        CSid = other.CSid;
      }
      if (other.NewInCutId != 0) {
        NewInCutId = other.NewInCutId;
      }
      if (other.OldInCutId != 0) {
        OldInCutId = other.OldInCutId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            CSid = input.ReadInt32();
            break;
          }
          case 24: {
            NewInCutId = input.ReadInt32();
            break;
          }
          case 32: {
            OldInCutId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
