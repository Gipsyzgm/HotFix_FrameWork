// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbStore.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbStore {

  /// <summary>Holder for reflection information generated from PbStore.proto</summary>
  public static partial class PbStoreReflection {

    #region Descriptor
    /// <summary>File descriptor for PbStore.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbStoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1QYlN0b3JlLnByb3RvEgdQYlN0b3JlGgtQYkNvbS5wcm90byI3Cg5TQ19z",
            "dG9yZV9pbmZvcxIlCgRMaXN0GAEgAygLMhcuUGJTdG9yZS5PbmVfc3RvcmVf",
            "aW5mbyIpCg5PbmVfc3RvcmVfaW5mbxIKCgJJZBgBIAEoBRILCgNOdW0YAiAB",
            "KAUiKwoQQ1Nfc3RvcmVfYnV5SXRlbRIKCgJJZBgBIAEoBRILCgNOdW0YAiAB",
            "KAUiKwoQU0Nfc3RvcmVfYnV5SXRlbRIKCgJJZBgBIAEoBRILCgNOdW0YAiAB",
            "KAUiRQoTU0Nfc3RvcmVfRGFpbHlJdGVtcxIKCgJJZBgBIAEoBRIiCgRJdGVt",
            "GAIgAygLMhQuUGJDb20uT25lX0F3YXJkSXRlbSJeCg1DU19zdW1tb25fYnV5",
            "Ei0KClN1bW1vblR5cGUYASABKA4yGS5QYlN0b3JlLkVudW1fc3VtbW9uX3R5",
            "cGUSEAoIU3VtbW9uSWQYAiABKAUSDAoEVHlwZRgDIAEoBSLIAQoNU0Nfc3Vt",
            "bW9uX2J1eRIrCgZSZXN1bHQYASABKA4yGy5QYlN0b3JlLkVudW1fc3VtbW9u",
            "X3Jlc3VsdBItCgpTdW1tb25UeXBlGAIgASgOMhkuUGJTdG9yZS5FbnVtX3N1",
            "bW1vbl90eXBlEgwKBFR5cGUYAyABKAUSFAoMRnJlZU5leHRUaW1lGAQgASgF",
            "EhAKCEVxdWlwSWRzGAUgAygFEg8KB0hlcm9JZHMYBiADKAUSFAoMTW9udGhI",
            "ZXJvSWRzGAcgAygFIh4KEENTX3N0b3JlX0FEVGltZXMSCgoCSWQYASABKAUi",
            "NwoQU0Nfc3RvcmVfQURUaW1lcxIjCgRJbmZvGAEgAygLMhUuUGJTdG9yZS5P",
            "bmVfc3RvcmVfQWQiNgoMT25lX3N0b3JlX0FkEgoKAklkGAEgASgFEgsKA051",
            "bRgCIAEoBRINCgVBRE51bRgDIAEoBSIfChFDU19zdG9yZV9leGNoYW5nZRIK",
            "CgJJZBgBIAEoBSIfChFTQ19zdG9yZV9leGNoYW5nZRIKCgJJZBgBIAEoBSp+",
            "ChBFbnVtX3N1bW1vbl90eXBlEgwKCFN0Tm9ybWFsEAASDQoJU3RFbGVtZW50",
            "EAESDgoKU3RFUElDSGVybxACEg8KC1N0RVBJQ0VxdWlwEAMSCwoHU3REYWxp",
            "eRAEEg8KC1N0Q2hhbGxlbmdlEAUSDgoKU3RGZXN0aXZhbBAGKlEKEkVudW1f",
            "c3VtbW9uX3Jlc3VsdBINCglTclN1Y2NlZWQQABINCglTclVua25vd24QARIO",
            "CgpTck5vdE1vbmV5EAISDQoJU3JOb3RJdGVtEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbCom.PbComReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbStore.Enum_summon_type), typeof(global::PbStore.Enum_summon_result), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.SC_store_infos), global::PbStore.SC_store_infos.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.One_store_info), global::PbStore.One_store_info.Parser, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.CS_store_buyItem), global::PbStore.CS_store_buyItem.Parser, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.SC_store_buyItem), global::PbStore.SC_store_buyItem.Parser, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.SC_store_DailyItems), global::PbStore.SC_store_DailyItems.Parser, new[]{ "Id", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.CS_summon_buy), global::PbStore.CS_summon_buy.Parser, new[]{ "SummonType", "SummonId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.SC_summon_buy), global::PbStore.SC_summon_buy.Parser, new[]{ "Result", "SummonType", "Type", "FreeNextTime", "EquipIds", "HeroIds", "MonthHeroIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.CS_store_ADTimes), global::PbStore.CS_store_ADTimes.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.SC_store_ADTimes), global::PbStore.SC_store_ADTimes.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.One_store_Ad), global::PbStore.One_store_Ad.Parser, new[]{ "Id", "Num", "ADNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.CS_store_exchange), global::PbStore.CS_store_exchange.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbStore.SC_store_exchange), global::PbStore.SC_store_exchange.Parser, new[]{ "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///召唤类型
  /// </summary>
  public enum Enum_summon_type {
    [pbr::OriginalName("StNormal")] StNormal = 0,
    /// <summary>
    ///元素召唤
    /// </summary>
    [pbr::OriginalName("StElement")] StElement = 1,
    /// <summary>
    ///传奇英雄召唤
    /// </summary>
    [pbr::OriginalName("StEPICHero")] StEpichero = 2,
    /// <summary>
    ///传奇装备召唤
    /// </summary>
    [pbr::OriginalName("StEPICEquip")] StEpicequip = 3,
    /// <summary>
    ///每日召唤
    /// </summary>
    [pbr::OriginalName("StDaliy")] StDaliy = 4,
    /// <summary>
    ///挑战活动召唤
    /// </summary>
    [pbr::OriginalName("StChallenge")] StChallenge = 5,
    /// <summary>
    ///节日活动召唤
    /// </summary>
    [pbr::OriginalName("StFestival")] StFestival = 6,
  }

  /// <summary>
  ///召唤结果
  /// </summary>
  public enum Enum_summon_result {
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("SrSucceed")] SrSucceed = 0,
    /// <summary>
    ///未知错误
    /// </summary>
    [pbr::OriginalName("SrUnknown")] SrUnknown = 1,
    /// <summary>
    ///所需钻石不足
    /// </summary>
    [pbr::OriginalName("SrNotMoney")] SrNotMoney = 2,
    /// <summary>
    ///所需道具不足
    /// </summary>
    [pbr::OriginalName("SrNotItem")] SrNotItem = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///请求商城购买记录
  /// </summary>
  public sealed partial class SC_store_infos : pb::IMessage<SC_store_infos> {
    private static readonly pb::MessageParser<SC_store_infos> _parser = new pb::MessageParser<SC_store_infos>(() => new SC_store_infos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_store_infos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_infos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_infos(SC_store_infos other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_infos Clone() {
      return new SC_store_infos(this);
    }

    /// <summary>Field number for the "List" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbStore.One_store_info> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::PbStore.One_store_info.Parser);
    private readonly pbc::RepeatedField<global::PbStore.One_store_info> list_ = new pbc::RepeatedField<global::PbStore.One_store_info>();
    /// <summary>
    ///已购买Id(有次数限制会发)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbStore.One_store_info> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_store_infos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_store_infos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_store_infos other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个商品次数信息
  /// </summary>
  public sealed partial class One_store_info : pb::IMessage<One_store_info> {
    private static readonly pb::MessageParser<One_store_info> _parser = new pb::MessageParser<One_store_info>(() => new One_store_info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_store_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_store_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_store_info(One_store_info other) : this() {
      id_ = other.id_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_store_info Clone() {
      return new One_store_info(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///礼包Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///已购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_store_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_store_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_store_info other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求购买商城物品
  /// </summary>
  public sealed partial class CS_store_buyItem : pb::IMessage<CS_store_buyItem> {
    private static readonly pb::MessageParser<CS_store_buyItem> _parser = new pb::MessageParser<CS_store_buyItem>(() => new CS_store_buyItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_store_buyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_buyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_buyItem(CS_store_buyItem other) : this() {
      id_ = other.id_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_buyItem Clone() {
      return new CS_store_buyItem(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///购买的商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_store_buyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_store_buyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_store_buyItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到购买商城物品
  /// </summary>
  public sealed partial class SC_store_buyItem : pb::IMessage<SC_store_buyItem> {
    private static readonly pb::MessageParser<SC_store_buyItem> _parser = new pb::MessageParser<SC_store_buyItem>(() => new SC_store_buyItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_store_buyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_buyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_buyItem(SC_store_buyItem other) : this() {
      id_ = other.id_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_buyItem Clone() {
      return new SC_store_buyItem(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///购买的商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_store_buyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_store_buyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_store_buyItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求商城每日超级奖励内容
  /// </summary>
  public sealed partial class SC_store_DailyItems : pb::IMessage<SC_store_DailyItems> {
    private static readonly pb::MessageParser<SC_store_DailyItems> _parser = new pb::MessageParser<SC_store_DailyItems>(() => new SC_store_DailyItems());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_store_DailyItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_DailyItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_DailyItems(SC_store_DailyItems other) : this() {
      id_ = other.id_;
      item_ = other.item_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_DailyItems Clone() {
      return new SC_store_DailyItems(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///商城物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(18, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> item_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///一个奖励内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_store_DailyItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_store_DailyItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!item_.Equals(other.item_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= item_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_store_DailyItems other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      item_.Add(other.item_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求召唤
  /// </summary>
  public sealed partial class CS_summon_buy : pb::IMessage<CS_summon_buy> {
    private static readonly pb::MessageParser<CS_summon_buy> _parser = new pb::MessageParser<CS_summon_buy>(() => new CS_summon_buy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_summon_buy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_summon_buy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_summon_buy(CS_summon_buy other) : this() {
      summonType_ = other.summonType_;
      summonId_ = other.summonId_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_summon_buy Clone() {
      return new CS_summon_buy(this);
    }

    /// <summary>Field number for the "SummonType" field.</summary>
    public const int SummonTypeFieldNumber = 1;
    private global::PbStore.Enum_summon_type summonType_ = 0;
    /// <summary>
    ///召唤类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbStore.Enum_summon_type SummonType {
      get { return summonType_; }
      set {
        summonType_ = value;
      }
    }

    /// <summary>Field number for the "SummonId" field.</summary>
    public const int SummonIdFieldNumber = 2;
    private int summonId_;
    /// <summary>
    ///召唤Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SummonId {
      get { return summonId_; }
      set {
        summonId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///1单次 2十连抽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_summon_buy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_summon_buy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SummonType != other.SummonType) return false;
      if (SummonId != other.SummonId) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SummonType != 0) hash ^= SummonType.GetHashCode();
      if (SummonId != 0) hash ^= SummonId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SummonType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SummonType);
      }
      if (SummonId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SummonId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SummonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SummonType);
      }
      if (SummonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SummonId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_summon_buy other) {
      if (other == null) {
        return;
      }
      if (other.SummonType != 0) {
        SummonType = other.SummonType;
      }
      if (other.SummonId != 0) {
        SummonId = other.SummonId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            summonType_ = (global::PbStore.Enum_summon_type) input.ReadEnum();
            break;
          }
          case 16: {
            SummonId = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到召唤
  /// </summary>
  public sealed partial class SC_summon_buy : pb::IMessage<SC_summon_buy> {
    private static readonly pb::MessageParser<SC_summon_buy> _parser = new pb::MessageParser<SC_summon_buy>(() => new SC_summon_buy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_summon_buy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_summon_buy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_summon_buy(SC_summon_buy other) : this() {
      result_ = other.result_;
      summonType_ = other.summonType_;
      type_ = other.type_;
      freeNextTime_ = other.freeNextTime_;
      equipIds_ = other.equipIds_.Clone();
      heroIds_ = other.heroIds_.Clone();
      monthHeroIds_ = other.monthHeroIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_summon_buy Clone() {
      return new SC_summon_buy(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbStore.Enum_summon_result result_ = 0;
    /// <summary>
    ///召唤结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbStore.Enum_summon_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "SummonType" field.</summary>
    public const int SummonTypeFieldNumber = 2;
    private global::PbStore.Enum_summon_type summonType_ = 0;
    /// <summary>
    ///召唤类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbStore.Enum_summon_type SummonType {
      get { return summonType_; }
      set {
        summonType_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///1单次 2十连抽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "FreeNextTime" field.</summary>
    public const int FreeNextTimeFieldNumber = 4;
    private int freeNextTime_;
    /// <summary>
    ///下次免费时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeNextTime {
      get { return freeNextTime_; }
      set {
        freeNextTime_ = value;
      }
    }

    /// <summary>Field number for the "EquipIds" field.</summary>
    public const int EquipIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_equipIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> equipIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///获得的装备模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EquipIds {
      get { return equipIds_; }
    }

    /// <summary>Field number for the "HeroIds" field.</summary>
    public const int HeroIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_heroIds_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> heroIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///获得的英雄模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroIds {
      get { return heroIds_; }
    }

    /// <summary>Field number for the "MonthHeroIds" field.</summary>
    public const int MonthHeroIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_monthHeroIds_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> monthHeroIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///获得的月度英雄模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MonthHeroIds {
      get { return monthHeroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_summon_buy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_summon_buy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (SummonType != other.SummonType) return false;
      if (Type != other.Type) return false;
      if (FreeNextTime != other.FreeNextTime) return false;
      if(!equipIds_.Equals(other.equipIds_)) return false;
      if(!heroIds_.Equals(other.heroIds_)) return false;
      if(!monthHeroIds_.Equals(other.monthHeroIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (SummonType != 0) hash ^= SummonType.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (FreeNextTime != 0) hash ^= FreeNextTime.GetHashCode();
      hash ^= equipIds_.GetHashCode();
      hash ^= heroIds_.GetHashCode();
      hash ^= monthHeroIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (SummonType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SummonType);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (FreeNextTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeNextTime);
      }
      equipIds_.WriteTo(output, _repeated_equipIds_codec);
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
      monthHeroIds_.WriteTo(output, _repeated_monthHeroIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (SummonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SummonType);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (FreeNextTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeNextTime);
      }
      size += equipIds_.CalculateSize(_repeated_equipIds_codec);
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      size += monthHeroIds_.CalculateSize(_repeated_monthHeroIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_summon_buy other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.SummonType != 0) {
        SummonType = other.SummonType;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.FreeNextTime != 0) {
        FreeNextTime = other.FreeNextTime;
      }
      equipIds_.Add(other.equipIds_);
      heroIds_.Add(other.heroIds_);
      monthHeroIds_.Add(other.monthHeroIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbStore.Enum_summon_result) input.ReadEnum();
            break;
          }
          case 16: {
            summonType_ = (global::PbStore.Enum_summon_type) input.ReadEnum();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            FreeNextTime = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            equipIds_.AddEntriesFrom(input, _repeated_equipIds_codec);
            break;
          }
          case 50:
          case 48: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
          case 58:
          case 56: {
            monthHeroIds_.AddEntriesFrom(input, _repeated_monthHeroIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取一次商城广告奖励
  /// </summary>
  public sealed partial class CS_store_ADTimes : pb::IMessage<CS_store_ADTimes> {
    private static readonly pb::MessageParser<CS_store_ADTimes> _parser = new pb::MessageParser<CS_store_ADTimes>(() => new CS_store_ADTimes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_store_ADTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_ADTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_ADTimes(CS_store_ADTimes other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_ADTimes Clone() {
      return new CS_store_ADTimes(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///商城物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_store_ADTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_store_ADTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_store_ADTimes other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到商城广告获取物品剩余次数
  /// </summary>
  public sealed partial class SC_store_ADTimes : pb::IMessage<SC_store_ADTimes> {
    private static readonly pb::MessageParser<SC_store_ADTimes> _parser = new pb::MessageParser<SC_store_ADTimes>(() => new SC_store_ADTimes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_store_ADTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_ADTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_ADTimes(SC_store_ADTimes other) : this() {
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_ADTimes Clone() {
      return new SC_store_ADTimes(this);
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbStore.One_store_Ad> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::PbStore.One_store_Ad.Parser);
    private readonly pbc::RepeatedField<global::PbStore.One_store_Ad> info_ = new pbc::RepeatedField<global::PbStore.One_store_Ad>();
    /// <summary>
    ///一个商城物品详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbStore.One_store_Ad> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_store_ADTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_store_ADTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_store_ADTimes other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个广告物品次数信息
  /// </summary>
  public sealed partial class One_store_Ad : pb::IMessage<One_store_Ad> {
    private static readonly pb::MessageParser<One_store_Ad> _parser = new pb::MessageParser<One_store_Ad>(() => new One_store_Ad());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_store_Ad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_store_Ad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_store_Ad(One_store_Ad other) : this() {
      id_ = other.id_;
      num_ = other.num_;
      aDNum_ = other.aDNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_store_Ad Clone() {
      return new One_store_Ad(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///商城物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///剩余领取次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "ADNum" field.</summary>
    public const int ADNumFieldNumber = 3;
    private int aDNum_;
    /// <summary>
    ///已观看广告次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ADNum {
      get { return aDNum_; }
      set {
        aDNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_store_Ad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_store_Ad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      if (ADNum != other.ADNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (ADNum != 0) hash ^= ADNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (ADNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ADNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (ADNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ADNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_store_Ad other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.ADNum != 0) {
        ADNum = other.ADNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            ADNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求商城兑换金币
  /// </summary>
  public sealed partial class CS_store_exchange : pb::IMessage<CS_store_exchange> {
    private static readonly pb::MessageParser<CS_store_exchange> _parser = new pb::MessageParser<CS_store_exchange>(() => new CS_store_exchange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_store_exchange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_exchange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_exchange(CS_store_exchange other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_store_exchange Clone() {
      return new CS_store_exchange(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///商城物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_store_exchange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_store_exchange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_store_exchange other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到商城兑换金币
  /// </summary>
  public sealed partial class SC_store_exchange : pb::IMessage<SC_store_exchange> {
    private static readonly pb::MessageParser<SC_store_exchange> _parser = new pb::MessageParser<SC_store_exchange>(() => new SC_store_exchange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_store_exchange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbStore.PbStoreReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_exchange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_exchange(SC_store_exchange other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_store_exchange Clone() {
      return new SC_store_exchange(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///商城物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_store_exchange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_store_exchange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_store_exchange other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
