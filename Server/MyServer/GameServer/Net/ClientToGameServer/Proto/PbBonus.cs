// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbBonus.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbBonus {

  /// <summary>Holder for reflection information generated from PbBonus.proto</summary>
  public static partial class PbBonusReflection {

    #region Descriptor
    /// <summary>File descriptor for PbBonus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbBonusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1QYkJvbnVzLnByb3RvEgdQYkJvbnVzGgtQYkNvbS5wcm90byLzAwoNU0Nf",
            "Ym9udXNfaW5mbxIQCghMZXZlbElkcxgBIAMoBRIRCglTaWdJbkRheXMYAiAB",
            "KAUSEwoLU2lnbkluR3JvdXAYAyABKAUSEwoLRmJCb3hHZXRJZHMYBCADKAUS",
            "FwoPSGFuZ1VwQXdhcmRUaW1lGAUgASgFEhcKD0hlcm9GcmVlR2V0VGltZRgG",
            "IAEoBRIYChBFcXVpcEZyZWVHZXRUaW1lGAcgASgFEhIKCklzU2lnbkRvbmUY",
            "CCABKAgSFwoPQ2lyY2xlUmVzZXRUaW1lGAkgASgFEhYKDkNpcmNsZUZyZWVU",
            "aW1lGAogASgFEhMKC0NpcmNsZUJveElkGAsgAygFEhEKCUNpcmNsZU51bRgM",
            "IAEoBRIVCg1DaXJjbGVHcm91cElkGA0gASgFEhAKCFRocmVlSWRzGA4gAygF",
            "EhIKClRocmVlQWROdW0YDyABKAUSEgoKSXNUaHJlZUdldBgQIAEoCBISCgpG",
            "bG9hdEJveElkGBEgASgFEhIKCklzRmxvYXRHZXQYEiABKAgSFgoOR2VtRnJl",
            "ZUJ1eVRpbWUYEyABKAUSGgoSR2VtQ2hhbmdlRnJlc2hUaW1lGBQgASgFEi0K",
            "DUdlbUNoYW5nZUxpc3QYFSADKAsyFi5QYkJvbnVzLk9uZV9HZW1DaGFuZ2Ui",
            "XAoSU0NfdGFza05ld2JpZV9saXN0EhgKEElzTmV3YmllQ29tcGxldGUYASAB",
            "KAgSLAoLVGFza05ld2JpZXMYAiADKAsyFy5QYkJvbnVzLk9uZV9UYXNrTmV3",
            "YmllIi0KDU9uZV9HZW1DaGFuZ2USDgoGVGVtcElEGAEgASgFEgwKBExlZnQY",
            "AiABKAUiQQoOT25lX1Rhc2tOZXdiaWUSDgoGVGFza0lkGAEgASgFEhAKCFBy",
            "b2dyZXNzGAIgASgFEg0KBUlzR2V0GAMgASgIIiMKEUNTX3Rhc2tOZXdiaWVf",
            "Z2V0Eg4KBlRhc2tJZBgBIAEoBSIjChFTQ190YXNrTmV3YmllX2dldBIOCgZU",
            "YXNrSWQYASABKAUiOAoUU0NfdGFza05ld2JpZV9jaGFuZ2USDgoGVGFza0lk",
            "GAEgASgFEhAKCFByb2dyZXNzGAIgASgFIiIKEUNTX3Rhc2tOZXdiaWVfYm94",
            "Eg0KBU51bUlkGAEgASgFIkgKEVNDX3Rhc2tOZXdiaWVfYm94Eg0KBU51bUlk",
            "GAEgASgFEiQKBkF3YXJkcxgCIAMoCzIULlBiQ29tLk9uZV9Bd2FyZEl0ZW0i",
            "HQoPQ1Nfc2lnbkluX2F3YXJkEgoKAklEGAEgASgFIh0KD1NDX3NpZ25Jbl9h",
            "d2FyZBIKCgJJRBgBIAEoBSIUChJDU19vbmxpbmVBd2FyZF9nZXQiRAoSU0Nf",
            "b25saW5lQXdhcmRfZ2V0EhUKDU9ubGluZUF3YXJkSWQYASABKAUSFwoPT25s",
            "aW5lQXdhcmRUaW1lGAIgASgFIh0KD0NTX29wZW5GdW5kX2dldBIKCgJJRBgB",
            "IAEoBSIdCg9TQ19vcGVuRnVuZF9nZXQSCgoCSUQYASABKAUiHQoMQ1NfY2Rr",
            "ZXlfZ2V0Eg0KBUNka2V5GAEgASgJIjoKDFNDX2Nka2V5X2dldBIqCgZSZXN1",
            "bHQYASABKA4yGi5QYkJvbnVzLkVudW1fY2RrZXlfcmVzdWx0Ih8KEUNTX2xl",
            "dmVsQXdhcmRfZ2V0EgoKAklEGAEgASgFIh8KEVNDX2xldmVsQXdhcmRfZ2V0",
            "EgoKAklEGAEgASgFIh4KEENTX3RyZWFzdXJlX3NwaW4SCgoCSUQYASABKAUi",
            "PAoQU0NfdHJlYXN1cmVfc3BpbhIKCgJJRBgBIAEoBRIMCgRPZGRzGAIgASgF",
            "Eg4KBlRpY2tldBgDIAEoBSIrChFTQ190cmVhc3VyZV9zdGF0ZRIWCg5Jc1Ry",
            "ZWFzdXJlT3BlbhgBIAEoCCIsCgxDU19hZHNfYXdhcmQSDAoEdHlwZRgBIAEo",
            "BRIOCgZIZXJvSUQYAiABKAUiVQoMU0NfYWRzX2F3YXJkEg4KBkhlcm9JRBgB",
            "IAEoBRIRCglMZWZ0VGltZXMYAiABKAUSFAoMQ3VySGVyb0FETnVtGAMgASgF",
            "EgwKBHR5cGUYBCABKAUiDgoMQ1NfaGFuZ19PcGVuImUKDFNDX2hhbmdfT3Bl",
            "bhIMCgRnb2xkGAEgASgFEg4KBnRpY2tldBgCIAEoBRIUCgxUb3RhbFNlY29u",
            "ZHMYBCABKAUSIQoDb25lGAUgAygLMhQuUGJDb20uT25lX0F3YXJkSXRlbSIe",
            "CgtDU19oYW5nX0dldBIPCgdJc0FER2V0GAEgASgIIjMKC1NDX2hhbmdfR2V0",
            "EhMKC25leHRnZXRUaW1lGAEgASgFEg8KB0lzQURHZXQYAiABKAgiHgoOQ1Nf",
            "Qm94X0dldEhlcm8SDAoEVHlwZRgBIAEoBSJ8Cg5TQ19Cb3hfR2V0SGVybxIM",
            "CgRUeXBlGAEgASgFEhMKC25leHRnZXRUaW1lGAIgASgFEg4KBmhlcm9JZBgD",
            "IAEoBRIRCglJc0dldEhlcm8YBCABKAgSJAoGQXdhcmRzGAUgAygLMhQuUGJD",
            "b20uT25lX0F3YXJkSXRlbSIUChJDU19Cb3hfR2V0SGVyb2ZpdmUiXQoSU0Nf",
            "Qm94X0dldEhlcm9maXZlEg4KBmhlcm9JZBgBIAEoBRIRCglJc0dldEhlcm8Y",
            "AiABKAgSJAoGQXdhcmRzGAMgAygLMhQuUGJDb20uT25lX0F3YXJkSXRlbSIf",
            "Cg9DU19Cb3hfR2V0RXF1aXASDAoEVHlwZRgBIAEoBSJrCg9TQ19Cb3hfR2V0",
            "RXF1aXASDAoEVHlwZRgBIAEoBRITCgtuZXh0Z2V0VGltZRgCIAEoBRIPCgdF",
            "cXVpcElkGAMgASgFEiQKBkF3YXJkcxgEIAMoCzIULlBiQ29tLk9uZV9Bd2Fy",
            "ZEl0ZW0iFQoTQ1NfQm94X0dldEVxdWlwZml2ZSJMChNTQ19Cb3hfR2V0RXF1",
            "aXBmaXZlEg8KB0VxdWlwSWQYASABKAUSJAoGQXdhcmRzGAIgAygLMhQuUGJD",
            "b20uT25lX0F3YXJkSXRlbSITChFDU19UaHJlZWFkc19hd2FyZCI8ChFTQ19U",
            "aHJlZWFkc19hd2FyZBITCgtMZWZ0QWRUaW1lcxgBIAEoBRISCgpJc1RocmVl",
            "R2V0GAIgASgIIhsKDUNTX0NpcmNsZV9HZXQSCgoCSWQYASABKAUiRgoNU0Nf",
            "Q2lyY2xlX0dldBIKCgJJZBgBIAEoBRIRCglDaXJjbGVOdW0YAiABKAUSFgoO",
            "Q2lyY2xlRnJlZVRpbWUYAyABKAUiHgoQQ1NfQ2lyY2xlX0dldEJveBIKCgJJ",
            "ZBgBIAEoBSIeChBTQ19DaXJjbGVfR2V0Qm94EgoKAklkGAEgASgFIiIKEUNT",
            "X0Zsb2F0Qm94X2F3YXJkEg0KBWJveElEGAEgASgFIiIKEVNDX0Zsb2F0Qm94",
            "X2F3YXJkEg0KBWJveElEGAEgASgFIhUKE0NTX0FjaGlldmVtZW50X0xpc3Qi",
            "WQoTU0NfQWNoaWV2ZW1lbnRfTGlzdBImCgRsaXN0GAEgAygLMhguUGJCb251",
            "cy5PbmVfQWNoaWV2ZW1lbnQSDgoGQVBvaW50GAIgASgFEgoKAklkGAMgAygF",
            "IkcKD09uZV9BY2hpZXZlbWVudBIKCgJJZBgBIAEoBRINCgVMZXZlbBgCIAEo",
            "BRIMCgRUaW1lGAMgASgFEgsKA1BybxgEIAEoBSI+ChVTQ19BY2hpZXZlbWVu",
            "dF9maW5pc2gSJQoDb25lGAEgASgLMhguUGJCb251cy5PbmVfQWNoaWV2ZW1l",
            "bnQiJQoXQ1NfQWNoaWV2ZW1lbnRfR2V0QXdhcmQSCgoCSWQYASABKAUiJQoX",
            "U0NfQWNoaWV2ZW1lbnRfR2V0QXdhcmQSCgoCSWQYASADKAUiDwoNQ1NfR2Vt",
            "X0dldE9uZSJbCg1TQ19HZW1fR2V0T25lEg4KBkdlbVNJRBgBIAEoBRIUCgxO",
            "ZXh0RnJlZVRpbWUYAiABKAUSJAoGQXdhcmRzGAUgAygLMhQuUGJDb20uT25l",
            "X0F3YXJkSXRlbSIQCg5DU19HZW1fR2V0Rml2ZSJGCg5TQ19HZW1fR2V0Rml2",
            "ZRIOCgZHZW1TSUQYASABKAUSJAoGQXdhcmRzGAUgAygLMhQuUGJDb20uT25l",
            "X0F3YXJkSXRlbSIUChJDU19HZW1fRnJlc2hDaGFuZ2UiOgoSU0NfR2VtX0Zy",
            "ZXNoQ2hhbmdlEiQKBExpc3QYASADKAsyFi5QYkJvbnVzLk9uZV9HZW1DaGFu",
            "Z2UiGwoNQ1NfR2VtX0NoYW5nZRIKCgJJRBgBIAEoBSI1Cg1TQ19HZW1fQ2hh",
            "bmdlEiQKBExpc3QYASADKAsyFi5QYkJvbnVzLk9uZV9HZW1DaGFuZ2UqfgoR",
            "RW51bV9jZGtleV9yZXN1bHQSDQoJQ3JTdWNjZWVkEAASDQoJQ3JVbmtub3du",
            "EAESDQoJQ3JJbnZhbGlkEAISDQoJQ3JQYXN0RHVlEAMSCgoGQ3JVc2VkEAQS",
            "DgoKQ3JUeXBlVXNlZBAFEhEKDUNyVHlwZU1heFVzZWQQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbCom.PbComReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbBonus.Enum_cdkey_result), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_bonus_info), global::PbBonus.SC_bonus_info.Parser, new[]{ "LevelIds", "SigInDays", "SignInGroup", "FbBoxGetIds", "HangUpAwardTime", "HeroFreeGetTime", "EquipFreeGetTime", "IsSignDone", "CircleResetTime", "CircleFreeTime", "CircleBoxId", "CircleNum", "CircleGroupId", "ThreeIds", "ThreeAdNum", "IsThreeGet", "FloatBoxId", "IsFloatGet", "GemFreeBuyTime", "GemChangeFreshTime", "GemChangeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_taskNewbie_list), global::PbBonus.SC_taskNewbie_list.Parser, new[]{ "IsNewbieComplete", "TaskNewbies" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.One_GemChange), global::PbBonus.One_GemChange.Parser, new[]{ "TempID", "Left" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.One_TaskNewbie), global::PbBonus.One_TaskNewbie.Parser, new[]{ "TaskId", "Progress", "IsGet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_taskNewbie_get), global::PbBonus.CS_taskNewbie_get.Parser, new[]{ "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_taskNewbie_get), global::PbBonus.SC_taskNewbie_get.Parser, new[]{ "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_taskNewbie_change), global::PbBonus.SC_taskNewbie_change.Parser, new[]{ "TaskId", "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_taskNewbie_box), global::PbBonus.CS_taskNewbie_box.Parser, new[]{ "NumId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_taskNewbie_box), global::PbBonus.SC_taskNewbie_box.Parser, new[]{ "NumId", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_signIn_award), global::PbBonus.CS_signIn_award.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_signIn_award), global::PbBonus.SC_signIn_award.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_onlineAward_get), global::PbBonus.CS_onlineAward_get.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_onlineAward_get), global::PbBonus.SC_onlineAward_get.Parser, new[]{ "OnlineAwardId", "OnlineAwardTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_openFund_get), global::PbBonus.CS_openFund_get.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_openFund_get), global::PbBonus.SC_openFund_get.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_cdkey_get), global::PbBonus.CS_cdkey_get.Parser, new[]{ "Cdkey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_cdkey_get), global::PbBonus.SC_cdkey_get.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_levelAward_get), global::PbBonus.CS_levelAward_get.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_levelAward_get), global::PbBonus.SC_levelAward_get.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_treasure_spin), global::PbBonus.CS_treasure_spin.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_treasure_spin), global::PbBonus.SC_treasure_spin.Parser, new[]{ "ID", "Odds", "Ticket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_treasure_state), global::PbBonus.SC_treasure_state.Parser, new[]{ "IsTreasureOpen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_ads_award), global::PbBonus.CS_ads_award.Parser, new[]{ "Type", "HeroID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_ads_award), global::PbBonus.SC_ads_award.Parser, new[]{ "HeroID", "LeftTimes", "CurHeroADNum", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_hang_Open), global::PbBonus.CS_hang_Open.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_hang_Open), global::PbBonus.SC_hang_Open.Parser, new[]{ "Gold", "Ticket", "TotalSeconds", "One" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_hang_Get), global::PbBonus.CS_hang_Get.Parser, new[]{ "IsADGet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_hang_Get), global::PbBonus.SC_hang_Get.Parser, new[]{ "NextgetTime", "IsADGet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Box_GetHero), global::PbBonus.CS_Box_GetHero.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Box_GetHero), global::PbBonus.SC_Box_GetHero.Parser, new[]{ "Type", "NextgetTime", "HeroId", "IsGetHero", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Box_GetHerofive), global::PbBonus.CS_Box_GetHerofive.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Box_GetHerofive), global::PbBonus.SC_Box_GetHerofive.Parser, new[]{ "HeroId", "IsGetHero", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Box_GetEquip), global::PbBonus.CS_Box_GetEquip.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Box_GetEquip), global::PbBonus.SC_Box_GetEquip.Parser, new[]{ "Type", "NextgetTime", "EquipId", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Box_GetEquipfive), global::PbBonus.CS_Box_GetEquipfive.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Box_GetEquipfive), global::PbBonus.SC_Box_GetEquipfive.Parser, new[]{ "EquipId", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Threeads_award), global::PbBonus.CS_Threeads_award.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Threeads_award), global::PbBonus.SC_Threeads_award.Parser, new[]{ "LeftAdTimes", "IsThreeGet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Circle_Get), global::PbBonus.CS_Circle_Get.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Circle_Get), global::PbBonus.SC_Circle_Get.Parser, new[]{ "Id", "CircleNum", "CircleFreeTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Circle_GetBox), global::PbBonus.CS_Circle_GetBox.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Circle_GetBox), global::PbBonus.SC_Circle_GetBox.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_FloatBox_award), global::PbBonus.CS_FloatBox_award.Parser, new[]{ "BoxID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_FloatBox_award), global::PbBonus.SC_FloatBox_award.Parser, new[]{ "BoxID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Achievement_List), global::PbBonus.CS_Achievement_List.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Achievement_List), global::PbBonus.SC_Achievement_List.Parser, new[]{ "List", "APoint", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.One_Achievement), global::PbBonus.One_Achievement.Parser, new[]{ "Id", "Level", "Time", "Pro" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Achievement_finish), global::PbBonus.SC_Achievement_finish.Parser, new[]{ "One" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Achievement_GetAward), global::PbBonus.CS_Achievement_GetAward.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Achievement_GetAward), global::PbBonus.SC_Achievement_GetAward.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Gem_GetOne), global::PbBonus.CS_Gem_GetOne.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Gem_GetOne), global::PbBonus.SC_Gem_GetOne.Parser, new[]{ "GemSID", "NextFreeTime", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Gem_GetFive), global::PbBonus.CS_Gem_GetFive.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Gem_GetFive), global::PbBonus.SC_Gem_GetFive.Parser, new[]{ "GemSID", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Gem_FreshChange), global::PbBonus.CS_Gem_FreshChange.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Gem_FreshChange), global::PbBonus.SC_Gem_FreshChange.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.CS_Gem_Change), global::PbBonus.CS_Gem_Change.Parser, new[]{ "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbBonus.SC_Gem_Change), global::PbBonus.SC_Gem_Change.Parser, new[]{ "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///公用装备返回结果
  /// </summary>
  public enum Enum_cdkey_result {
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("CrSucceed")] CrSucceed = 0,
    /// <summary>
    ///未知错误
    /// </summary>
    [pbr::OriginalName("CrUnknown")] CrUnknown = 1,
    /// <summary>
    ///礼品码无效
    /// </summary>
    [pbr::OriginalName("CrInvalid")] CrInvalid = 2,
    /// <summary>
    ///礼品码已过期
    /// </summary>
    [pbr::OriginalName("CrPastDue")] CrPastDue = 3,
    /// <summary>
    ///此礼品码已经被使用
    /// </summary>
    [pbr::OriginalName("CrUsed")] CrUsed = 4,
    /// <summary>
    ///你已使用过此类礼品码
    /// </summary>
    [pbr::OriginalName("CrTypeUsed")] CrTypeUsed = 5,
    /// <summary>
    ///使用此类礼品码已达上限(同类CDKey使用次数>1的提示)
    /// </summary>
    [pbr::OriginalName("CrTypeMaxUsed")] CrTypeMaxUsed = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  ///收到福利信息(登录发)
  /// </summary>
  public sealed partial class SC_bonus_info : pb::IMessage<SC_bonus_info> {
    private static readonly pb::MessageParser<SC_bonus_info> _parser = new pb::MessageParser<SC_bonus_info>(() => new SC_bonus_info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_bonus_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bonus_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bonus_info(SC_bonus_info other) : this() {
      levelIds_ = other.levelIds_.Clone();
      sigInDays_ = other.sigInDays_;
      signInGroup_ = other.signInGroup_;
      fbBoxGetIds_ = other.fbBoxGetIds_.Clone();
      hangUpAwardTime_ = other.hangUpAwardTime_;
      heroFreeGetTime_ = other.heroFreeGetTime_;
      equipFreeGetTime_ = other.equipFreeGetTime_;
      isSignDone_ = other.isSignDone_;
      circleResetTime_ = other.circleResetTime_;
      circleFreeTime_ = other.circleFreeTime_;
      circleBoxId_ = other.circleBoxId_.Clone();
      circleNum_ = other.circleNum_;
      circleGroupId_ = other.circleGroupId_;
      threeIds_ = other.threeIds_.Clone();
      threeAdNum_ = other.threeAdNum_;
      isThreeGet_ = other.isThreeGet_;
      floatBoxId_ = other.floatBoxId_;
      isFloatGet_ = other.isFloatGet_;
      gemFreeBuyTime_ = other.gemFreeBuyTime_;
      gemChangeFreshTime_ = other.gemChangeFreshTime_;
      gemChangeList_ = other.gemChangeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_bonus_info Clone() {
      return new SC_bonus_info(this);
    }

    /// <summary>Field number for the "LevelIds" field.</summary>
    public const int LevelIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_levelIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> levelIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取等级奖励Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelIds {
      get { return levelIds_; }
    }

    /// <summary>Field number for the "SigInDays" field.</summary>
    public const int SigInDaysFieldNumber = 2;
    private int sigInDays_;
    /// <summary>
    ///已签到的天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SigInDays {
      get { return sigInDays_; }
      set {
        sigInDays_ = value;
      }
    }

    /// <summary>Field number for the "SignInGroup" field.</summary>
    public const int SignInGroupFieldNumber = 3;
    private int signInGroup_;
    /// <summary>
    ///签到当前组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignInGroup {
      get { return signInGroup_; }
      set {
        signInGroup_ = value;
      }
    }

    /// <summary>Field number for the "FbBoxGetIds" field.</summary>
    public const int FbBoxGetIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_fbBoxGetIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> fbBoxGetIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///章节宝箱已领取ids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FbBoxGetIds {
      get { return fbBoxGetIds_; }
    }

    /// <summary>Field number for the "HangUpAwardTime" field.</summary>
    public const int HangUpAwardTimeFieldNumber = 5;
    private int hangUpAwardTime_;
    /// <summary>
    ///挂机奖励可领取时间戳（0 表示未开启挂机奖励功能）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HangUpAwardTime {
      get { return hangUpAwardTime_; }
      set {
        hangUpAwardTime_ = value;
      }
    }

    /// <summary>Field number for the "HeroFreeGetTime" field.</summary>
    public const int HeroFreeGetTimeFieldNumber = 6;
    private int heroFreeGetTime_;
    /// <summary>
    ///免费抽取英雄时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroFreeGetTime {
      get { return heroFreeGetTime_; }
      set {
        heroFreeGetTime_ = value;
      }
    }

    /// <summary>Field number for the "EquipFreeGetTime" field.</summary>
    public const int EquipFreeGetTimeFieldNumber = 7;
    private int equipFreeGetTime_;
    /// <summary>
    ///免费抽取装备时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipFreeGetTime {
      get { return equipFreeGetTime_; }
      set {
        equipFreeGetTime_ = value;
      }
    }

    /// <summary>Field number for the "IsSignDone" field.</summary>
    public const int IsSignDoneFieldNumber = 8;
    private bool isSignDone_;
    /// <summary>
    ///今日是否已签到
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSignDone {
      get { return isSignDone_; }
      set {
        isSignDone_ = value;
      }
    }

    /// <summary>Field number for the "CircleResetTime" field.</summary>
    public const int CircleResetTimeFieldNumber = 9;
    private int circleResetTime_;
    /// <summary>
    ///转盘奖励重置时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CircleResetTime {
      get { return circleResetTime_; }
      set {
        circleResetTime_ = value;
      }
    }

    /// <summary>Field number for the "CircleFreeTime" field.</summary>
    public const int CircleFreeTimeFieldNumber = 10;
    private int circleFreeTime_;
    /// <summary>
    ///转盘免费抽取时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CircleFreeTime {
      get { return circleFreeTime_; }
      set {
        circleFreeTime_ = value;
      }
    }

    /// <summary>Field number for the "CircleBoxId" field.</summary>
    public const int CircleBoxIdFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_circleBoxId_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> circleBoxId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///转盘宝箱领取id（0 表示未领取，非0 表示最后领取id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CircleBoxId {
      get { return circleBoxId_; }
    }

    /// <summary>Field number for the "CircleNum" field.</summary>
    public const int CircleNumFieldNumber = 12;
    private int circleNum_;
    /// <summary>
    ///当前转盘次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CircleNum {
      get { return circleNum_; }
      set {
        circleNum_ = value;
      }
    }

    /// <summary>Field number for the "CircleGroupId" field.</summary>
    public const int CircleGroupIdFieldNumber = 13;
    private int circleGroupId_;
    /// <summary>
    ///当前转盘组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CircleGroupId {
      get { return circleGroupId_; }
      set {
        circleGroupId_ = value;
      }
    }

    /// <summary>Field number for the "ThreeIds" field.</summary>
    public const int ThreeIdsFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_threeIds_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> threeIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取3天奖励Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ThreeIds {
      get { return threeIds_; }
    }

    /// <summary>Field number for the "ThreeAdNum" field.</summary>
    public const int ThreeAdNumFieldNumber = 15;
    private int threeAdNum_;
    /// <summary>
    ///当前领取三日奖励剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThreeAdNum {
      get { return threeAdNum_; }
      set {
        threeAdNum_ = value;
      }
    }

    /// <summary>Field number for the "IsThreeGet" field.</summary>
    public const int IsThreeGetFieldNumber = 16;
    private bool isThreeGet_;
    /// <summary>
    ///是否当日已领取三日奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThreeGet {
      get { return isThreeGet_; }
      set {
        isThreeGet_ = value;
      }
    }

    /// <summary>Field number for the "FloatBoxId" field.</summary>
    public const int FloatBoxIdFieldNumber = 17;
    private int floatBoxId_;
    /// <summary>
    ///悬浮宝箱待领取id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FloatBoxId {
      get { return floatBoxId_; }
      set {
        floatBoxId_ = value;
      }
    }

    /// <summary>Field number for the "IsFloatGet" field.</summary>
    public const int IsFloatGetFieldNumber = 18;
    private bool isFloatGet_;
    /// <summary>
    ///是否当日已领取悬浮宝箱奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFloatGet {
      get { return isFloatGet_; }
      set {
        isFloatGet_ = value;
      }
    }

    /// <summary>Field number for the "GemFreeBuyTime" field.</summary>
    public const int GemFreeBuyTimeFieldNumber = 19;
    private int gemFreeBuyTime_;
    /// <summary>
    ///下一次宝石免费抽取时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemFreeBuyTime {
      get { return gemFreeBuyTime_; }
      set {
        gemFreeBuyTime_ = value;
      }
    }

    /// <summary>Field number for the "GemChangeFreshTime" field.</summary>
    public const int GemChangeFreshTimeFieldNumber = 20;
    private int gemChangeFreshTime_;
    /// <summary>
    ///精粹兑换刷新时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemChangeFreshTime {
      get { return gemChangeFreshTime_; }
      set {
        gemChangeFreshTime_ = value;
      }
    }

    /// <summary>Field number for the "GemChangeList" field.</summary>
    public const int GemChangeListFieldNumber = 21;
    private static readonly pb::FieldCodec<global::PbBonus.One_GemChange> _repeated_gemChangeList_codec
        = pb::FieldCodec.ForMessage(170, global::PbBonus.One_GemChange.Parser);
    private readonly pbc::RepeatedField<global::PbBonus.One_GemChange> gemChangeList_ = new pbc::RepeatedField<global::PbBonus.One_GemChange>();
    /// <summary>
    ///当前精粹兑换列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBonus.One_GemChange> GemChangeList {
      get { return gemChangeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_bonus_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_bonus_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!levelIds_.Equals(other.levelIds_)) return false;
      if (SigInDays != other.SigInDays) return false;
      if (SignInGroup != other.SignInGroup) return false;
      if(!fbBoxGetIds_.Equals(other.fbBoxGetIds_)) return false;
      if (HangUpAwardTime != other.HangUpAwardTime) return false;
      if (HeroFreeGetTime != other.HeroFreeGetTime) return false;
      if (EquipFreeGetTime != other.EquipFreeGetTime) return false;
      if (IsSignDone != other.IsSignDone) return false;
      if (CircleResetTime != other.CircleResetTime) return false;
      if (CircleFreeTime != other.CircleFreeTime) return false;
      if(!circleBoxId_.Equals(other.circleBoxId_)) return false;
      if (CircleNum != other.CircleNum) return false;
      if (CircleGroupId != other.CircleGroupId) return false;
      if(!threeIds_.Equals(other.threeIds_)) return false;
      if (ThreeAdNum != other.ThreeAdNum) return false;
      if (IsThreeGet != other.IsThreeGet) return false;
      if (FloatBoxId != other.FloatBoxId) return false;
      if (IsFloatGet != other.IsFloatGet) return false;
      if (GemFreeBuyTime != other.GemFreeBuyTime) return false;
      if (GemChangeFreshTime != other.GemChangeFreshTime) return false;
      if(!gemChangeList_.Equals(other.gemChangeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= levelIds_.GetHashCode();
      if (SigInDays != 0) hash ^= SigInDays.GetHashCode();
      if (SignInGroup != 0) hash ^= SignInGroup.GetHashCode();
      hash ^= fbBoxGetIds_.GetHashCode();
      if (HangUpAwardTime != 0) hash ^= HangUpAwardTime.GetHashCode();
      if (HeroFreeGetTime != 0) hash ^= HeroFreeGetTime.GetHashCode();
      if (EquipFreeGetTime != 0) hash ^= EquipFreeGetTime.GetHashCode();
      if (IsSignDone != false) hash ^= IsSignDone.GetHashCode();
      if (CircleResetTime != 0) hash ^= CircleResetTime.GetHashCode();
      if (CircleFreeTime != 0) hash ^= CircleFreeTime.GetHashCode();
      hash ^= circleBoxId_.GetHashCode();
      if (CircleNum != 0) hash ^= CircleNum.GetHashCode();
      if (CircleGroupId != 0) hash ^= CircleGroupId.GetHashCode();
      hash ^= threeIds_.GetHashCode();
      if (ThreeAdNum != 0) hash ^= ThreeAdNum.GetHashCode();
      if (IsThreeGet != false) hash ^= IsThreeGet.GetHashCode();
      if (FloatBoxId != 0) hash ^= FloatBoxId.GetHashCode();
      if (IsFloatGet != false) hash ^= IsFloatGet.GetHashCode();
      if (GemFreeBuyTime != 0) hash ^= GemFreeBuyTime.GetHashCode();
      if (GemChangeFreshTime != 0) hash ^= GemChangeFreshTime.GetHashCode();
      hash ^= gemChangeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      levelIds_.WriteTo(output, _repeated_levelIds_codec);
      if (SigInDays != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SigInDays);
      }
      if (SignInGroup != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SignInGroup);
      }
      fbBoxGetIds_.WriteTo(output, _repeated_fbBoxGetIds_codec);
      if (HangUpAwardTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HangUpAwardTime);
      }
      if (HeroFreeGetTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeroFreeGetTime);
      }
      if (EquipFreeGetTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EquipFreeGetTime);
      }
      if (IsSignDone != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsSignDone);
      }
      if (CircleResetTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CircleResetTime);
      }
      if (CircleFreeTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CircleFreeTime);
      }
      circleBoxId_.WriteTo(output, _repeated_circleBoxId_codec);
      if (CircleNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CircleNum);
      }
      if (CircleGroupId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CircleGroupId);
      }
      threeIds_.WriteTo(output, _repeated_threeIds_codec);
      if (ThreeAdNum != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ThreeAdNum);
      }
      if (IsThreeGet != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsThreeGet);
      }
      if (FloatBoxId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(FloatBoxId);
      }
      if (IsFloatGet != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsFloatGet);
      }
      if (GemFreeBuyTime != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(GemFreeBuyTime);
      }
      if (GemChangeFreshTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(GemChangeFreshTime);
      }
      gemChangeList_.WriteTo(output, _repeated_gemChangeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += levelIds_.CalculateSize(_repeated_levelIds_codec);
      if (SigInDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SigInDays);
      }
      if (SignInGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignInGroup);
      }
      size += fbBoxGetIds_.CalculateSize(_repeated_fbBoxGetIds_codec);
      if (HangUpAwardTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HangUpAwardTime);
      }
      if (HeroFreeGetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroFreeGetTime);
      }
      if (EquipFreeGetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipFreeGetTime);
      }
      if (IsSignDone != false) {
        size += 1 + 1;
      }
      if (CircleResetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CircleResetTime);
      }
      if (CircleFreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CircleFreeTime);
      }
      size += circleBoxId_.CalculateSize(_repeated_circleBoxId_codec);
      if (CircleNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CircleNum);
      }
      if (CircleGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CircleGroupId);
      }
      size += threeIds_.CalculateSize(_repeated_threeIds_codec);
      if (ThreeAdNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreeAdNum);
      }
      if (IsThreeGet != false) {
        size += 2 + 1;
      }
      if (FloatBoxId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FloatBoxId);
      }
      if (IsFloatGet != false) {
        size += 2 + 1;
      }
      if (GemFreeBuyTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GemFreeBuyTime);
      }
      if (GemChangeFreshTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GemChangeFreshTime);
      }
      size += gemChangeList_.CalculateSize(_repeated_gemChangeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_bonus_info other) {
      if (other == null) {
        return;
      }
      levelIds_.Add(other.levelIds_);
      if (other.SigInDays != 0) {
        SigInDays = other.SigInDays;
      }
      if (other.SignInGroup != 0) {
        SignInGroup = other.SignInGroup;
      }
      fbBoxGetIds_.Add(other.fbBoxGetIds_);
      if (other.HangUpAwardTime != 0) {
        HangUpAwardTime = other.HangUpAwardTime;
      }
      if (other.HeroFreeGetTime != 0) {
        HeroFreeGetTime = other.HeroFreeGetTime;
      }
      if (other.EquipFreeGetTime != 0) {
        EquipFreeGetTime = other.EquipFreeGetTime;
      }
      if (other.IsSignDone != false) {
        IsSignDone = other.IsSignDone;
      }
      if (other.CircleResetTime != 0) {
        CircleResetTime = other.CircleResetTime;
      }
      if (other.CircleFreeTime != 0) {
        CircleFreeTime = other.CircleFreeTime;
      }
      circleBoxId_.Add(other.circleBoxId_);
      if (other.CircleNum != 0) {
        CircleNum = other.CircleNum;
      }
      if (other.CircleGroupId != 0) {
        CircleGroupId = other.CircleGroupId;
      }
      threeIds_.Add(other.threeIds_);
      if (other.ThreeAdNum != 0) {
        ThreeAdNum = other.ThreeAdNum;
      }
      if (other.IsThreeGet != false) {
        IsThreeGet = other.IsThreeGet;
      }
      if (other.FloatBoxId != 0) {
        FloatBoxId = other.FloatBoxId;
      }
      if (other.IsFloatGet != false) {
        IsFloatGet = other.IsFloatGet;
      }
      if (other.GemFreeBuyTime != 0) {
        GemFreeBuyTime = other.GemFreeBuyTime;
      }
      if (other.GemChangeFreshTime != 0) {
        GemChangeFreshTime = other.GemChangeFreshTime;
      }
      gemChangeList_.Add(other.gemChangeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            levelIds_.AddEntriesFrom(input, _repeated_levelIds_codec);
            break;
          }
          case 16: {
            SigInDays = input.ReadInt32();
            break;
          }
          case 24: {
            SignInGroup = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            fbBoxGetIds_.AddEntriesFrom(input, _repeated_fbBoxGetIds_codec);
            break;
          }
          case 40: {
            HangUpAwardTime = input.ReadInt32();
            break;
          }
          case 48: {
            HeroFreeGetTime = input.ReadInt32();
            break;
          }
          case 56: {
            EquipFreeGetTime = input.ReadInt32();
            break;
          }
          case 64: {
            IsSignDone = input.ReadBool();
            break;
          }
          case 72: {
            CircleResetTime = input.ReadInt32();
            break;
          }
          case 80: {
            CircleFreeTime = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            circleBoxId_.AddEntriesFrom(input, _repeated_circleBoxId_codec);
            break;
          }
          case 96: {
            CircleNum = input.ReadInt32();
            break;
          }
          case 104: {
            CircleGroupId = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            threeIds_.AddEntriesFrom(input, _repeated_threeIds_codec);
            break;
          }
          case 120: {
            ThreeAdNum = input.ReadInt32();
            break;
          }
          case 128: {
            IsThreeGet = input.ReadBool();
            break;
          }
          case 136: {
            FloatBoxId = input.ReadInt32();
            break;
          }
          case 144: {
            IsFloatGet = input.ReadBool();
            break;
          }
          case 152: {
            GemFreeBuyTime = input.ReadInt32();
            break;
          }
          case 160: {
            GemChangeFreshTime = input.ReadInt32();
            break;
          }
          case 170: {
            gemChangeList_.AddEntriesFrom(input, _repeated_gemChangeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到新手任务列表(登录发、注册7天内0点推新)
  /// </summary>
  public sealed partial class SC_taskNewbie_list : pb::IMessage<SC_taskNewbie_list> {
    private static readonly pb::MessageParser<SC_taskNewbie_list> _parser = new pb::MessageParser<SC_taskNewbie_list>(() => new SC_taskNewbie_list());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_taskNewbie_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_list(SC_taskNewbie_list other) : this() {
      isNewbieComplete_ = other.isNewbieComplete_;
      taskNewbies_ = other.taskNewbies_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_list Clone() {
      return new SC_taskNewbie_list(this);
    }

    /// <summary>Field number for the "IsNewbieComplete" field.</summary>
    public const int IsNewbieCompleteFieldNumber = 1;
    private bool isNewbieComplete_;
    /// <summary>
    ///新手7天任务是否已全部完成（所有任务、宝箱都领奖了）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNewbieComplete {
      get { return isNewbieComplete_; }
      set {
        isNewbieComplete_ = value;
      }
    }

    /// <summary>Field number for the "TaskNewbies" field.</summary>
    public const int TaskNewbiesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbBonus.One_TaskNewbie> _repeated_taskNewbies_codec
        = pb::FieldCodec.ForMessage(18, global::PbBonus.One_TaskNewbie.Parser);
    private readonly pbc::RepeatedField<global::PbBonus.One_TaskNewbie> taskNewbies_ = new pbc::RepeatedField<global::PbBonus.One_TaskNewbie>();
    /// <summary>
    ///任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBonus.One_TaskNewbie> TaskNewbies {
      get { return taskNewbies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_taskNewbie_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_taskNewbie_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsNewbieComplete != other.IsNewbieComplete) return false;
      if(!taskNewbies_.Equals(other.taskNewbies_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsNewbieComplete != false) hash ^= IsNewbieComplete.GetHashCode();
      hash ^= taskNewbies_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsNewbieComplete != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsNewbieComplete);
      }
      taskNewbies_.WriteTo(output, _repeated_taskNewbies_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsNewbieComplete != false) {
        size += 1 + 1;
      }
      size += taskNewbies_.CalculateSize(_repeated_taskNewbies_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_taskNewbie_list other) {
      if (other == null) {
        return;
      }
      if (other.IsNewbieComplete != false) {
        IsNewbieComplete = other.IsNewbieComplete;
      }
      taskNewbies_.Add(other.taskNewbies_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsNewbieComplete = input.ReadBool();
            break;
          }
          case 18: {
            taskNewbies_.AddEntriesFrom(input, _repeated_taskNewbies_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个宝石兑换
  /// </summary>
  public sealed partial class One_GemChange : pb::IMessage<One_GemChange> {
    private static readonly pb::MessageParser<One_GemChange> _parser = new pb::MessageParser<One_GemChange>(() => new One_GemChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_GemChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_GemChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_GemChange(One_GemChange other) : this() {
      tempID_ = other.tempID_;
      left_ = other.left_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_GemChange Clone() {
      return new One_GemChange(this);
    }

    /// <summary>Field number for the "TempID" field.</summary>
    public const int TempIDFieldNumber = 1;
    private int tempID_;
    /// <summary>
    ///宝石模板ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TempID {
      get { return tempID_; }
      set {
        tempID_ = value;
      }
    }

    /// <summary>Field number for the "Left" field.</summary>
    public const int LeftFieldNumber = 2;
    private int left_;
    /// <summary>
    ///剩余可兑换次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_GemChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_GemChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TempID != other.TempID) return false;
      if (Left != other.Left) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TempID != 0) hash ^= TempID.GetHashCode();
      if (Left != 0) hash ^= Left.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TempID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TempID);
      }
      if (Left != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Left);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TempID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TempID);
      }
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_GemChange other) {
      if (other == null) {
        return;
      }
      if (other.TempID != 0) {
        TempID = other.TempID;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TempID = input.ReadInt32();
            break;
          }
          case 16: {
            Left = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个新手任务
  /// </summary>
  public sealed partial class One_TaskNewbie : pb::IMessage<One_TaskNewbie> {
    private static readonly pb::MessageParser<One_TaskNewbie> _parser = new pb::MessageParser<One_TaskNewbie>(() => new One_TaskNewbie());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_TaskNewbie> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_TaskNewbie() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_TaskNewbie(One_TaskNewbie other) : this() {
      taskId_ = other.taskId_;
      progress_ = other.progress_;
      isGet_ = other.isGet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_TaskNewbie Clone() {
      return new One_TaskNewbie(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "Progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    /// <summary>
    ///完成进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "IsGet" field.</summary>
    public const int IsGetFieldNumber = 3;
    private bool isGet_;
    /// <summary>
    ///奖励是否已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_TaskNewbie);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_TaskNewbie other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Progress != other.Progress) return false;
      if (IsGet != other.IsGet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (IsGet != false) hash ^= IsGet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (IsGet != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (IsGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_TaskNewbie other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.IsGet != false) {
        IsGet = other.IsGet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
          case 24: {
            IsGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求新手活动任务奖励
  /// </summary>
  public sealed partial class CS_taskNewbie_get : pb::IMessage<CS_taskNewbie_get> {
    private static readonly pb::MessageParser<CS_taskNewbie_get> _parser = new pb::MessageParser<CS_taskNewbie_get>(() => new CS_taskNewbie_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_taskNewbie_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskNewbie_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskNewbie_get(CS_taskNewbie_get other) : this() {
      taskId_ = other.taskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskNewbie_get Clone() {
      return new CS_taskNewbie_get(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_taskNewbie_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_taskNewbie_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_taskNewbie_get other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到新手活动任务奖励
  /// </summary>
  public sealed partial class SC_taskNewbie_get : pb::IMessage<SC_taskNewbie_get> {
    private static readonly pb::MessageParser<SC_taskNewbie_get> _parser = new pb::MessageParser<SC_taskNewbie_get>(() => new SC_taskNewbie_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_taskNewbie_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_get(SC_taskNewbie_get other) : this() {
      taskId_ = other.taskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_get Clone() {
      return new SC_taskNewbie_get(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_taskNewbie_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_taskNewbie_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_taskNewbie_get other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到单个新手活动任务进度发生改变
  /// </summary>
  public sealed partial class SC_taskNewbie_change : pb::IMessage<SC_taskNewbie_change> {
    private static readonly pb::MessageParser<SC_taskNewbie_change> _parser = new pb::MessageParser<SC_taskNewbie_change>(() => new SC_taskNewbie_change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_taskNewbie_change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_change(SC_taskNewbie_change other) : this() {
      taskId_ = other.taskId_;
      progress_ = other.progress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_change Clone() {
      return new SC_taskNewbie_change(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "Progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    /// <summary>
    ///完成进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_taskNewbie_change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_taskNewbie_change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Progress != other.Progress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_taskNewbie_change other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求新手活动宝箱进度奖励
  /// </summary>
  public sealed partial class CS_taskNewbie_box : pb::IMessage<CS_taskNewbie_box> {
    private static readonly pb::MessageParser<CS_taskNewbie_box> _parser = new pb::MessageParser<CS_taskNewbie_box>(() => new CS_taskNewbie_box());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_taskNewbie_box> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskNewbie_box() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskNewbie_box(CS_taskNewbie_box other) : this() {
      numId_ = other.numId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskNewbie_box Clone() {
      return new CS_taskNewbie_box(this);
    }

    /// <summary>Field number for the "NumId" field.</summary>
    public const int NumIdFieldNumber = 1;
    private int numId_;
    /// <summary>
    ///领取的宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumId {
      get { return numId_; }
      set {
        numId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_taskNewbie_box);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_taskNewbie_box other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumId != other.NumId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumId != 0) hash ^= NumId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_taskNewbie_box other) {
      if (other == null) {
        return;
      }
      if (other.NumId != 0) {
        NumId = other.NumId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到新手活动宝箱进度奖励
  /// </summary>
  public sealed partial class SC_taskNewbie_box : pb::IMessage<SC_taskNewbie_box> {
    private static readonly pb::MessageParser<SC_taskNewbie_box> _parser = new pb::MessageParser<SC_taskNewbie_box>(() => new SC_taskNewbie_box());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_taskNewbie_box> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_box() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_box(SC_taskNewbie_box other) : this() {
      numId_ = other.numId_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskNewbie_box Clone() {
      return new SC_taskNewbie_box(this);
    }

    /// <summary>Field number for the "NumId" field.</summary>
    public const int NumIdFieldNumber = 1;
    private int numId_;
    /// <summary>
    ///领取的宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumId {
      get { return numId_; }
      set {
        numId_ = value;
      }
    }

    /// <summary>Field number for the "Awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> awards_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///获得的奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_taskNewbie_box);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_taskNewbie_box other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumId != other.NumId) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumId != 0) hash ^= NumId.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumId);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumId);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_taskNewbie_box other) {
      if (other == null) {
        return;
      }
      if (other.NumId != 0) {
        NumId = other.NumId;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumId = input.ReadInt32();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求每日签到领奖
  /// </summary>
  public sealed partial class CS_signIn_award : pb::IMessage<CS_signIn_award> {
    private static readonly pb::MessageParser<CS_signIn_award> _parser = new pb::MessageParser<CS_signIn_award>(() => new CS_signIn_award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_signIn_award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_signIn_award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_signIn_award(CS_signIn_award other) : this() {
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_signIn_award Clone() {
      return new CS_signIn_award(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///签到ID（第1天：组id*100+1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_signIn_award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_signIn_award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_signIn_award other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到每日签到领奖
  /// </summary>
  public sealed partial class SC_signIn_award : pb::IMessage<SC_signIn_award> {
    private static readonly pb::MessageParser<SC_signIn_award> _parser = new pb::MessageParser<SC_signIn_award>(() => new SC_signIn_award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_signIn_award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_signIn_award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_signIn_award(SC_signIn_award other) : this() {
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_signIn_award Clone() {
      return new SC_signIn_award(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///签到ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_signIn_award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_signIn_award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_signIn_award other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取在线奖励
  /// </summary>
  public sealed partial class CS_onlineAward_get : pb::IMessage<CS_onlineAward_get> {
    private static readonly pb::MessageParser<CS_onlineAward_get> _parser = new pb::MessageParser<CS_onlineAward_get>(() => new CS_onlineAward_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_onlineAward_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_onlineAward_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_onlineAward_get(CS_onlineAward_get other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_onlineAward_get Clone() {
      return new CS_onlineAward_get(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_onlineAward_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_onlineAward_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_onlineAward_get other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到领取在线奖励
  /// </summary>
  public sealed partial class SC_onlineAward_get : pb::IMessage<SC_onlineAward_get> {
    private static readonly pb::MessageParser<SC_onlineAward_get> _parser = new pb::MessageParser<SC_onlineAward_get>(() => new SC_onlineAward_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_onlineAward_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_onlineAward_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_onlineAward_get(SC_onlineAward_get other) : this() {
      onlineAwardId_ = other.onlineAwardId_;
      onlineAwardTime_ = other.onlineAwardTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_onlineAward_get Clone() {
      return new SC_onlineAward_get(this);
    }

    /// <summary>Field number for the "OnlineAwardId" field.</summary>
    public const int OnlineAwardIdFieldNumber = 1;
    private int onlineAwardId_;
    /// <summary>
    ///当前已领取的在线奖励档位Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlineAwardId {
      get { return onlineAwardId_; }
      set {
        onlineAwardId_ = value;
      }
    }

    /// <summary>Field number for the "OnlineAwardTime" field.</summary>
    public const int OnlineAwardTimeFieldNumber = 2;
    private int onlineAwardTime_;
    /// <summary>
    ///在线奖励可领取时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlineAwardTime {
      get { return onlineAwardTime_; }
      set {
        onlineAwardTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_onlineAward_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_onlineAward_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlineAwardId != other.OnlineAwardId) return false;
      if (OnlineAwardTime != other.OnlineAwardTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlineAwardId != 0) hash ^= OnlineAwardId.GetHashCode();
      if (OnlineAwardTime != 0) hash ^= OnlineAwardTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlineAwardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OnlineAwardId);
      }
      if (OnlineAwardTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OnlineAwardTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlineAwardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineAwardId);
      }
      if (OnlineAwardTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineAwardTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_onlineAward_get other) {
      if (other == null) {
        return;
      }
      if (other.OnlineAwardId != 0) {
        OnlineAwardId = other.OnlineAwardId;
      }
      if (other.OnlineAwardTime != 0) {
        OnlineAwardTime = other.OnlineAwardTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OnlineAwardId = input.ReadInt32();
            break;
          }
          case 16: {
            OnlineAwardTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取开服基金
  /// </summary>
  public sealed partial class CS_openFund_get : pb::IMessage<CS_openFund_get> {
    private static readonly pb::MessageParser<CS_openFund_get> _parser = new pb::MessageParser<CS_openFund_get>(() => new CS_openFund_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_openFund_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_openFund_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_openFund_get(CS_openFund_get other) : this() {
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_openFund_get Clone() {
      return new CS_openFund_get(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///等级档次ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_openFund_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_openFund_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_openFund_get other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到领取开服基金
  /// </summary>
  public sealed partial class SC_openFund_get : pb::IMessage<SC_openFund_get> {
    private static readonly pb::MessageParser<SC_openFund_get> _parser = new pb::MessageParser<SC_openFund_get>(() => new SC_openFund_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_openFund_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_openFund_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_openFund_get(SC_openFund_get other) : this() {
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_openFund_get Clone() {
      return new SC_openFund_get(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///等级档次ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_openFund_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_openFund_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_openFund_get other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求兑换CDKey
  /// </summary>
  public sealed partial class CS_cdkey_get : pb::IMessage<CS_cdkey_get> {
    private static readonly pb::MessageParser<CS_cdkey_get> _parser = new pb::MessageParser<CS_cdkey_get>(() => new CS_cdkey_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_cdkey_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_cdkey_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_cdkey_get(CS_cdkey_get other) : this() {
      cdkey_ = other.cdkey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_cdkey_get Clone() {
      return new CS_cdkey_get(this);
    }

    /// <summary>Field number for the "Cdkey" field.</summary>
    public const int CdkeyFieldNumber = 1;
    private string cdkey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cdkey {
      get { return cdkey_; }
      set {
        cdkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_cdkey_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_cdkey_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cdkey != other.Cdkey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cdkey.Length != 0) hash ^= Cdkey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cdkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cdkey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cdkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cdkey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_cdkey_get other) {
      if (other == null) {
        return;
      }
      if (other.Cdkey.Length != 0) {
        Cdkey = other.Cdkey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cdkey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到兑换CDKey结果
  /// </summary>
  public sealed partial class SC_cdkey_get : pb::IMessage<SC_cdkey_get> {
    private static readonly pb::MessageParser<SC_cdkey_get> _parser = new pb::MessageParser<SC_cdkey_get>(() => new SC_cdkey_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_cdkey_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_cdkey_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_cdkey_get(SC_cdkey_get other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_cdkey_get Clone() {
      return new SC_cdkey_get(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbBonus.Enum_cdkey_result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBonus.Enum_cdkey_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_cdkey_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_cdkey_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_cdkey_get other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbBonus.Enum_cdkey_result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取等级奖励
  /// </summary>
  public sealed partial class CS_levelAward_get : pb::IMessage<CS_levelAward_get> {
    private static readonly pb::MessageParser<CS_levelAward_get> _parser = new pb::MessageParser<CS_levelAward_get>(() => new CS_levelAward_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_levelAward_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_levelAward_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_levelAward_get(CS_levelAward_get other) : this() {
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_levelAward_get Clone() {
      return new CS_levelAward_get(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///奖励(等级)ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_levelAward_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_levelAward_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_levelAward_get other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到领取等级奖励
  /// </summary>
  public sealed partial class SC_levelAward_get : pb::IMessage<SC_levelAward_get> {
    private static readonly pb::MessageParser<SC_levelAward_get> _parser = new pb::MessageParser<SC_levelAward_get>(() => new SC_levelAward_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_levelAward_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_levelAward_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_levelAward_get(SC_levelAward_get other) : this() {
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_levelAward_get Clone() {
      return new SC_levelAward_get(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///奖励(等级)ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_levelAward_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_levelAward_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_levelAward_get other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宝藏抽奖
  /// </summary>
  public sealed partial class CS_treasure_spin : pb::IMessage<CS_treasure_spin> {
    private static readonly pb::MessageParser<CS_treasure_spin> _parser = new pb::MessageParser<CS_treasure_spin>(() => new CS_treasure_spin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_treasure_spin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_treasure_spin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_treasure_spin(CS_treasure_spin other) : this() {
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_treasure_spin Clone() {
      return new CS_treasure_spin(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///宝藏id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_treasure_spin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_treasure_spin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_treasure_spin other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到宝藏抽奖
  /// </summary>
  public sealed partial class SC_treasure_spin : pb::IMessage<SC_treasure_spin> {
    private static readonly pb::MessageParser<SC_treasure_spin> _parser = new pb::MessageParser<SC_treasure_spin>(() => new SC_treasure_spin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_treasure_spin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_treasure_spin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_treasure_spin(SC_treasure_spin other) : this() {
      iD_ = other.iD_;
      odds_ = other.odds_;
      ticket_ = other.ticket_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_treasure_spin Clone() {
      return new SC_treasure_spin(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///宝藏id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Odds" field.</summary>
    public const int OddsFieldNumber = 2;
    private int odds_;
    /// <summary>
    ///中奖倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Odds {
      get { return odds_; }
      set {
        odds_ = value;
      }
    }

    /// <summary>Field number for the "Ticket" field.</summary>
    public const int TicketFieldNumber = 3;
    private int ticket_;
    /// <summary>
    ///获得的钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_treasure_spin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_treasure_spin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Odds != other.Odds) return false;
      if (Ticket != other.Ticket) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Odds != 0) hash ^= Odds.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Odds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Odds);
      }
      if (Ticket != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ticket);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Odds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odds);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_treasure_spin other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Odds != 0) {
        Odds = other.Odds;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Odds = input.ReadInt32();
            break;
          }
          case 24: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到宝藏开启状态（开启关闭时在线推送）
  /// </summary>
  public sealed partial class SC_treasure_state : pb::IMessage<SC_treasure_state> {
    private static readonly pb::MessageParser<SC_treasure_state> _parser = new pb::MessageParser<SC_treasure_state>(() => new SC_treasure_state());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_treasure_state> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_treasure_state() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_treasure_state(SC_treasure_state other) : this() {
      isTreasureOpen_ = other.isTreasureOpen_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_treasure_state Clone() {
      return new SC_treasure_state(this);
    }

    /// <summary>Field number for the "IsTreasureOpen" field.</summary>
    public const int IsTreasureOpenFieldNumber = 1;
    private bool isTreasureOpen_;
    /// <summary>
    ///宝藏是否开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTreasureOpen {
      get { return isTreasureOpen_; }
      set {
        isTreasureOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_treasure_state);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_treasure_state other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsTreasureOpen != other.IsTreasureOpen) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsTreasureOpen != false) hash ^= IsTreasureOpen.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsTreasureOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsTreasureOpen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsTreasureOpen != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_treasure_state other) {
      if (other == null) {
        return;
      }
      if (other.IsTreasureOpen != false) {
        IsTreasureOpen = other.IsTreasureOpen;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsTreasureOpen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取广告奖励
  /// </summary>
  public sealed partial class CS_ads_award : pb::IMessage<CS_ads_award> {
    private static readonly pb::MessageParser<CS_ads_award> _parser = new pb::MessageParser<CS_ads_award>(() => new CS_ads_award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ads_award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ads_award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ads_award(CS_ads_award other) : this() {
      type_ = other.type_;
      heroID_ = other.heroID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ads_award Clone() {
      return new CS_ads_award(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///广告类型（1 加体力 2 累计英雄次数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 2;
    private int heroID_;
    /// <summary>
    ///英雄模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ads_award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ads_award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (HeroID != other.HeroID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (HeroID != 0) hash ^= HeroID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (HeroID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ads_award other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.HeroID != 0) {
        HeroID = other.HeroID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            HeroID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到领取广告奖励
  /// </summary>
  public sealed partial class SC_ads_award : pb::IMessage<SC_ads_award> {
    private static readonly pb::MessageParser<SC_ads_award> _parser = new pb::MessageParser<SC_ads_award>(() => new SC_ads_award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_ads_award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ads_award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ads_award(SC_ads_award other) : this() {
      heroID_ = other.heroID_;
      leftTimes_ = other.leftTimes_;
      curHeroADNum_ = other.curHeroADNum_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ads_award Clone() {
      return new SC_ads_award(this);
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 1;
    private int heroID_;
    /// <summary>
    ///英雄模板id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    /// <summary>Field number for the "LeftTimes" field.</summary>
    public const int LeftTimesFieldNumber = 2;
    private int leftTimes_;
    /// <summary>
    ///当日获取体力剩余可观看广告次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTimes {
      get { return leftTimes_; }
      set {
        leftTimes_ = value;
      }
    }

    /// <summary>Field number for the "CurHeroADNum" field.</summary>
    public const int CurHeroADNumFieldNumber = 3;
    private int curHeroADNum_;
    /// <summary>
    ///当前英雄广告次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurHeroADNum {
      get { return curHeroADNum_; }
      set {
        curHeroADNum_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///广告类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_ads_award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_ads_award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroID != other.HeroID) return false;
      if (LeftTimes != other.LeftTimes) return false;
      if (CurHeroADNum != other.CurHeroADNum) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroID != 0) hash ^= HeroID.GetHashCode();
      if (LeftTimes != 0) hash ^= LeftTimes.GetHashCode();
      if (CurHeroADNum != 0) hash ^= CurHeroADNum.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroID);
      }
      if (LeftTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftTimes);
      }
      if (CurHeroADNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurHeroADNum);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      if (LeftTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTimes);
      }
      if (CurHeroADNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHeroADNum);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_ads_award other) {
      if (other == null) {
        return;
      }
      if (other.HeroID != 0) {
        HeroID = other.HeroID;
      }
      if (other.LeftTimes != 0) {
        LeftTimes = other.LeftTimes;
      }
      if (other.CurHeroADNum != 0) {
        CurHeroADNum = other.CurHeroADNum;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroID = input.ReadInt32();
            break;
          }
          case 16: {
            LeftTimes = input.ReadInt32();
            break;
          }
          case 24: {
            CurHeroADNum = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求打开挂机奖励页面
  /// </summary>
  public sealed partial class CS_hang_Open : pb::IMessage<CS_hang_Open> {
    private static readonly pb::MessageParser<CS_hang_Open> _parser = new pb::MessageParser<CS_hang_Open>(() => new CS_hang_Open());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_hang_Open> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hang_Open() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hang_Open(CS_hang_Open other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hang_Open Clone() {
      return new CS_hang_Open(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_hang_Open);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_hang_Open other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_hang_Open other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到打开挂机奖励页面
  /// </summary>
  public sealed partial class SC_hang_Open : pb::IMessage<SC_hang_Open> {
    private static readonly pb::MessageParser<SC_hang_Open> _parser = new pb::MessageParser<SC_hang_Open>(() => new SC_hang_Open());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_hang_Open> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hang_Open() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hang_Open(SC_hang_Open other) : this() {
      gold_ = other.gold_;
      ticket_ = other.ticket_;
      totalSeconds_ = other.totalSeconds_;
      one_ = other.one_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hang_Open Clone() {
      return new SC_hang_Open(this);
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private int gold_;
    /// <summary>
    ///奖励金币数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private int ticket_;
    /// <summary>
    ///奖励钻石数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "TotalSeconds" field.</summary>
    public const int TotalSecondsFieldNumber = 4;
    private int totalSeconds_;
    /// <summary>
    ///已探索时间（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalSeconds {
      get { return totalSeconds_; }
      set {
        totalSeconds_ = value;
      }
    }

    /// <summary>Field number for the "one" field.</summary>
    public const int OneFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_one_codec
        = pb::FieldCodec.ForMessage(42, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> one_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///奖励道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> One {
      get { return one_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_hang_Open);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_hang_Open other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      if (Ticket != other.Ticket) return false;
      if (TotalSeconds != other.TotalSeconds) return false;
      if(!one_.Equals(other.one_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (TotalSeconds != 0) hash ^= TotalSeconds.GetHashCode();
      hash ^= one_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gold);
      }
      if (Ticket != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ticket);
      }
      if (TotalSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalSeconds);
      }
      one_.WriteTo(output, _repeated_one_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (TotalSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalSeconds);
      }
      size += one_.CalculateSize(_repeated_one_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_hang_Open other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      if (other.TotalSeconds != 0) {
        TotalSeconds = other.TotalSeconds;
      }
      one_.Add(other.one_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gold = input.ReadInt32();
            break;
          }
          case 16: {
            Ticket = input.ReadInt32();
            break;
          }
          case 32: {
            TotalSeconds = input.ReadInt32();
            break;
          }
          case 42: {
            one_.AddEntriesFrom(input, _repeated_one_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取挂机奖励
  /// </summary>
  public sealed partial class CS_hang_Get : pb::IMessage<CS_hang_Get> {
    private static readonly pb::MessageParser<CS_hang_Get> _parser = new pb::MessageParser<CS_hang_Get>(() => new CS_hang_Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_hang_Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hang_Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hang_Get(CS_hang_Get other) : this() {
      isADGet_ = other.isADGet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_hang_Get Clone() {
      return new CS_hang_Get(this);
    }

    /// <summary>Field number for the "IsADGet" field.</summary>
    public const int IsADGetFieldNumber = 1;
    private bool isADGet_;
    /// <summary>
    ///是否广告双倍领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsADGet {
      get { return isADGet_; }
      set {
        isADGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_hang_Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_hang_Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsADGet != other.IsADGet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsADGet != false) hash ^= IsADGet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsADGet != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsADGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsADGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_hang_Get other) {
      if (other == null) {
        return;
      }
      if (other.IsADGet != false) {
        IsADGet = other.IsADGet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsADGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到领取挂机奖励结果
  /// </summary>
  public sealed partial class SC_hang_Get : pb::IMessage<SC_hang_Get> {
    private static readonly pb::MessageParser<SC_hang_Get> _parser = new pb::MessageParser<SC_hang_Get>(() => new SC_hang_Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_hang_Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hang_Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hang_Get(SC_hang_Get other) : this() {
      nextgetTime_ = other.nextgetTime_;
      isADGet_ = other.isADGet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_hang_Get Clone() {
      return new SC_hang_Get(this);
    }

    /// <summary>Field number for the "nextgetTime" field.</summary>
    public const int NextgetTimeFieldNumber = 1;
    private int nextgetTime_;
    /// <summary>
    ///下一次可领取奖励时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextgetTime {
      get { return nextgetTime_; }
      set {
        nextgetTime_ = value;
      }
    }

    /// <summary>Field number for the "IsADGet" field.</summary>
    public const int IsADGetFieldNumber = 2;
    private bool isADGet_;
    /// <summary>
    ///是否广告双倍领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsADGet {
      get { return isADGet_; }
      set {
        isADGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_hang_Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_hang_Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextgetTime != other.NextgetTime) return false;
      if (IsADGet != other.IsADGet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextgetTime != 0) hash ^= NextgetTime.GetHashCode();
      if (IsADGet != false) hash ^= IsADGet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextgetTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NextgetTime);
      }
      if (IsADGet != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsADGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextgetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextgetTime);
      }
      if (IsADGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_hang_Get other) {
      if (other == null) {
        return;
      }
      if (other.NextgetTime != 0) {
        NextgetTime = other.NextgetTime;
      }
      if (other.IsADGet != false) {
        IsADGet = other.IsADGet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextgetTime = input.ReadInt32();
            break;
          }
          case 16: {
            IsADGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求单抽英雄
  /// </summary>
  public sealed partial class CS_Box_GetHero : pb::IMessage<CS_Box_GetHero> {
    private static readonly pb::MessageParser<CS_Box_GetHero> _parser = new pb::MessageParser<CS_Box_GetHero>(() => new CS_Box_GetHero());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Box_GetHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetHero(CS_Box_GetHero other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetHero Clone() {
      return new CS_Box_GetHero(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1 广告免费获取 2 钻石获取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Box_GetHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Box_GetHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Box_GetHero other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到单抽英雄结果
  /// </summary>
  public sealed partial class SC_Box_GetHero : pb::IMessage<SC_Box_GetHero> {
    private static readonly pb::MessageParser<SC_Box_GetHero> _parser = new pb::MessageParser<SC_Box_GetHero>(() => new SC_Box_GetHero());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Box_GetHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetHero(SC_Box_GetHero other) : this() {
      type_ = other.type_;
      nextgetTime_ = other.nextgetTime_;
      heroId_ = other.heroId_;
      isGetHero_ = other.isGetHero_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetHero Clone() {
      return new SC_Box_GetHero(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1 广告免费获取 2 钻石获取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "nextgetTime" field.</summary>
    public const int NextgetTimeFieldNumber = 2;
    private int nextgetTime_;
    /// <summary>
    ///广告类型下一次免费获取时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextgetTime {
      get { return nextgetTime_; }
      set {
        nextgetTime_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private int heroId_;
    /// <summary>
    ///英雄id （为0表示获取失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "IsGetHero" field.</summary>
    public const int IsGetHeroFieldNumber = 4;
    private bool isGetHero_;
    /// <summary>
    ///是否已获得该英雄（true 为已获得英雄）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetHero {
      get { return isGetHero_; }
      set {
        isGetHero_ = value;
      }
    }

    /// <summary>Field number for the "Awards" field.</summary>
    public const int AwardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(42, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> awards_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///获得的补偿列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Box_GetHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Box_GetHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (NextgetTime != other.NextgetTime) return false;
      if (HeroId != other.HeroId) return false;
      if (IsGetHero != other.IsGetHero) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (NextgetTime != 0) hash ^= NextgetTime.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (IsGetHero != false) hash ^= IsGetHero.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (NextgetTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextgetTime);
      }
      if (HeroId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroId);
      }
      if (IsGetHero != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsGetHero);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (NextgetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextgetTime);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (IsGetHero != false) {
        size += 1 + 1;
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Box_GetHero other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.NextgetTime != 0) {
        NextgetTime = other.NextgetTime;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.IsGetHero != false) {
        IsGetHero = other.IsGetHero;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            NextgetTime = input.ReadInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadInt32();
            break;
          }
          case 32: {
            IsGetHero = input.ReadBool();
            break;
          }
          case 42: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求五连抽英雄
  /// </summary>
  public sealed partial class CS_Box_GetHerofive : pb::IMessage<CS_Box_GetHerofive> {
    private static readonly pb::MessageParser<CS_Box_GetHerofive> _parser = new pb::MessageParser<CS_Box_GetHerofive>(() => new CS_Box_GetHerofive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Box_GetHerofive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetHerofive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetHerofive(CS_Box_GetHerofive other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetHerofive Clone() {
      return new CS_Box_GetHerofive(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Box_GetHerofive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Box_GetHerofive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Box_GetHerofive other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到五连抽英雄结果
  /// </summary>
  public sealed partial class SC_Box_GetHerofive : pb::IMessage<SC_Box_GetHerofive> {
    private static readonly pb::MessageParser<SC_Box_GetHerofive> _parser = new pb::MessageParser<SC_Box_GetHerofive>(() => new SC_Box_GetHerofive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Box_GetHerofive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetHerofive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetHerofive(SC_Box_GetHerofive other) : this() {
      heroId_ = other.heroId_;
      isGetHero_ = other.isGetHero_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetHerofive Clone() {
      return new SC_Box_GetHerofive(this);
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private int heroId_;
    /// <summary>
    ///英雄id （为0表示获取失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "IsGetHero" field.</summary>
    public const int IsGetHeroFieldNumber = 2;
    private bool isGetHero_;
    /// <summary>
    ///是否已获得该英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetHero {
      get { return isGetHero_; }
      set {
        isGetHero_ = value;
      }
    }

    /// <summary>Field number for the "Awards" field.</summary>
    public const int AwardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(26, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> awards_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///获得的奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Box_GetHerofive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Box_GetHerofive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (IsGetHero != other.IsGetHero) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (IsGetHero != false) hash ^= IsGetHero.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (IsGetHero != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGetHero);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (IsGetHero != false) {
        size += 1 + 1;
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Box_GetHerofive other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.IsGetHero != false) {
        IsGetHero = other.IsGetHero;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            IsGetHero = input.ReadBool();
            break;
          }
          case 26: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求单抽装备
  /// </summary>
  public sealed partial class CS_Box_GetEquip : pb::IMessage<CS_Box_GetEquip> {
    private static readonly pb::MessageParser<CS_Box_GetEquip> _parser = new pb::MessageParser<CS_Box_GetEquip>(() => new CS_Box_GetEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Box_GetEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetEquip(CS_Box_GetEquip other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetEquip Clone() {
      return new CS_Box_GetEquip(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1 广告免费获取 2 钻石获取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Box_GetEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Box_GetEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Box_GetEquip other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到单抽装备结果
  /// </summary>
  public sealed partial class SC_Box_GetEquip : pb::IMessage<SC_Box_GetEquip> {
    private static readonly pb::MessageParser<SC_Box_GetEquip> _parser = new pb::MessageParser<SC_Box_GetEquip>(() => new SC_Box_GetEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Box_GetEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetEquip(SC_Box_GetEquip other) : this() {
      type_ = other.type_;
      nextgetTime_ = other.nextgetTime_;
      equipId_ = other.equipId_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetEquip Clone() {
      return new SC_Box_GetEquip(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1 广告免费获取 2 钻石获取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "nextgetTime" field.</summary>
    public const int NextgetTimeFieldNumber = 2;
    private int nextgetTime_;
    /// <summary>
    ///广告类型下一次免费获取时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextgetTime {
      get { return nextgetTime_; }
      set {
        nextgetTime_ = value;
      }
    }

    /// <summary>Field number for the "EquipId" field.</summary>
    public const int EquipIdFieldNumber = 3;
    private int equipId_;
    /// <summary>
    ///装备id （为0表示获取失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipId {
      get { return equipId_; }
      set {
        equipId_ = value;
      }
    }

    /// <summary>Field number for the "Awards" field.</summary>
    public const int AwardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(34, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> awards_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///获得的补偿列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Box_GetEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Box_GetEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (NextgetTime != other.NextgetTime) return false;
      if (EquipId != other.EquipId) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (NextgetTime != 0) hash ^= NextgetTime.GetHashCode();
      if (EquipId != 0) hash ^= EquipId.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (NextgetTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextgetTime);
      }
      if (EquipId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EquipId);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (NextgetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextgetTime);
      }
      if (EquipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipId);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Box_GetEquip other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.NextgetTime != 0) {
        NextgetTime = other.NextgetTime;
      }
      if (other.EquipId != 0) {
        EquipId = other.EquipId;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            NextgetTime = input.ReadInt32();
            break;
          }
          case 24: {
            EquipId = input.ReadInt32();
            break;
          }
          case 34: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求五连抽装备
  /// </summary>
  public sealed partial class CS_Box_GetEquipfive : pb::IMessage<CS_Box_GetEquipfive> {
    private static readonly pb::MessageParser<CS_Box_GetEquipfive> _parser = new pb::MessageParser<CS_Box_GetEquipfive>(() => new CS_Box_GetEquipfive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Box_GetEquipfive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetEquipfive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetEquipfive(CS_Box_GetEquipfive other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Box_GetEquipfive Clone() {
      return new CS_Box_GetEquipfive(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Box_GetEquipfive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Box_GetEquipfive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Box_GetEquipfive other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到五连抽装备结果
  /// </summary>
  public sealed partial class SC_Box_GetEquipfive : pb::IMessage<SC_Box_GetEquipfive> {
    private static readonly pb::MessageParser<SC_Box_GetEquipfive> _parser = new pb::MessageParser<SC_Box_GetEquipfive>(() => new SC_Box_GetEquipfive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Box_GetEquipfive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetEquipfive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetEquipfive(SC_Box_GetEquipfive other) : this() {
      equipId_ = other.equipId_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Box_GetEquipfive Clone() {
      return new SC_Box_GetEquipfive(this);
    }

    /// <summary>Field number for the "EquipId" field.</summary>
    public const int EquipIdFieldNumber = 1;
    private int equipId_;
    /// <summary>
    ///装备id （为0表示获取失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipId {
      get { return equipId_; }
      set {
        equipId_ = value;
      }
    }

    /// <summary>Field number for the "Awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> awards_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///获得的奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Box_GetEquipfive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Box_GetEquipfive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipId != other.EquipId) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipId != 0) hash ^= EquipId.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EquipId);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipId);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Box_GetEquipfive other) {
      if (other == null) {
        return;
      }
      if (other.EquipId != 0) {
        EquipId = other.EquipId;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipId = input.ReadInt32();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求三日奖励广告获取
  /// </summary>
  public sealed partial class CS_Threeads_award : pb::IMessage<CS_Threeads_award> {
    private static readonly pb::MessageParser<CS_Threeads_award> _parser = new pb::MessageParser<CS_Threeads_award>(() => new CS_Threeads_award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Threeads_award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Threeads_award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Threeads_award(CS_Threeads_award other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Threeads_award Clone() {
      return new CS_Threeads_award(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Threeads_award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Threeads_award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Threeads_award other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到三日奖励广告获取结果
  /// </summary>
  public sealed partial class SC_Threeads_award : pb::IMessage<SC_Threeads_award> {
    private static readonly pb::MessageParser<SC_Threeads_award> _parser = new pb::MessageParser<SC_Threeads_award>(() => new SC_Threeads_award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Threeads_award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Threeads_award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Threeads_award(SC_Threeads_award other) : this() {
      leftAdTimes_ = other.leftAdTimes_;
      isThreeGet_ = other.isThreeGet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Threeads_award Clone() {
      return new SC_Threeads_award(this);
    }

    /// <summary>Field number for the "LeftAdTimes" field.</summary>
    public const int LeftAdTimesFieldNumber = 1;
    private int leftAdTimes_;
    /// <summary>
    ///剩余开启广告次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftAdTimes {
      get { return leftAdTimes_; }
      set {
        leftAdTimes_ = value;
      }
    }

    /// <summary>Field number for the "IsThreeGet" field.</summary>
    public const int IsThreeGetFieldNumber = 2;
    private bool isThreeGet_;
    /// <summary>
    ///是否当日已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThreeGet {
      get { return isThreeGet_; }
      set {
        isThreeGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Threeads_award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Threeads_award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftAdTimes != other.LeftAdTimes) return false;
      if (IsThreeGet != other.IsThreeGet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftAdTimes != 0) hash ^= LeftAdTimes.GetHashCode();
      if (IsThreeGet != false) hash ^= IsThreeGet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftAdTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeftAdTimes);
      }
      if (IsThreeGet != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsThreeGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftAdTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftAdTimes);
      }
      if (IsThreeGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Threeads_award other) {
      if (other == null) {
        return;
      }
      if (other.LeftAdTimes != 0) {
        LeftAdTimes = other.LeftAdTimes;
      }
      if (other.IsThreeGet != false) {
        IsThreeGet = other.IsThreeGet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeftAdTimes = input.ReadInt32();
            break;
          }
          case 16: {
            IsThreeGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求转盘奖励
  /// </summary>
  public sealed partial class CS_Circle_Get : pb::IMessage<CS_Circle_Get> {
    private static readonly pb::MessageParser<CS_Circle_Get> _parser = new pb::MessageParser<CS_Circle_Get>(() => new CS_Circle_Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Circle_Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Circle_Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Circle_Get(CS_Circle_Get other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Circle_Get Clone() {
      return new CS_Circle_Get(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Circle_Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Circle_Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Circle_Get other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到转盘奖励
  /// </summary>
  public sealed partial class SC_Circle_Get : pb::IMessage<SC_Circle_Get> {
    private static readonly pb::MessageParser<SC_Circle_Get> _parser = new pb::MessageParser<SC_Circle_Get>(() => new SC_Circle_Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Circle_Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Circle_Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Circle_Get(SC_Circle_Get other) : this() {
      id_ = other.id_;
      circleNum_ = other.circleNum_;
      circleFreeTime_ = other.circleFreeTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Circle_Get Clone() {
      return new SC_Circle_Get(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "CircleNum" field.</summary>
    public const int CircleNumFieldNumber = 2;
    private int circleNum_;
    /// <summary>
    ///当前转盘次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CircleNum {
      get { return circleNum_; }
      set {
        circleNum_ = value;
      }
    }

    /// <summary>Field number for the "CircleFreeTime" field.</summary>
    public const int CircleFreeTimeFieldNumber = 3;
    private int circleFreeTime_;
    /// <summary>
    ///免费转动时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CircleFreeTime {
      get { return circleFreeTime_; }
      set {
        circleFreeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Circle_Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Circle_Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CircleNum != other.CircleNum) return false;
      if (CircleFreeTime != other.CircleFreeTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CircleNum != 0) hash ^= CircleNum.GetHashCode();
      if (CircleFreeTime != 0) hash ^= CircleFreeTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CircleNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CircleNum);
      }
      if (CircleFreeTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CircleFreeTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CircleNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CircleNum);
      }
      if (CircleFreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CircleFreeTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Circle_Get other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CircleNum != 0) {
        CircleNum = other.CircleNum;
      }
      if (other.CircleFreeTime != 0) {
        CircleFreeTime = other.CircleFreeTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CircleNum = input.ReadInt32();
            break;
          }
          case 24: {
            CircleFreeTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求开启转盘宝箱
  /// </summary>
  public sealed partial class CS_Circle_GetBox : pb::IMessage<CS_Circle_GetBox> {
    private static readonly pb::MessageParser<CS_Circle_GetBox> _parser = new pb::MessageParser<CS_Circle_GetBox>(() => new CS_Circle_GetBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Circle_GetBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Circle_GetBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Circle_GetBox(CS_Circle_GetBox other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Circle_GetBox Clone() {
      return new CS_Circle_GetBox(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Circle_GetBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Circle_GetBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Circle_GetBox other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到开启转盘宝箱
  /// </summary>
  public sealed partial class SC_Circle_GetBox : pb::IMessage<SC_Circle_GetBox> {
    private static readonly pb::MessageParser<SC_Circle_GetBox> _parser = new pb::MessageParser<SC_Circle_GetBox>(() => new SC_Circle_GetBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Circle_GetBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Circle_GetBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Circle_GetBox(SC_Circle_GetBox other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Circle_GetBox Clone() {
      return new SC_Circle_GetBox(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Circle_GetBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Circle_GetBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Circle_GetBox other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求悬浮宝箱广告获取
  /// </summary>
  public sealed partial class CS_FloatBox_award : pb::IMessage<CS_FloatBox_award> {
    private static readonly pb::MessageParser<CS_FloatBox_award> _parser = new pb::MessageParser<CS_FloatBox_award>(() => new CS_FloatBox_award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_FloatBox_award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FloatBox_award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FloatBox_award(CS_FloatBox_award other) : this() {
      boxID_ = other.boxID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_FloatBox_award Clone() {
      return new CS_FloatBox_award(this);
    }

    /// <summary>Field number for the "boxID" field.</summary>
    public const int BoxIDFieldNumber = 1;
    private int boxID_;
    /// <summary>
    ///宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_FloatBox_award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_FloatBox_award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoxID != other.BoxID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoxID != 0) hash ^= BoxID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoxID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_FloatBox_award other) {
      if (other == null) {
        return;
      }
      if (other.BoxID != 0) {
        BoxID = other.BoxID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到悬浮宝箱广告获取结果
  /// </summary>
  public sealed partial class SC_FloatBox_award : pb::IMessage<SC_FloatBox_award> {
    private static readonly pb::MessageParser<SC_FloatBox_award> _parser = new pb::MessageParser<SC_FloatBox_award>(() => new SC_FloatBox_award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_FloatBox_award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_FloatBox_award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_FloatBox_award(SC_FloatBox_award other) : this() {
      boxID_ = other.boxID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_FloatBox_award Clone() {
      return new SC_FloatBox_award(this);
    }

    /// <summary>Field number for the "boxID" field.</summary>
    public const int BoxIDFieldNumber = 1;
    private int boxID_;
    /// <summary>
    ///宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_FloatBox_award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_FloatBox_award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoxID != other.BoxID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoxID != 0) hash ^= BoxID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoxID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_FloatBox_award other) {
      if (other == null) {
        return;
      }
      if (other.BoxID != 0) {
        BoxID = other.BoxID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求成就列表
  /// </summary>
  public sealed partial class CS_Achievement_List : pb::IMessage<CS_Achievement_List> {
    private static readonly pb::MessageParser<CS_Achievement_List> _parser = new pb::MessageParser<CS_Achievement_List>(() => new CS_Achievement_List());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Achievement_List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Achievement_List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Achievement_List(CS_Achievement_List other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Achievement_List Clone() {
      return new CS_Achievement_List(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Achievement_List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Achievement_List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Achievement_List other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到成就列表
  /// </summary>
  public sealed partial class SC_Achievement_List : pb::IMessage<SC_Achievement_List> {
    private static readonly pb::MessageParser<SC_Achievement_List> _parser = new pb::MessageParser<SC_Achievement_List>(() => new SC_Achievement_List());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Achievement_List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_List(SC_Achievement_List other) : this() {
      list_ = other.list_.Clone();
      aPoint_ = other.aPoint_;
      id_ = other.id_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_List Clone() {
      return new SC_Achievement_List(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbBonus.One_Achievement> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::PbBonus.One_Achievement.Parser);
    private readonly pbc::RepeatedField<global::PbBonus.One_Achievement> list_ = new pbc::RepeatedField<global::PbBonus.One_Achievement>();
    /// <summary>
    ///宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBonus.One_Achievement> List {
      get { return list_; }
    }

    /// <summary>Field number for the "APoint" field.</summary>
    public const int APointFieldNumber = 2;
    private int aPoint_;
    /// <summary>
    ///累计成就点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int APoint {
      get { return aPoint_; }
      set {
        aPoint_ = value;
      }
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_id_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> id_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领奖励Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Achievement_List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Achievement_List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      if (APoint != other.APoint) return false;
      if(!id_.Equals(other.id_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (APoint != 0) hash ^= APoint.GetHashCode();
      hash ^= id_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (APoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(APoint);
      }
      id_.WriteTo(output, _repeated_id_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (APoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(APoint);
      }
      size += id_.CalculateSize(_repeated_id_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Achievement_List other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      if (other.APoint != 0) {
        APoint = other.APoint;
      }
      id_.Add(other.id_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 16: {
            APoint = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个成就信息
  /// </summary>
  public sealed partial class One_Achievement : pb::IMessage<One_Achievement> {
    private static readonly pb::MessageParser<One_Achievement> _parser = new pb::MessageParser<One_Achievement>(() => new One_Achievement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_Achievement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Achievement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Achievement(One_Achievement other) : this() {
      id_ = other.id_;
      level_ = other.level_;
      time_ = other.time_;
      pro_ = other.pro_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Achievement Clone() {
      return new One_Achievement(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///成就Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 3;
    private int time_;
    /// <summary>
    ///当前等级达成时间（0级时间为0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "Pro" field.</summary>
    public const int ProFieldNumber = 4;
    private int pro_;
    /// <summary>
    ///当前进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pro {
      get { return pro_; }
      set {
        pro_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_Achievement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_Achievement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Level != other.Level) return false;
      if (Time != other.Time) return false;
      if (Pro != other.Pro) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Pro != 0) hash ^= Pro.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Time);
      }
      if (Pro != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Pro);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Pro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pro);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_Achievement other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Pro != 0) {
        Pro = other.Pro;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt32();
            break;
          }
          case 32: {
            Pro = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到成就达成信息
  /// </summary>
  public sealed partial class SC_Achievement_finish : pb::IMessage<SC_Achievement_finish> {
    private static readonly pb::MessageParser<SC_Achievement_finish> _parser = new pb::MessageParser<SC_Achievement_finish>(() => new SC_Achievement_finish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Achievement_finish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_finish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_finish(SC_Achievement_finish other) : this() {
      One = other.one_ != null ? other.One.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_finish Clone() {
      return new SC_Achievement_finish(this);
    }

    /// <summary>Field number for the "one" field.</summary>
    public const int OneFieldNumber = 1;
    private global::PbBonus.One_Achievement one_;
    /// <summary>
    ///当前已达成成就详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbBonus.One_Achievement One {
      get { return one_; }
      set {
        one_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Achievement_finish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Achievement_finish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(One, other.One)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (one_ != null) hash ^= One.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (one_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(One);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (one_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(One);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Achievement_finish other) {
      if (other == null) {
        return;
      }
      if (other.one_ != null) {
        if (one_ == null) {
          one_ = new global::PbBonus.One_Achievement();
        }
        One.MergeFrom(other.One);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (one_ == null) {
              one_ = new global::PbBonus.One_Achievement();
            }
            input.ReadMessage(one_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取成就奖励
  /// </summary>
  public sealed partial class CS_Achievement_GetAward : pb::IMessage<CS_Achievement_GetAward> {
    private static readonly pb::MessageParser<CS_Achievement_GetAward> _parser = new pb::MessageParser<CS_Achievement_GetAward>(() => new CS_Achievement_GetAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Achievement_GetAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Achievement_GetAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Achievement_GetAward(CS_Achievement_GetAward other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Achievement_GetAward Clone() {
      return new CS_Achievement_GetAward(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///奖励Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Achievement_GetAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Achievement_GetAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Achievement_GetAward other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到领取成就奖励
  /// </summary>
  public sealed partial class SC_Achievement_GetAward : pb::IMessage<SC_Achievement_GetAward> {
    private static readonly pb::MessageParser<SC_Achievement_GetAward> _parser = new pb::MessageParser<SC_Achievement_GetAward>(() => new SC_Achievement_GetAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Achievement_GetAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_GetAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_GetAward(SC_Achievement_GetAward other) : this() {
      id_ = other.id_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Achievement_GetAward Clone() {
      return new SC_Achievement_GetAward(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_id_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> id_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领奖励Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Achievement_GetAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Achievement_GetAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!id_.Equals(other.id_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= id_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Achievement_GetAward other) {
      if (other == null) {
        return;
      }
      id_.Add(other.id_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求单抽宝石
  /// </summary>
  public sealed partial class CS_Gem_GetOne : pb::IMessage<CS_Gem_GetOne> {
    private static readonly pb::MessageParser<CS_Gem_GetOne> _parser = new pb::MessageParser<CS_Gem_GetOne>(() => new CS_Gem_GetOne());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Gem_GetOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_GetOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_GetOne(CS_Gem_GetOne other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_GetOne Clone() {
      return new CS_Gem_GetOne(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Gem_GetOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Gem_GetOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Gem_GetOne other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到单抽宝石结果
  /// </summary>
  public sealed partial class SC_Gem_GetOne : pb::IMessage<SC_Gem_GetOne> {
    private static readonly pb::MessageParser<SC_Gem_GetOne> _parser = new pb::MessageParser<SC_Gem_GetOne>(() => new SC_Gem_GetOne());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Gem_GetOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_GetOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_GetOne(SC_Gem_GetOne other) : this() {
      gemSID_ = other.gemSID_;
      nextFreeTime_ = other.nextFreeTime_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_GetOne Clone() {
      return new SC_Gem_GetOne(this);
    }

    /// <summary>Field number for the "GemSID" field.</summary>
    public const int GemSIDFieldNumber = 1;
    private int gemSID_;
    /// <summary>
    ///宝石SID（0为获取失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemSID {
      get { return gemSID_; }
      set {
        gemSID_ = value;
      }
    }

    /// <summary>Field number for the "NextFreeTime" field.</summary>
    public const int NextFreeTimeFieldNumber = 2;
    private int nextFreeTime_;
    /// <summary>
    ///下一次免费抽取时间戳（免费抽取时刷新）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextFreeTime {
      get { return nextFreeTime_; }
      set {
        nextFreeTime_ = value;
      }
    }

    /// <summary>Field number for the "Awards" field.</summary>
    public const int AwardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(42, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> awards_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///获得的补偿列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Gem_GetOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Gem_GetOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GemSID != other.GemSID) return false;
      if (NextFreeTime != other.NextFreeTime) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GemSID != 0) hash ^= GemSID.GetHashCode();
      if (NextFreeTime != 0) hash ^= NextFreeTime.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GemSID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GemSID);
      }
      if (NextFreeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextFreeTime);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GemSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemSID);
      }
      if (NextFreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextFreeTime);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Gem_GetOne other) {
      if (other == null) {
        return;
      }
      if (other.GemSID != 0) {
        GemSID = other.GemSID;
      }
      if (other.NextFreeTime != 0) {
        NextFreeTime = other.NextFreeTime;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GemSID = input.ReadInt32();
            break;
          }
          case 16: {
            NextFreeTime = input.ReadInt32();
            break;
          }
          case 42: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求五连抽宝石
  /// </summary>
  public sealed partial class CS_Gem_GetFive : pb::IMessage<CS_Gem_GetFive> {
    private static readonly pb::MessageParser<CS_Gem_GetFive> _parser = new pb::MessageParser<CS_Gem_GetFive>(() => new CS_Gem_GetFive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Gem_GetFive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_GetFive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_GetFive(CS_Gem_GetFive other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_GetFive Clone() {
      return new CS_Gem_GetFive(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Gem_GetFive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Gem_GetFive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Gem_GetFive other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到五连抽宝石结果
  /// </summary>
  public sealed partial class SC_Gem_GetFive : pb::IMessage<SC_Gem_GetFive> {
    private static readonly pb::MessageParser<SC_Gem_GetFive> _parser = new pb::MessageParser<SC_Gem_GetFive>(() => new SC_Gem_GetFive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Gem_GetFive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_GetFive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_GetFive(SC_Gem_GetFive other) : this() {
      gemSID_ = other.gemSID_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_GetFive Clone() {
      return new SC_Gem_GetFive(this);
    }

    /// <summary>Field number for the "GemSID" field.</summary>
    public const int GemSIDFieldNumber = 1;
    private int gemSID_;
    /// <summary>
    ///宝石SID（0为获取失败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemSID {
      get { return gemSID_; }
      set {
        gemSID_ = value;
      }
    }

    /// <summary>Field number for the "Awards" field.</summary>
    public const int AwardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PbCom.One_AwardItem> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(42, global::PbCom.One_AwardItem.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_AwardItem> awards_ = new pbc::RepeatedField<global::PbCom.One_AwardItem>();
    /// <summary>
    ///获得的补偿列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_AwardItem> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Gem_GetFive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Gem_GetFive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GemSID != other.GemSID) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GemSID != 0) hash ^= GemSID.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GemSID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GemSID);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GemSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemSID);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Gem_GetFive other) {
      if (other == null) {
        return;
      }
      if (other.GemSID != 0) {
        GemSID = other.GemSID;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GemSID = input.ReadInt32();
            break;
          }
          case 42: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求刷新精粹兑换
  /// </summary>
  public sealed partial class CS_Gem_FreshChange : pb::IMessage<CS_Gem_FreshChange> {
    private static readonly pb::MessageParser<CS_Gem_FreshChange> _parser = new pb::MessageParser<CS_Gem_FreshChange>(() => new CS_Gem_FreshChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Gem_FreshChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_FreshChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_FreshChange(CS_Gem_FreshChange other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_FreshChange Clone() {
      return new CS_Gem_FreshChange(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Gem_FreshChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Gem_FreshChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Gem_FreshChange other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到刷新精粹兑换
  /// </summary>
  public sealed partial class SC_Gem_FreshChange : pb::IMessage<SC_Gem_FreshChange> {
    private static readonly pb::MessageParser<SC_Gem_FreshChange> _parser = new pb::MessageParser<SC_Gem_FreshChange>(() => new SC_Gem_FreshChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Gem_FreshChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_FreshChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_FreshChange(SC_Gem_FreshChange other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_FreshChange Clone() {
      return new SC_Gem_FreshChange(this);
    }

    /// <summary>Field number for the "List" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbBonus.One_GemChange> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::PbBonus.One_GemChange.Parser);
    private readonly pbc::RepeatedField<global::PbBonus.One_GemChange> list_ = new pbc::RepeatedField<global::PbBonus.One_GemChange>();
    /// <summary>
    ///当前精粹兑换列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBonus.One_GemChange> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Gem_FreshChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Gem_FreshChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Gem_FreshChange other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求精粹兑换
  /// </summary>
  public sealed partial class CS_Gem_Change : pb::IMessage<CS_Gem_Change> {
    private static readonly pb::MessageParser<CS_Gem_Change> _parser = new pb::MessageParser<CS_Gem_Change>(() => new CS_Gem_Change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Gem_Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_Change(CS_Gem_Change other) : this() {
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Gem_Change Clone() {
      return new CS_Gem_Change(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    /// <summary>
    ///兑换宝石模板ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Gem_Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Gem_Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Gem_Change other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到精粹兑换
  /// </summary>
  public sealed partial class SC_Gem_Change : pb::IMessage<SC_Gem_Change> {
    private static readonly pb::MessageParser<SC_Gem_Change> _parser = new pb::MessageParser<SC_Gem_Change>(() => new SC_Gem_Change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Gem_Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbBonus.PbBonusReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_Change(SC_Gem_Change other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Gem_Change Clone() {
      return new SC_Gem_Change(this);
    }

    /// <summary>Field number for the "List" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbBonus.One_GemChange> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::PbBonus.One_GemChange.Parser);
    private readonly pbc::RepeatedField<global::PbBonus.One_GemChange> list_ = new pbc::RepeatedField<global::PbBonus.One_GemChange>();
    /// <summary>
    ///当前精粹兑换列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbBonus.One_GemChange> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Gem_Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Gem_Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Gem_Change other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
