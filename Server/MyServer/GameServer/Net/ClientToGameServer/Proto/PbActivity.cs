// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbActivity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbActivity {

  /// <summary>Holder for reflection information generated from PbActivity.proto</summary>
  public static partial class PbActivityReflection {

    #region Descriptor
    /// <summary>File descriptor for PbActivity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbActivityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQYkFjdGl2aXR5LnByb3RvEgpQYkFjdGl2aXR5IhIKEENTX0FjdGl2aXR5",
            "X0luZm8iyAEKEFNDX0FjdGl2aXR5X0luZm8SLgoMQWN0aXZpdHlMaXN0GAEg",
            "AygLMhguUGJBY3Rpdml0eS5PbmVfQWN0aXZpdHkSKgoEUGFjaxgCIAMoCzIc",
            "LlBiQWN0aXZpdHkuT25lX0FjdGl2aXR5UGFjaxIVCg1DZWxlYnJhdGVkTnVt",
            "GAMgASgFEjEKC0dldEF3YXJkSWRzGAQgAygLMhwuUGJBY3Rpdml0eS5PbmVf",
            "QWN0aXZpdHlDZWxlEg4KBkN1ckRheRgFIAEoBSJ1CgxPbmVfQWN0aXZpdHkS",
            "CwoDQUlEGAEgASgFEgsKA01JRBgCIAEoBRINCgVTdGFydBgDIAEoBRILCgNF",
            "bmQYBCABKAUSLwoIVGFza0xpc3QYBSADKAsyHS5QYkFjdGl2aXR5Lk9uZV9B",
            "Y3Rpdml0eV9UYXNrIi8KEE9uZV9BY3Rpdml0eUNlbGUSCgoCSWQYASABKAUS",
            "DwoHSW5kZXhJZBgCIAMoBSJXChBPbmVfQWN0aXZpdHlQYWNrEg4KBlBhY2tJ",
            "ZBgBIAEoBRIOCgZJc09wZW4YAiABKAgSDwoHTGVmdE51bRgDIAEoBRISCgpM",
            "ZWZ0QnV5TnVtGAQgASgFIrIBChFPbmVfQWN0aXZpdHlfVGFzaxIOCgZUYWNr",
            "SWQYASABKAUSCwoDTUlEGAIgASgFEgwKBFR5cGUYAyABKAUSEQoJQ29uZGl0",
            "aW9uGAQgAygFEhAKCFByb2dyZXNzGAUgASgFEi0KBUF3YXJkGAYgAygLMh4u",
            "UGJBY3Rpdml0eS5PbmVfQWN0aXZpdHlfQXdhcmQSDQoFSXNHZXQYByABKAgS",
            "DwoHT3JkZXJJZBgIIAEoBSIzChJPbmVfQWN0aXZpdHlfQXdhcmQSDgoGSXRl",
            "bUlkGAEgASgFEg0KBUNvdW50GAIgASgFIkMKElNDX0FjdGl2aXR5X0NoYW5n",
            "ZRIOCgZUYXNrSWQYASABKAUSEAoIUHJvZ3Jlc3MYAiABKAUSCwoDTWlkGAMg",
            "ASgFIiEKD0NTX0FjdGl2aXR5X0dldBIOCgZUYXNrSWQYASABKAUiTwoPU0Nf",
            "QWN0aXZpdHlfR2V0Eg4KBlRhc2tJZBgBIAEoBRIQCghQcm9ncmVzcxgCIAEo",
            "BRINCgVJc0dldBgDIAEoCBILCgNNaWQYBCABKAUiIgoUQ1NfQWN0aXZpeXRf",
            "cGFja09wZW4SCgoCSWQYASABKAUiRwoUU0NfQWN0aXZpeXRfcGFja09wZW4S",
            "CgoCSWQYASABKAUSDwoHTGVmdE51bRgCIAEoBRISCgpMZWZ0QnV5TnVtGAMg",
            "ASgFIhcKFUNTX0FjdGl2aXl0X3BhY2tGcmVzaCJDChVTQ19BY3Rpdml5dF9w",
            "YWNrRnJlc2gSKgoEUGFjaxgBIAMoCzIcLlBiQWN0aXZpdHkuT25lX0FjdGl2",
            "aXR5UGFjayIVChNDU19BY3Rpdml5dF9BbGxPcGVuIkgKE1NDX0FjdGl2aXl0",
            "X0FsbE9wZW4SMQoLR2V0QXdhcmRJZHMYASADKAsyHC5QYkFjdGl2aXR5Lk9u",
            "ZV9BY3Rpdml0eUNlbGUiMwoTQ1NfQWN0aXZpeXRfT3Blbk9uZRINCgVEYXlJ",
            "RBgBIAEoBRINCgVJbmRleBgCIAEoBSJIChNTQ19BY3Rpdml5dF9PcGVuT25l",
            "EjEKC0dldEF3YXJkSWRzGAEgAygLMhwuUGJBY3Rpdml0eS5PbmVfQWN0aXZp",
            "dHlDZWxlIhQKElNDX0FjdGl2aXl0X1VwZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.CS_Activity_Info), global::PbActivity.CS_Activity_Info.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.SC_Activity_Info), global::PbActivity.SC_Activity_Info.Parser, new[]{ "ActivityList", "Pack", "CelebratedNum", "GetAwardIds", "CurDay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.One_Activity), global::PbActivity.One_Activity.Parser, new[]{ "AID", "MID", "Start", "End", "TaskList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.One_ActivityCele), global::PbActivity.One_ActivityCele.Parser, new[]{ "Id", "IndexId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.One_ActivityPack), global::PbActivity.One_ActivityPack.Parser, new[]{ "PackId", "IsOpen", "LeftNum", "LeftBuyNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.One_Activity_Task), global::PbActivity.One_Activity_Task.Parser, new[]{ "TackId", "MID", "Type", "Condition", "Progress", "Award", "IsGet", "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.One_Activity_Award), global::PbActivity.One_Activity_Award.Parser, new[]{ "ItemId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.SC_Activity_Change), global::PbActivity.SC_Activity_Change.Parser, new[]{ "TaskId", "Progress", "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.CS_Activity_Get), global::PbActivity.CS_Activity_Get.Parser, new[]{ "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.SC_Activity_Get), global::PbActivity.SC_Activity_Get.Parser, new[]{ "TaskId", "Progress", "IsGet", "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.CS_Activiyt_packOpen), global::PbActivity.CS_Activiyt_packOpen.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.SC_Activiyt_packOpen), global::PbActivity.SC_Activiyt_packOpen.Parser, new[]{ "Id", "LeftNum", "LeftBuyNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.CS_Activiyt_packFresh), global::PbActivity.CS_Activiyt_packFresh.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.SC_Activiyt_packFresh), global::PbActivity.SC_Activiyt_packFresh.Parser, new[]{ "Pack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.CS_Activiyt_AllOpen), global::PbActivity.CS_Activiyt_AllOpen.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.SC_Activiyt_AllOpen), global::PbActivity.SC_Activiyt_AllOpen.Parser, new[]{ "GetAwardIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.CS_Activiyt_OpenOne), global::PbActivity.CS_Activiyt_OpenOne.Parser, new[]{ "DayID", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.SC_Activiyt_OpenOne), global::PbActivity.SC_Activiyt_OpenOne.Parser, new[]{ "GetAwardIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbActivity.SC_Activiyt_Updata), global::PbActivity.SC_Activiyt_Updata.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///请求活动信息
  /// </summary>
  public sealed partial class CS_Activity_Info : pb::IMessage<CS_Activity_Info> {
    private static readonly pb::MessageParser<CS_Activity_Info> _parser = new pb::MessageParser<CS_Activity_Info>(() => new CS_Activity_Info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Activity_Info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activity_Info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activity_Info(CS_Activity_Info other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activity_Info Clone() {
      return new CS_Activity_Info(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Activity_Info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Activity_Info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Activity_Info other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到活动信息
  /// </summary>
  public sealed partial class SC_Activity_Info : pb::IMessage<SC_Activity_Info> {
    private static readonly pb::MessageParser<SC_Activity_Info> _parser = new pb::MessageParser<SC_Activity_Info>(() => new SC_Activity_Info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Activity_Info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Info(SC_Activity_Info other) : this() {
      activityList_ = other.activityList_.Clone();
      pack_ = other.pack_.Clone();
      celebratedNum_ = other.celebratedNum_;
      getAwardIds_ = other.getAwardIds_.Clone();
      curDay_ = other.curDay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Info Clone() {
      return new SC_Activity_Info(this);
    }

    /// <summary>Field number for the "ActivityList" field.</summary>
    public const int ActivityListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbActivity.One_Activity> _repeated_activityList_codec
        = pb::FieldCodec.ForMessage(10, global::PbActivity.One_Activity.Parser);
    private readonly pbc::RepeatedField<global::PbActivity.One_Activity> activityList_ = new pbc::RepeatedField<global::PbActivity.One_Activity>();
    /// <summary>
    ///活动列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbActivity.One_Activity> ActivityList {
      get { return activityList_; }
    }

    /// <summary>Field number for the "Pack" field.</summary>
    public const int PackFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PbActivity.One_ActivityPack> _repeated_pack_codec
        = pb::FieldCodec.ForMessage(18, global::PbActivity.One_ActivityPack.Parser);
    private readonly pbc::RepeatedField<global::PbActivity.One_ActivityPack> pack_ = new pbc::RepeatedField<global::PbActivity.One_ActivityPack>();
    /// <summary>
    ///活动商品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbActivity.One_ActivityPack> Pack {
      get { return pack_; }
    }

    /// <summary>Field number for the "CelebratedNum" field.</summary>
    public const int CelebratedNumFieldNumber = 3;
    private int celebratedNum_;
    /// <summary>
    ///玩家庆典值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CelebratedNum {
      get { return celebratedNum_; }
      set {
        celebratedNum_ = value;
      }
    }

    /// <summary>Field number for the "GetAwardIds" field.</summary>
    public const int GetAwardIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PbActivity.One_ActivityCele> _repeated_getAwardIds_codec
        = pb::FieldCodec.ForMessage(34, global::PbActivity.One_ActivityCele.Parser);
    private readonly pbc::RepeatedField<global::PbActivity.One_ActivityCele> getAwardIds_ = new pbc::RepeatedField<global::PbActivity.One_ActivityCele>();
    /// <summary>
    ///已领取庆典奖励ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbActivity.One_ActivityCele> GetAwardIds {
      get { return getAwardIds_; }
    }

    /// <summary>Field number for the "CurDay" field.</summary>
    public const int CurDayFieldNumber = 5;
    private int curDay_;
    /// <summary>
    ///当前领取天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurDay {
      get { return curDay_; }
      set {
        curDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Activity_Info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Activity_Info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!activityList_.Equals(other.activityList_)) return false;
      if(!pack_.Equals(other.pack_)) return false;
      if (CelebratedNum != other.CelebratedNum) return false;
      if(!getAwardIds_.Equals(other.getAwardIds_)) return false;
      if (CurDay != other.CurDay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= activityList_.GetHashCode();
      hash ^= pack_.GetHashCode();
      if (CelebratedNum != 0) hash ^= CelebratedNum.GetHashCode();
      hash ^= getAwardIds_.GetHashCode();
      if (CurDay != 0) hash ^= CurDay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activityList_.WriteTo(output, _repeated_activityList_codec);
      pack_.WriteTo(output, _repeated_pack_codec);
      if (CelebratedNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CelebratedNum);
      }
      getAwardIds_.WriteTo(output, _repeated_getAwardIds_codec);
      if (CurDay != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activityList_.CalculateSize(_repeated_activityList_codec);
      size += pack_.CalculateSize(_repeated_pack_codec);
      if (CelebratedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CelebratedNum);
      }
      size += getAwardIds_.CalculateSize(_repeated_getAwardIds_codec);
      if (CurDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Activity_Info other) {
      if (other == null) {
        return;
      }
      activityList_.Add(other.activityList_);
      pack_.Add(other.pack_);
      if (other.CelebratedNum != 0) {
        CelebratedNum = other.CelebratedNum;
      }
      getAwardIds_.Add(other.getAwardIds_);
      if (other.CurDay != 0) {
        CurDay = other.CurDay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activityList_.AddEntriesFrom(input, _repeated_activityList_codec);
            break;
          }
          case 18: {
            pack_.AddEntriesFrom(input, _repeated_pack_codec);
            break;
          }
          case 24: {
            CelebratedNum = input.ReadInt32();
            break;
          }
          case 34: {
            getAwardIds_.AddEntriesFrom(input, _repeated_getAwardIds_codec);
            break;
          }
          case 40: {
            CurDay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个活动数据
  /// </summary>
  public sealed partial class One_Activity : pb::IMessage<One_Activity> {
    private static readonly pb::MessageParser<One_Activity> _parser = new pb::MessageParser<One_Activity>(() => new One_Activity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_Activity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity(One_Activity other) : this() {
      aID_ = other.aID_;
      mID_ = other.mID_;
      start_ = other.start_;
      end_ = other.end_;
      taskList_ = other.taskList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity Clone() {
      return new One_Activity(this);
    }

    /// <summary>Field number for the "AID" field.</summary>
    public const int AIDFieldNumber = 1;
    private int aID_;
    /// <summary>
    ///活动编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AID {
      get { return aID_; }
      set {
        aID_ = value;
      }
    }

    /// <summary>Field number for the "MID" field.</summary>
    public const int MIDFieldNumber = 2;
    private int mID_;
    /// <summary>
    ///模板编号	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MID {
      get { return mID_; }
      set {
        mID_ = value;
      }
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 3;
    private int start_;
    /// <summary>
    ///开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "End" field.</summary>
    public const int EndFieldNumber = 4;
    private int end_;
    /// <summary>
    ///结束时间		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "TaskList" field.</summary>
    public const int TaskListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PbActivity.One_Activity_Task> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(42, global::PbActivity.One_Activity_Task.Parser);
    private readonly pbc::RepeatedField<global::PbActivity.One_Activity_Task> taskList_ = new pbc::RepeatedField<global::PbActivity.One_Activity_Task>();
    /// <summary>
    ///活动任务列表	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbActivity.One_Activity_Task> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_Activity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_Activity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AID != other.AID) return false;
      if (MID != other.MID) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if(!taskList_.Equals(other.taskList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AID != 0) hash ^= AID.GetHashCode();
      if (MID != 0) hash ^= MID.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (End != 0) hash ^= End.GetHashCode();
      hash ^= taskList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AID);
      }
      if (MID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MID);
      }
      if (Start != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(End);
      }
      taskList_.WriteTo(output, _repeated_taskList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AID);
      }
      if (MID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MID);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_Activity other) {
      if (other == null) {
        return;
      }
      if (other.AID != 0) {
        AID = other.AID;
      }
      if (other.MID != 0) {
        MID = other.MID;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.End != 0) {
        End = other.End;
      }
      taskList_.Add(other.taskList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AID = input.ReadInt32();
            break;
          }
          case 16: {
            MID = input.ReadInt32();
            break;
          }
          case 24: {
            Start = input.ReadInt32();
            break;
          }
          case 32: {
            End = input.ReadInt32();
            break;
          }
          case 42: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个活动庆典奖励
  /// </summary>
  public sealed partial class One_ActivityCele : pb::IMessage<One_ActivityCele> {
    private static readonly pb::MessageParser<One_ActivityCele> _parser = new pb::MessageParser<One_ActivityCele>(() => new One_ActivityCele());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_ActivityCele> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ActivityCele() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ActivityCele(One_ActivityCele other) : this() {
      id_ = other.id_;
      indexId_ = other.indexId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ActivityCele Clone() {
      return new One_ActivityCele(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///天数ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IndexId" field.</summary>
    public const int IndexIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_indexId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> indexId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///奖励序号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IndexId {
      get { return indexId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_ActivityCele);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_ActivityCele other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!indexId_.Equals(other.indexId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= indexId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      indexId_.WriteTo(output, _repeated_indexId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += indexId_.CalculateSize(_repeated_indexId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_ActivityCele other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      indexId_.Add(other.indexId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            indexId_.AddEntriesFrom(input, _repeated_indexId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个活动礼包数据
  /// </summary>
  public sealed partial class One_ActivityPack : pb::IMessage<One_ActivityPack> {
    private static readonly pb::MessageParser<One_ActivityPack> _parser = new pb::MessageParser<One_ActivityPack>(() => new One_ActivityPack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_ActivityPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ActivityPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ActivityPack(One_ActivityPack other) : this() {
      packId_ = other.packId_;
      isOpen_ = other.isOpen_;
      leftNum_ = other.leftNum_;
      leftBuyNum_ = other.leftBuyNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_ActivityPack Clone() {
      return new One_ActivityPack(this);
    }

    /// <summary>Field number for the "PackId" field.</summary>
    public const int PackIdFieldNumber = 1;
    private int packId_;
    /// <summary>
    ///活动礼包Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackId {
      get { return packId_; }
      set {
        packId_ = value;
      }
    }

    /// <summary>Field number for the "IsOpen" field.</summary>
    public const int IsOpenFieldNumber = 2;
    private bool isOpen_;
    /// <summary>
    ///是否已开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "LeftNum" field.</summary>
    public const int LeftNumFieldNumber = 3;
    private int leftNum_;
    /// <summary>
    ///广告类型剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftNum {
      get { return leftNum_; }
      set {
        leftNum_ = value;
      }
    }

    /// <summary>Field number for the "LeftBuyNum" field.</summary>
    public const int LeftBuyNumFieldNumber = 4;
    private int leftBuyNum_;
    /// <summary>
    ///剩余可购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftBuyNum {
      get { return leftBuyNum_; }
      set {
        leftBuyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_ActivityPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_ActivityPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackId != other.PackId) return false;
      if (IsOpen != other.IsOpen) return false;
      if (LeftNum != other.LeftNum) return false;
      if (LeftBuyNum != other.LeftBuyNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackId != 0) hash ^= PackId.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (LeftNum != 0) hash ^= LeftNum.GetHashCode();
      if (LeftBuyNum != 0) hash ^= LeftBuyNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackId);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (LeftNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftNum);
      }
      if (LeftBuyNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LeftBuyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackId);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (LeftNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftNum);
      }
      if (LeftBuyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftBuyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_ActivityPack other) {
      if (other == null) {
        return;
      }
      if (other.PackId != 0) {
        PackId = other.PackId;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.LeftNum != 0) {
        LeftNum = other.LeftNum;
      }
      if (other.LeftBuyNum != 0) {
        LeftBuyNum = other.LeftBuyNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PackId = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
          case 24: {
            LeftNum = input.ReadInt32();
            break;
          }
          case 32: {
            LeftBuyNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个活动任务数据
  /// </summary>
  public sealed partial class One_Activity_Task : pb::IMessage<One_Activity_Task> {
    private static readonly pb::MessageParser<One_Activity_Task> _parser = new pb::MessageParser<One_Activity_Task>(() => new One_Activity_Task());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_Activity_Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity_Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity_Task(One_Activity_Task other) : this() {
      tackId_ = other.tackId_;
      mID_ = other.mID_;
      type_ = other.type_;
      condition_ = other.condition_.Clone();
      progress_ = other.progress_;
      award_ = other.award_.Clone();
      isGet_ = other.isGet_;
      orderId_ = other.orderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity_Task Clone() {
      return new One_Activity_Task(this);
    }

    /// <summary>Field number for the "TackId" field.</summary>
    public const int TackIdFieldNumber = 1;
    private int tackId_;
    /// <summary>
    ///对应活动编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TackId {
      get { return tackId_; }
      set {
        tackId_ = value;
      }
    }

    /// <summary>Field number for the "MID" field.</summary>
    public const int MIDFieldNumber = 2;
    private int mID_;
    /// <summary>
    ///活动任务编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MID {
      get { return mID_; }
      set {
        mID_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///任务类型	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Condition" field.</summary>
    public const int ConditionFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_condition_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> condition_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///完成条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Condition {
      get { return condition_; }
    }

    /// <summary>Field number for the "Progress" field.</summary>
    public const int ProgressFieldNumber = 5;
    private int progress_;
    /// <summary>
    ///任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "Award" field.</summary>
    public const int AwardFieldNumber = 6;
    private static readonly pb::FieldCodec<global::PbActivity.One_Activity_Award> _repeated_award_codec
        = pb::FieldCodec.ForMessage(50, global::PbActivity.One_Activity_Award.Parser);
    private readonly pbc::RepeatedField<global::PbActivity.One_Activity_Award> award_ = new pbc::RepeatedField<global::PbActivity.One_Activity_Award>();
    /// <summary>
    ///任务奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbActivity.One_Activity_Award> Award {
      get { return award_; }
    }

    /// <summary>Field number for the "IsGet" field.</summary>
    public const int IsGetFieldNumber = 7;
    private bool isGet_;
    /// <summary>
    ///是否已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 8;
    private int orderId_;
    /// <summary>
    ///任务排序Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_Activity_Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_Activity_Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TackId != other.TackId) return false;
      if (MID != other.MID) return false;
      if (Type != other.Type) return false;
      if(!condition_.Equals(other.condition_)) return false;
      if (Progress != other.Progress) return false;
      if(!award_.Equals(other.award_)) return false;
      if (IsGet != other.IsGet) return false;
      if (OrderId != other.OrderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TackId != 0) hash ^= TackId.GetHashCode();
      if (MID != 0) hash ^= MID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= condition_.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      hash ^= award_.GetHashCode();
      if (IsGet != false) hash ^= IsGet.GetHashCode();
      if (OrderId != 0) hash ^= OrderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TackId);
      }
      if (MID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MID);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      condition_.WriteTo(output, _repeated_condition_codec);
      if (Progress != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Progress);
      }
      award_.WriteTo(output, _repeated_award_codec);
      if (IsGet != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsGet);
      }
      if (OrderId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OrderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TackId);
      }
      if (MID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += condition_.CalculateSize(_repeated_condition_codec);
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      size += award_.CalculateSize(_repeated_award_codec);
      if (IsGet != false) {
        size += 1 + 1;
      }
      if (OrderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_Activity_Task other) {
      if (other == null) {
        return;
      }
      if (other.TackId != 0) {
        TackId = other.TackId;
      }
      if (other.MID != 0) {
        MID = other.MID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      condition_.Add(other.condition_);
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      award_.Add(other.award_);
      if (other.IsGet != false) {
        IsGet = other.IsGet;
      }
      if (other.OrderId != 0) {
        OrderId = other.OrderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TackId = input.ReadInt32();
            break;
          }
          case 16: {
            MID = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            condition_.AddEntriesFrom(input, _repeated_condition_codec);
            break;
          }
          case 40: {
            Progress = input.ReadInt32();
            break;
          }
          case 50: {
            award_.AddEntriesFrom(input, _repeated_award_codec);
            break;
          }
          case 56: {
            IsGet = input.ReadBool();
            break;
          }
          case 64: {
            OrderId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个奖励数据
  /// </summary>
  public sealed partial class One_Activity_Award : pb::IMessage<One_Activity_Award> {
    private static readonly pb::MessageParser<One_Activity_Award> _parser = new pb::MessageParser<One_Activity_Award>(() => new One_Activity_Award());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_Activity_Award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity_Award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity_Award(One_Activity_Award other) : this() {
      itemId_ = other.itemId_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_Activity_Award Clone() {
      return new One_Activity_Award(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///道具Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_Activity_Award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_Activity_Award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_Activity_Award other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动进度发生改变
  /// </summary>
  public sealed partial class SC_Activity_Change : pb::IMessage<SC_Activity_Change> {
    private static readonly pb::MessageParser<SC_Activity_Change> _parser = new pb::MessageParser<SC_Activity_Change>(() => new SC_Activity_Change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Activity_Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Change(SC_Activity_Change other) : this() {
      taskId_ = other.taskId_;
      progress_ = other.progress_;
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Change Clone() {
      return new SC_Activity_Change(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///活动任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "Progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    /// <summary>
    ///完成进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "Mid" field.</summary>
    public const int MidFieldNumber = 3;
    private int mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Activity_Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Activity_Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Progress != other.Progress) return false;
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (Mid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Activity_Change other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
          case 24: {
            Mid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取活动任务奖励
  /// </summary>
  public sealed partial class CS_Activity_Get : pb::IMessage<CS_Activity_Get> {
    private static readonly pb::MessageParser<CS_Activity_Get> _parser = new pb::MessageParser<CS_Activity_Get>(() => new CS_Activity_Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Activity_Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activity_Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activity_Get(CS_Activity_Get other) : this() {
      taskId_ = other.taskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activity_Get Clone() {
      return new CS_Activity_Get(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///活动任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Activity_Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Activity_Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Activity_Get other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到领取活动任务奖励
  /// </summary>
  public sealed partial class SC_Activity_Get : pb::IMessage<SC_Activity_Get> {
    private static readonly pb::MessageParser<SC_Activity_Get> _parser = new pb::MessageParser<SC_Activity_Get>(() => new SC_Activity_Get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Activity_Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Get(SC_Activity_Get other) : this() {
      taskId_ = other.taskId_;
      progress_ = other.progress_;
      isGet_ = other.isGet_;
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activity_Get Clone() {
      return new SC_Activity_Get(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///活动任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "Progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    /// <summary>
    ///完成进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "IsGet" field.</summary>
    public const int IsGetFieldNumber = 3;
    private bool isGet_;
    /// <summary>
    ///是否已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    /// <summary>Field number for the "Mid" field.</summary>
    public const int MidFieldNumber = 4;
    private int mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Activity_Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Activity_Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Progress != other.Progress) return false;
      if (IsGet != other.IsGet) return false;
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (IsGet != false) hash ^= IsGet.GetHashCode();
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
      if (IsGet != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsGet);
      }
      if (Mid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (IsGet != false) {
        size += 1 + 1;
      }
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Activity_Get other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.IsGet != false) {
        IsGet = other.IsGet;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
          case 24: {
            IsGet = input.ReadBool();
            break;
          }
          case 32: {
            Mid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求开启活动礼包
  /// </summary>
  public sealed partial class CS_Activiyt_packOpen : pb::IMessage<CS_Activiyt_packOpen> {
    private static readonly pb::MessageParser<CS_Activiyt_packOpen> _parser = new pb::MessageParser<CS_Activiyt_packOpen>(() => new CS_Activiyt_packOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Activiyt_packOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_packOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_packOpen(CS_Activiyt_packOpen other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_packOpen Clone() {
      return new CS_Activiyt_packOpen(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///礼包ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Activiyt_packOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Activiyt_packOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Activiyt_packOpen other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到开启活动礼包
  /// </summary>
  public sealed partial class SC_Activiyt_packOpen : pb::IMessage<SC_Activiyt_packOpen> {
    private static readonly pb::MessageParser<SC_Activiyt_packOpen> _parser = new pb::MessageParser<SC_Activiyt_packOpen>(() => new SC_Activiyt_packOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Activiyt_packOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_packOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_packOpen(SC_Activiyt_packOpen other) : this() {
      id_ = other.id_;
      leftNum_ = other.leftNum_;
      leftBuyNum_ = other.leftBuyNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_packOpen Clone() {
      return new SC_Activiyt_packOpen(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///礼包ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "LeftNum" field.</summary>
    public const int LeftNumFieldNumber = 2;
    private int leftNum_;
    /// <summary>
    ///广告类型剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftNum {
      get { return leftNum_; }
      set {
        leftNum_ = value;
      }
    }

    /// <summary>Field number for the "LeftBuyNum" field.</summary>
    public const int LeftBuyNumFieldNumber = 3;
    private int leftBuyNum_;
    /// <summary>
    ///剩余可购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftBuyNum {
      get { return leftBuyNum_; }
      set {
        leftBuyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Activiyt_packOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Activiyt_packOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LeftNum != other.LeftNum) return false;
      if (LeftBuyNum != other.LeftBuyNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (LeftNum != 0) hash ^= LeftNum.GetHashCode();
      if (LeftBuyNum != 0) hash ^= LeftBuyNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (LeftNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftNum);
      }
      if (LeftBuyNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftBuyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (LeftNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftNum);
      }
      if (LeftBuyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftBuyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Activiyt_packOpen other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.LeftNum != 0) {
        LeftNum = other.LeftNum;
      }
      if (other.LeftBuyNum != 0) {
        LeftBuyNum = other.LeftBuyNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            LeftNum = input.ReadInt32();
            break;
          }
          case 24: {
            LeftBuyNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求钻石刷新活动礼包
  /// </summary>
  public sealed partial class CS_Activiyt_packFresh : pb::IMessage<CS_Activiyt_packFresh> {
    private static readonly pb::MessageParser<CS_Activiyt_packFresh> _parser = new pb::MessageParser<CS_Activiyt_packFresh>(() => new CS_Activiyt_packFresh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Activiyt_packFresh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_packFresh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_packFresh(CS_Activiyt_packFresh other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_packFresh Clone() {
      return new CS_Activiyt_packFresh(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Activiyt_packFresh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Activiyt_packFresh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Activiyt_packFresh other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到钻石刷新活动礼包
  /// </summary>
  public sealed partial class SC_Activiyt_packFresh : pb::IMessage<SC_Activiyt_packFresh> {
    private static readonly pb::MessageParser<SC_Activiyt_packFresh> _parser = new pb::MessageParser<SC_Activiyt_packFresh>(() => new SC_Activiyt_packFresh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Activiyt_packFresh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_packFresh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_packFresh(SC_Activiyt_packFresh other) : this() {
      pack_ = other.pack_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_packFresh Clone() {
      return new SC_Activiyt_packFresh(this);
    }

    /// <summary>Field number for the "Pack" field.</summary>
    public const int PackFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbActivity.One_ActivityPack> _repeated_pack_codec
        = pb::FieldCodec.ForMessage(10, global::PbActivity.One_ActivityPack.Parser);
    private readonly pbc::RepeatedField<global::PbActivity.One_ActivityPack> pack_ = new pbc::RepeatedField<global::PbActivity.One_ActivityPack>();
    /// <summary>
    ///活动商品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbActivity.One_ActivityPack> Pack {
      get { return pack_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Activiyt_packFresh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Activiyt_packFresh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pack_.Equals(other.pack_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pack_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pack_.WriteTo(output, _repeated_pack_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pack_.CalculateSize(_repeated_pack_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Activiyt_packFresh other) {
      if (other == null) {
        return;
      }
      pack_.Add(other.pack_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pack_.AddEntriesFrom(input, _repeated_pack_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求一键领取节日奖励
  /// </summary>
  public sealed partial class CS_Activiyt_AllOpen : pb::IMessage<CS_Activiyt_AllOpen> {
    private static readonly pb::MessageParser<CS_Activiyt_AllOpen> _parser = new pb::MessageParser<CS_Activiyt_AllOpen>(() => new CS_Activiyt_AllOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Activiyt_AllOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_AllOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_AllOpen(CS_Activiyt_AllOpen other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_AllOpen Clone() {
      return new CS_Activiyt_AllOpen(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Activiyt_AllOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Activiyt_AllOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Activiyt_AllOpen other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到一键领取节日奖励
  /// </summary>
  public sealed partial class SC_Activiyt_AllOpen : pb::IMessage<SC_Activiyt_AllOpen> {
    private static readonly pb::MessageParser<SC_Activiyt_AllOpen> _parser = new pb::MessageParser<SC_Activiyt_AllOpen>(() => new SC_Activiyt_AllOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Activiyt_AllOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_AllOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_AllOpen(SC_Activiyt_AllOpen other) : this() {
      getAwardIds_ = other.getAwardIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_AllOpen Clone() {
      return new SC_Activiyt_AllOpen(this);
    }

    /// <summary>Field number for the "GetAwardIds" field.</summary>
    public const int GetAwardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbActivity.One_ActivityCele> _repeated_getAwardIds_codec
        = pb::FieldCodec.ForMessage(10, global::PbActivity.One_ActivityCele.Parser);
    private readonly pbc::RepeatedField<global::PbActivity.One_ActivityCele> getAwardIds_ = new pbc::RepeatedField<global::PbActivity.One_ActivityCele>();
    /// <summary>
    ///已领取庆典奖励ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbActivity.One_ActivityCele> GetAwardIds {
      get { return getAwardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Activiyt_AllOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Activiyt_AllOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!getAwardIds_.Equals(other.getAwardIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= getAwardIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      getAwardIds_.WriteTo(output, _repeated_getAwardIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += getAwardIds_.CalculateSize(_repeated_getAwardIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Activiyt_AllOpen other) {
      if (other == null) {
        return;
      }
      getAwardIds_.Add(other.getAwardIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            getAwardIds_.AddEntriesFrom(input, _repeated_getAwardIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求单个领取节日奖励
  /// </summary>
  public sealed partial class CS_Activiyt_OpenOne : pb::IMessage<CS_Activiyt_OpenOne> {
    private static readonly pb::MessageParser<CS_Activiyt_OpenOne> _parser = new pb::MessageParser<CS_Activiyt_OpenOne>(() => new CS_Activiyt_OpenOne());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Activiyt_OpenOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_OpenOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_OpenOne(CS_Activiyt_OpenOne other) : this() {
      dayID_ = other.dayID_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Activiyt_OpenOne Clone() {
      return new CS_Activiyt_OpenOne(this);
    }

    /// <summary>Field number for the "DayID" field.</summary>
    public const int DayIDFieldNumber = 1;
    private int dayID_;
    /// <summary>
    ///日ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayID {
      get { return dayID_; }
      set {
        dayID_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///序号Id 从1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Activiyt_OpenOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Activiyt_OpenOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DayID != other.DayID) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DayID != 0) hash ^= DayID.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DayID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DayID);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DayID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayID);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Activiyt_OpenOne other) {
      if (other == null) {
        return;
      }
      if (other.DayID != 0) {
        DayID = other.DayID;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DayID = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到单个领取节日奖励
  /// </summary>
  public sealed partial class SC_Activiyt_OpenOne : pb::IMessage<SC_Activiyt_OpenOne> {
    private static readonly pb::MessageParser<SC_Activiyt_OpenOne> _parser = new pb::MessageParser<SC_Activiyt_OpenOne>(() => new SC_Activiyt_OpenOne());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Activiyt_OpenOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_OpenOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_OpenOne(SC_Activiyt_OpenOne other) : this() {
      getAwardIds_ = other.getAwardIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_OpenOne Clone() {
      return new SC_Activiyt_OpenOne(this);
    }

    /// <summary>Field number for the "GetAwardIds" field.</summary>
    public const int GetAwardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbActivity.One_ActivityCele> _repeated_getAwardIds_codec
        = pb::FieldCodec.ForMessage(10, global::PbActivity.One_ActivityCele.Parser);
    private readonly pbc::RepeatedField<global::PbActivity.One_ActivityCele> getAwardIds_ = new pbc::RepeatedField<global::PbActivity.One_ActivityCele>();
    /// <summary>
    ///已领取庆典奖励ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbActivity.One_ActivityCele> GetAwardIds {
      get { return getAwardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Activiyt_OpenOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Activiyt_OpenOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!getAwardIds_.Equals(other.getAwardIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= getAwardIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      getAwardIds_.WriteTo(output, _repeated_getAwardIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += getAwardIds_.CalculateSize(_repeated_getAwardIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Activiyt_OpenOne other) {
      if (other == null) {
        return;
      }
      getAwardIds_.Add(other.getAwardIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            getAwardIds_.AddEntriesFrom(input, _repeated_getAwardIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知活动礼包
  /// </summary>
  public sealed partial class SC_Activiyt_Updata : pb::IMessage<SC_Activiyt_Updata> {
    private static readonly pb::MessageParser<SC_Activiyt_Updata> _parser = new pb::MessageParser<SC_Activiyt_Updata>(() => new SC_Activiyt_Updata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Activiyt_Updata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbActivity.PbActivityReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_Updata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_Updata(SC_Activiyt_Updata other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Activiyt_Updata Clone() {
      return new SC_Activiyt_Updata(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Activiyt_Updata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Activiyt_Updata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Activiyt_Updata other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
