// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbTask.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbTask {

  /// <summary>Holder for reflection information generated from PbTask.proto</summary>
  public static partial class PbTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for PbTask.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQYlRhc2sucHJvdG8SBlBiVGFzayI/ChBTQ190YXNrTGluZV9saXN0EisK",
            "CFRhc2tMaXN0GAEgAygLMhkuUGJUYXNrLk9uZV90YXNrTGluZV9pdGVtIlkK",
            "EU9uZV90YXNrTGluZV9pdGVtEg4KBlRhc2tJZBgBIAEoBRITCgtNYXhQcm9n",
            "cmVzcxgCIAEoBRIQCghQcm9ncmVzcxgDIAEoBRINCgVJc0dldBgEIAEoCCIz",
            "Cg9DU190YXNrTGluZV9nZXQSDgoGVGFza2lkGAEgASgFEhAKCElzRG91Ymxl",
            "GAIgASgIIiEKD1NDX3Rhc2tMaW5lX2dldBIOCgZUYXNraWQYASABKAUiEQoP",
            "Q1NfdGFza0xpbmVfQWRkYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbTask.SC_taskLine_list), global::PbTask.SC_taskLine_list.Parser, new[]{ "TaskList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbTask.One_taskLine_item), global::PbTask.One_taskLine_item.Parser, new[]{ "TaskId", "MaxProgress", "Progress", "IsGet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbTask.CS_taskLine_get), global::PbTask.CS_taskLine_get.Parser, new[]{ "Taskid", "IsDouble" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbTask.SC_taskLine_get), global::PbTask.SC_taskLine_get.Parser, new[]{ "Taskid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbTask.CS_taskLine_Add), global::PbTask.CS_taskLine_Add.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///收到任务列表信息
  /// </summary>
  public sealed partial class SC_taskLine_list : pb::IMessage<SC_taskLine_list> {
    private static readonly pb::MessageParser<SC_taskLine_list> _parser = new pb::MessageParser<SC_taskLine_list>(() => new SC_taskLine_list());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_taskLine_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbTask.PbTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskLine_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskLine_list(SC_taskLine_list other) : this() {
      taskList_ = other.taskList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskLine_list Clone() {
      return new SC_taskLine_list(this);
    }

    /// <summary>Field number for the "TaskList" field.</summary>
    public const int TaskListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PbTask.One_taskLine_item> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(10, global::PbTask.One_taskLine_item.Parser);
    private readonly pbc::RepeatedField<global::PbTask.One_taskLine_item> taskList_ = new pbc::RepeatedField<global::PbTask.One_taskLine_item>();
    /// <summary>
    ///任务信息	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbTask.One_taskLine_item> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_taskLine_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_taskLine_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskList_.Equals(other.taskList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskList_.WriteTo(output, _repeated_taskList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_taskLine_list other) {
      if (other == null) {
        return;
      }
      taskList_.Add(other.taskList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个任务信息
  /// </summary>
  public sealed partial class One_taskLine_item : pb::IMessage<One_taskLine_item> {
    private static readonly pb::MessageParser<One_taskLine_item> _parser = new pb::MessageParser<One_taskLine_item>(() => new One_taskLine_item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_taskLine_item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbTask.PbTaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_taskLine_item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_taskLine_item(One_taskLine_item other) : this() {
      taskId_ = other.taskId_;
      maxProgress_ = other.maxProgress_;
      progress_ = other.progress_;
      isGet_ = other.isGet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_taskLine_item Clone() {
      return new One_taskLine_item(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "MaxProgress" field.</summary>
    public const int MaxProgressFieldNumber = 2;
    private int maxProgress_;
    /// <summary>
    ///任务完成所需总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxProgress {
      get { return maxProgress_; }
      set {
        maxProgress_ = value;
      }
    }

    /// <summary>Field number for the "Progress" field.</summary>
    public const int ProgressFieldNumber = 3;
    private int progress_;
    /// <summary>
    ///完成进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "IsGet" field.</summary>
    public const int IsGetFieldNumber = 4;
    private bool isGet_;
    /// <summary>
    ///是否今日已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_taskLine_item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_taskLine_item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (MaxProgress != other.MaxProgress) return false;
      if (Progress != other.Progress) return false;
      if (IsGet != other.IsGet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (MaxProgress != 0) hash ^= MaxProgress.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (IsGet != false) hash ^= IsGet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (MaxProgress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxProgress);
      }
      if (Progress != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Progress);
      }
      if (IsGet != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (MaxProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxProgress);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (IsGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_taskLine_item other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.MaxProgress != 0) {
        MaxProgress = other.MaxProgress;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.IsGet != false) {
        IsGet = other.IsGet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            MaxProgress = input.ReadInt32();
            break;
          }
          case 24: {
            Progress = input.ReadInt32();
            break;
          }
          case 32: {
            IsGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取任务线上的任务奖励
  /// </summary>
  public sealed partial class CS_taskLine_get : pb::IMessage<CS_taskLine_get> {
    private static readonly pb::MessageParser<CS_taskLine_get> _parser = new pb::MessageParser<CS_taskLine_get>(() => new CS_taskLine_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_taskLine_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbTask.PbTaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskLine_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskLine_get(CS_taskLine_get other) : this() {
      taskid_ = other.taskid_;
      isDouble_ = other.isDouble_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskLine_get Clone() {
      return new CS_taskLine_get(this);
    }

    /// <summary>Field number for the "Taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private int taskid_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "IsDouble" field.</summary>
    public const int IsDoubleFieldNumber = 2;
    private bool isDouble_;
    /// <summary>
    ///是否双倍领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDouble {
      get { return isDouble_; }
      set {
        isDouble_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_taskLine_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_taskLine_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Taskid != other.Taskid) return false;
      if (IsDouble != other.IsDouble) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (IsDouble != false) hash ^= IsDouble.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Taskid);
      }
      if (IsDouble != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDouble);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (IsDouble != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_taskLine_get other) {
      if (other == null) {
        return;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.IsDouble != false) {
        IsDouble = other.IsDouble;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Taskid = input.ReadInt32();
            break;
          }
          case 16: {
            IsDouble = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///#收到领取完奖励
  /// </summary>
  public sealed partial class SC_taskLine_get : pb::IMessage<SC_taskLine_get> {
    private static readonly pb::MessageParser<SC_taskLine_get> _parser = new pb::MessageParser<SC_taskLine_get>(() => new SC_taskLine_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_taskLine_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbTask.PbTaskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskLine_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskLine_get(SC_taskLine_get other) : this() {
      taskid_ = other.taskid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_taskLine_get Clone() {
      return new SC_taskLine_get(this);
    }

    /// <summary>Field number for the "Taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private int taskid_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_taskLine_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_taskLine_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Taskid != other.Taskid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Taskid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_taskLine_get other) {
      if (other == null) {
        return;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Taskid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求增加广告进度（加一次广告次数）
  /// </summary>
  public sealed partial class CS_taskLine_Add : pb::IMessage<CS_taskLine_Add> {
    private static readonly pb::MessageParser<CS_taskLine_Add> _parser = new pb::MessageParser<CS_taskLine_Add>(() => new CS_taskLine_Add());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_taskLine_Add> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbTask.PbTaskReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskLine_Add() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskLine_Add(CS_taskLine_Add other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_taskLine_Add Clone() {
      return new CS_taskLine_Add(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_taskLine_Add);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_taskLine_Add other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_taskLine_Add other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
