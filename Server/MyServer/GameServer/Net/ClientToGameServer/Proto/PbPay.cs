// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbPay.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbPay {

  /// <summary>Holder for reflection information generated from PbPay.proto</summary>
  public static partial class PbPayReflection {

    #region Descriptor
    /// <summary>File descriptor for PbPay.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbPayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtQYlBheS5wcm90bxIFUGJQYXkaC1BiQ29tLnByb3RvInoKC1NDX3ZpcF9p",
            "bmZvEgwKBE1DTHYYBSABKAUSDQoFTUNEYXkYBiABKAUSDwoHSXNHZXRNQxgH",
            "IAEoCBIVCg1GaXJzdFBheVN0YXRlGAggASgFEiYKCEdpZnRMaXN0GAkgAygL",
            "MhQuUGJQYXkuT25lX2dpZnRfaW5mbyIoCg1PbmVfZ2lmdF9pbmZvEgoKAklk",
            "GAEgASgFEgsKA051bRgCIAEoBSIuCgpTQ192aXBfZXhwEhAKCFZpcExldmVs",
            "GAEgASgFEg4KBlZpcEV4cBgCIAEoBSI+ChBTQ192aXBUcnlfY2hhbmdlEhMK",
            "C1ZpcFRyeUxldmVsGAEgASgFEhUKDVZpcFRyeUVuZFRpbWUYAiABKAUiIQoO",
            "Q1NfdmlwX2J1eUdpZnQSDwoHTGV2ZWxJRBgBIAEoBSIhCg5TQ192aXBfYnV5",
            "R2lmdBIPCgdMZXZlbElEGAEgASgFIhIKEENTX21vbnRoQ2FyZF9nZXQiEgoQ",
            "U0NfbW9udGhDYXJkX2dldCJJCgxDU19wYXlfb3JkZXISDwoHR29vZHNJRBgB",
            "IAEoBRIUCgxQbGF0Zm9ybVR5cGUYAiABKAUSEgoKUGxhdFBhcmFtcxgDIAEo",
            "CSKPAQoMU0NfcGF5X29yZGVyEisKBlJlc3VsdBgBIAEoDjIbLlBiQ29tLkVu",
            "dW1fcGF5T3JkZXJfcmVzdWx0Eg8KB0dvb2RzSUQYAiABKAUSFAoMUGxhdGZv",
            "cm1UeXBlGAMgASgFEg0KBVRva2VuGAQgASgJEg8KB09yZGVySWQYBSABKAkS",
            "CwoDRXh0GAYgASgJIlsKDkNTX3BheV9zdWNjZWVkEhQKDFBsYXRmb3JtVHlw",
            "ZRgBIAEoBRIPCgdHb29kc0lEGAIgASgFEg8KB09yZGVySWQYAyABKAkSEQoJ",
            "UGZPcmRlcklkGAQgASgJIlwKDlNDX3BheV9zdWNjZWVkEiYKBnJlc3VsdBgB",
            "IAEoDjIWLlBiUGF5LkVudW1fcGF5X3Jlc3VsdBIPCgdPcmRlcklkGAIgASgJ",
            "EhEKCVByb2R1Y3RJRBgDIAEoCSJaCg1TQ19wYXlfbm9ybWFsEiYKBnJlc3Vs",
            "dBgBIAEoDjIWLlBiUGF5LkVudW1fcGF5X3Jlc3VsdBIKCgJJRBgCIAEoBRIV",
            "Cg1GaXJzdFBheVN0YXRlGAMgASgFIn0KEFNDX3BheV9tb250aENhcmQSJgoG",
            "cmVzdWx0GAEgASgOMhYuUGJQYXkuRW51bV9wYXlfcmVzdWx0EgoKAklEGAIg",
            "ASgFEg0KBU1DRGF5GAMgASgFEhUKDUZpcnN0UGF5U3RhdGUYBCABKAUSDwoH",
            "SXNHZXRNQxgHIAEoCCJYCgtTQ19wYXlfZ2lmdBImCgZyZXN1bHQYASABKA4y",
            "Fi5QYlBheS5FbnVtX3BheV9yZXN1bHQSCgoCSUQYAiABKAUSFQoNRmlyc3RQ",
            "YXlTdGF0ZRgDIAEoBSJMCgtTQ19wYXlfZnVuZBImCgZyZXN1bHQYASABKA4y",
            "Fi5QYlBheS5FbnVtX3BheV9yZXN1bHQSFQoNRmlyc3RQYXlTdGF0ZRgCIAEo",
            "BSJSChFTQ19wYXlfaGVyb2ljQ2FyZBImCgZyZXN1bHQYASABKA4yFi5QYlBh",
            "eS5FbnVtX3BheV9yZXN1bHQSFQoNRmlyc3RQYXlTdGF0ZRgCIAEoBSIUChJD",
            "U19wYXlfZ2V0Rmlyc3RQYXkiFAoSU0NfcGF5X2dldEZpcnN0UGF5KoABCg9F",
            "bnVtX3BheV9yZXN1bHQSDQoJUHJTdWNjZWVkEAASDQoJUHJVbmtub3duEAES",
            "EQoNUHJUb2tlblZlcmlmeRACEhQKEFByR29vZHNJZE5vRXhpc3QQAxIQCgxQ",
            "ck9yZGVySXNQYXkQBBIUChBQck9yZGVySWROb0V4aXN0EAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbCom.PbComReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbPay.Enum_pay_result), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_vip_info), global::PbPay.SC_vip_info.Parser, new[]{ "MCLv", "MCDay", "IsGetMC", "FirstPayState", "GiftList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.One_gift_info), global::PbPay.One_gift_info.Parser, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_vip_exp), global::PbPay.SC_vip_exp.Parser, new[]{ "VipLevel", "VipExp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_vipTry_change), global::PbPay.SC_vipTry_change.Parser, new[]{ "VipTryLevel", "VipTryEndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.CS_vip_buyGift), global::PbPay.CS_vip_buyGift.Parser, new[]{ "LevelID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_vip_buyGift), global::PbPay.SC_vip_buyGift.Parser, new[]{ "LevelID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.CS_monthCard_get), global::PbPay.CS_monthCard_get.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_monthCard_get), global::PbPay.SC_monthCard_get.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.CS_pay_order), global::PbPay.CS_pay_order.Parser, new[]{ "GoodsID", "PlatformType", "PlatParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_pay_order), global::PbPay.SC_pay_order.Parser, new[]{ "Result", "GoodsID", "PlatformType", "Token", "OrderId", "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.CS_pay_succeed), global::PbPay.CS_pay_succeed.Parser, new[]{ "PlatformType", "GoodsID", "OrderId", "PfOrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_pay_succeed), global::PbPay.SC_pay_succeed.Parser, new[]{ "Result", "OrderId", "ProductID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_pay_normal), global::PbPay.SC_pay_normal.Parser, new[]{ "Result", "ID", "FirstPayState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_pay_monthCard), global::PbPay.SC_pay_monthCard.Parser, new[]{ "Result", "ID", "MCDay", "FirstPayState", "IsGetMC" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_pay_gift), global::PbPay.SC_pay_gift.Parser, new[]{ "Result", "ID", "FirstPayState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_pay_fund), global::PbPay.SC_pay_fund.Parser, new[]{ "Result", "FirstPayState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_pay_heroicCard), global::PbPay.SC_pay_heroicCard.Parser, new[]{ "Result", "FirstPayState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.CS_pay_getFirstPay), global::PbPay.CS_pay_getFirstPay.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbPay.SC_pay_getFirstPay), global::PbPay.SC_pay_getFirstPay.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///充值结果
  /// </summary>
  public enum Enum_pay_result {
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("PrSucceed")] PrSucceed = 0,
    /// <summary>
    ///未知错误
    /// </summary>
    [pbr::OriginalName("PrUnknown")] PrUnknown = 1,
    /// <summary>
    ///Token验证失败
    /// </summary>
    [pbr::OriginalName("PrTokenVerify")] PrTokenVerify = 2,
    /// <summary>
    ///商品不存在
    /// </summary>
    [pbr::OriginalName("PrGoodsIdNoExist")] PrGoodsIdNoExist = 3,
    /// <summary>
    ///订单已支付（重复请求）
    /// </summary>
    [pbr::OriginalName("PrOrderIsPay")] PrOrderIsPay = 4,
    /// <summary>
    ///订单号不存在
    /// </summary>
    [pbr::OriginalName("PrOrderIdNoExist")] PrOrderIdNoExist = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///收到VIP信息月卡信息充值信息(登录发)
  /// </summary>
  public sealed partial class SC_vip_info : pb::IMessage<SC_vip_info> {
    private static readonly pb::MessageParser<SC_vip_info> _parser = new pb::MessageParser<SC_vip_info>(() => new SC_vip_info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_vip_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_info(SC_vip_info other) : this() {
      mCLv_ = other.mCLv_;
      mCDay_ = other.mCDay_;
      isGetMC_ = other.isGetMC_;
      firstPayState_ = other.firstPayState_;
      giftList_ = other.giftList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_info Clone() {
      return new SC_vip_info(this);
    }

    /// <summary>Field number for the "MCLv" field.</summary>
    public const int MCLvFieldNumber = 5;
    private int mCLv_;
    /// <summary>
    ///int32 VipLevel = 1;					//Vip等级
    ///int32 VipExp = 2;						//Vip经验
    ///repeated int32 VipGifts =3;			//已领VIP礼包ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCLv {
      get { return mCLv_; }
      set {
        mCLv_ = value;
      }
    }

    /// <summary>Field number for the "MCDay" field.</summary>
    public const int MCDayFieldNumber = 6;
    private int mCDay_;
    /// <summary>
    ///剩余月卡天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCDay {
      get { return mCDay_; }
      set {
        mCDay_ = value;
      }
    }

    /// <summary>Field number for the "IsGetMC" field.</summary>
    public const int IsGetMCFieldNumber = 7;
    private bool isGetMC_;
    /// <summary>
    ///月卡今日是否已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetMC {
      get { return isGetMC_; }
      set {
        isGetMC_ = value;
      }
    }

    /// <summary>Field number for the "FirstPayState" field.</summary>
    public const int FirstPayStateFieldNumber = 8;
    private int firstPayState_;
    /// <summary>
    ///首充奖励状态 (EAwardState)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPayState {
      get { return firstPayState_; }
      set {
        firstPayState_ = value;
      }
    }

    /// <summary>Field number for the "GiftList" field.</summary>
    public const int GiftListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::PbPay.One_gift_info> _repeated_giftList_codec
        = pb::FieldCodec.ForMessage(74, global::PbPay.One_gift_info.Parser);
    private readonly pbc::RepeatedField<global::PbPay.One_gift_info> giftList_ = new pbc::RepeatedField<global::PbPay.One_gift_info>();
    /// <summary>
    ///已购买礼包Id(有次数限制会发)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbPay.One_gift_info> GiftList {
      get { return giftList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_vip_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_vip_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MCLv != other.MCLv) return false;
      if (MCDay != other.MCDay) return false;
      if (IsGetMC != other.IsGetMC) return false;
      if (FirstPayState != other.FirstPayState) return false;
      if(!giftList_.Equals(other.giftList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MCLv != 0) hash ^= MCLv.GetHashCode();
      if (MCDay != 0) hash ^= MCDay.GetHashCode();
      if (IsGetMC != false) hash ^= IsGetMC.GetHashCode();
      if (FirstPayState != 0) hash ^= FirstPayState.GetHashCode();
      hash ^= giftList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MCLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MCLv);
      }
      if (MCDay != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MCDay);
      }
      if (IsGetMC != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsGetMC);
      }
      if (FirstPayState != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FirstPayState);
      }
      giftList_.WriteTo(output, _repeated_giftList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MCLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCLv);
      }
      if (MCDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCDay);
      }
      if (IsGetMC != false) {
        size += 1 + 1;
      }
      if (FirstPayState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPayState);
      }
      size += giftList_.CalculateSize(_repeated_giftList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_vip_info other) {
      if (other == null) {
        return;
      }
      if (other.MCLv != 0) {
        MCLv = other.MCLv;
      }
      if (other.MCDay != 0) {
        MCDay = other.MCDay;
      }
      if (other.IsGetMC != false) {
        IsGetMC = other.IsGetMC;
      }
      if (other.FirstPayState != 0) {
        FirstPayState = other.FirstPayState;
      }
      giftList_.Add(other.giftList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 40: {
            MCLv = input.ReadInt32();
            break;
          }
          case 48: {
            MCDay = input.ReadInt32();
            break;
          }
          case 56: {
            IsGetMC = input.ReadBool();
            break;
          }
          case 64: {
            FirstPayState = input.ReadInt32();
            break;
          }
          case 74: {
            giftList_.AddEntriesFrom(input, _repeated_giftList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个礼包信息
  /// </summary>
  public sealed partial class One_gift_info : pb::IMessage<One_gift_info> {
    private static readonly pb::MessageParser<One_gift_info> _parser = new pb::MessageParser<One_gift_info>(() => new One_gift_info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<One_gift_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_gift_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_gift_info(One_gift_info other) : this() {
      id_ = other.id_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public One_gift_info Clone() {
      return new One_gift_info(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///礼包Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///已购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as One_gift_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(One_gift_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(One_gift_info other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///VIP经验发生改变
  /// </summary>
  public sealed partial class SC_vip_exp : pb::IMessage<SC_vip_exp> {
    private static readonly pb::MessageParser<SC_vip_exp> _parser = new pb::MessageParser<SC_vip_exp>(() => new SC_vip_exp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_vip_exp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_exp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_exp(SC_vip_exp other) : this() {
      vipLevel_ = other.vipLevel_;
      vipExp_ = other.vipExp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_exp Clone() {
      return new SC_vip_exp(this);
    }

    /// <summary>Field number for the "VipLevel" field.</summary>
    public const int VipLevelFieldNumber = 1;
    private int vipLevel_;
    /// <summary>
    ///Vip等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "VipExp" field.</summary>
    public const int VipExpFieldNumber = 2;
    private int vipExp_;
    /// <summary>
    ///Vip经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipExp {
      get { return vipExp_; }
      set {
        vipExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_vip_exp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_vip_exp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VipLevel != other.VipLevel) return false;
      if (VipExp != other.VipExp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (VipExp != 0) hash ^= VipExp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VipLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VipLevel);
      }
      if (VipExp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VipExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (VipExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_vip_exp other) {
      if (other == null) {
        return;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.VipExp != 0) {
        VipExp = other.VipExp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 16: {
            VipExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///VIP体验卡发生改变
  /// </summary>
  public sealed partial class SC_vipTry_change : pb::IMessage<SC_vipTry_change> {
    private static readonly pb::MessageParser<SC_vipTry_change> _parser = new pb::MessageParser<SC_vipTry_change>(() => new SC_vipTry_change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_vipTry_change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vipTry_change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vipTry_change(SC_vipTry_change other) : this() {
      vipTryLevel_ = other.vipTryLevel_;
      vipTryEndTime_ = other.vipTryEndTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vipTry_change Clone() {
      return new SC_vipTry_change(this);
    }

    /// <summary>Field number for the "VipTryLevel" field.</summary>
    public const int VipTryLevelFieldNumber = 1;
    private int vipTryLevel_;
    /// <summary>
    ///VIP体验等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipTryLevel {
      get { return vipTryLevel_; }
      set {
        vipTryLevel_ = value;
      }
    }

    /// <summary>Field number for the "VipTryEndTime" field.</summary>
    public const int VipTryEndTimeFieldNumber = 2;
    private int vipTryEndTime_;
    /// <summary>
    ///VIP体验结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipTryEndTime {
      get { return vipTryEndTime_; }
      set {
        vipTryEndTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_vipTry_change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_vipTry_change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VipTryLevel != other.VipTryLevel) return false;
      if (VipTryEndTime != other.VipTryEndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VipTryLevel != 0) hash ^= VipTryLevel.GetHashCode();
      if (VipTryEndTime != 0) hash ^= VipTryEndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VipTryLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VipTryLevel);
      }
      if (VipTryEndTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VipTryEndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VipTryLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipTryLevel);
      }
      if (VipTryEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipTryEndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_vipTry_change other) {
      if (other == null) {
        return;
      }
      if (other.VipTryLevel != 0) {
        VipTryLevel = other.VipTryLevel;
      }
      if (other.VipTryEndTime != 0) {
        VipTryEndTime = other.VipTryEndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VipTryLevel = input.ReadInt32();
            break;
          }
          case 16: {
            VipTryEndTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求购买VIP礼包
  /// </summary>
  public sealed partial class CS_vip_buyGift : pb::IMessage<CS_vip_buyGift> {
    private static readonly pb::MessageParser<CS_vip_buyGift> _parser = new pb::MessageParser<CS_vip_buyGift>(() => new CS_vip_buyGift());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_vip_buyGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_vip_buyGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_vip_buyGift(CS_vip_buyGift other) : this() {
      levelID_ = other.levelID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_vip_buyGift Clone() {
      return new CS_vip_buyGift(this);
    }

    /// <summary>Field number for the "LevelID" field.</summary>
    public const int LevelIDFieldNumber = 1;
    private int levelID_;
    /// <summary>
    ///Vip等级档次ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_vip_buyGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_vip_buyGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelID != other.LevelID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LevelID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_vip_buyGift other) {
      if (other == null) {
        return;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到购买VIP礼包结果
  /// </summary>
  public sealed partial class SC_vip_buyGift : pb::IMessage<SC_vip_buyGift> {
    private static readonly pb::MessageParser<SC_vip_buyGift> _parser = new pb::MessageParser<SC_vip_buyGift>(() => new SC_vip_buyGift());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_vip_buyGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_buyGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_buyGift(SC_vip_buyGift other) : this() {
      levelID_ = other.levelID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_vip_buyGift Clone() {
      return new SC_vip_buyGift(this);
    }

    /// <summary>Field number for the "LevelID" field.</summary>
    public const int LevelIDFieldNumber = 1;
    private int levelID_;
    /// <summary>
    ///Vip等级档次ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_vip_buyGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_vip_buyGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelID != other.LevelID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LevelID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_vip_buyGift other) {
      if (other == null) {
        return;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取月卡奖励
  /// </summary>
  public sealed partial class CS_monthCard_get : pb::IMessage<CS_monthCard_get> {
    private static readonly pb::MessageParser<CS_monthCard_get> _parser = new pb::MessageParser<CS_monthCard_get>(() => new CS_monthCard_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_monthCard_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_monthCard_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_monthCard_get(CS_monthCard_get other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_monthCard_get Clone() {
      return new CS_monthCard_get(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_monthCard_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_monthCard_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_monthCard_get other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到领取月卡奖励结果
  /// </summary>
  public sealed partial class SC_monthCard_get : pb::IMessage<SC_monthCard_get> {
    private static readonly pb::MessageParser<SC_monthCard_get> _parser = new pb::MessageParser<SC_monthCard_get>(() => new SC_monthCard_get());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_monthCard_get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_monthCard_get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_monthCard_get(SC_monthCard_get other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_monthCard_get Clone() {
      return new SC_monthCard_get(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_monthCard_get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_monthCard_get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_monthCard_get other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求充值下定单
  /// </summary>
  public sealed partial class CS_pay_order : pb::IMessage<CS_pay_order> {
    private static readonly pb::MessageParser<CS_pay_order> _parser = new pb::MessageParser<CS_pay_order>(() => new CS_pay_order());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_pay_order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_order(CS_pay_order other) : this() {
      goodsID_ = other.goodsID_;
      platformType_ = other.platformType_;
      platParams_ = other.platParams_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_order Clone() {
      return new CS_pay_order(this);
    }

    /// <summary>Field number for the "GoodsID" field.</summary>
    public const int GoodsIDFieldNumber = 1;
    private int goodsID_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsID {
      get { return goodsID_; }
      set {
        goodsID_ = value;
      }
    }

    /// <summary>Field number for the "PlatformType" field.</summary>
    public const int PlatformTypeFieldNumber = 2;
    private int platformType_;
    /// <summary>
    ///平台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlatformType {
      get { return platformType_; }
      set {
        platformType_ = value;
      }
    }

    /// <summary>Field number for the "PlatParams" field.</summary>
    public const int PlatParamsFieldNumber = 3;
    private string platParams_ = "";
    /// <summary>
    ///平台参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatParams {
      get { return platParams_; }
      set {
        platParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_pay_order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_pay_order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoodsID != other.GoodsID) return false;
      if (PlatformType != other.PlatformType) return false;
      if (PlatParams != other.PlatParams) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GoodsID != 0) hash ^= GoodsID.GetHashCode();
      if (PlatformType != 0) hash ^= PlatformType.GetHashCode();
      if (PlatParams.Length != 0) hash ^= PlatParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GoodsID);
      }
      if (PlatformType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlatformType);
      }
      if (PlatParams.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlatParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsID);
      }
      if (PlatformType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlatformType);
      }
      if (PlatParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_pay_order other) {
      if (other == null) {
        return;
      }
      if (other.GoodsID != 0) {
        GoodsID = other.GoodsID;
      }
      if (other.PlatformType != 0) {
        PlatformType = other.PlatformType;
      }
      if (other.PlatParams.Length != 0) {
        PlatParams = other.PlatParams;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsID = input.ReadInt32();
            break;
          }
          case 16: {
            PlatformType = input.ReadInt32();
            break;
          }
          case 26: {
            PlatParams = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到充值定单信息
  /// </summary>
  public sealed partial class SC_pay_order : pb::IMessage<SC_pay_order> {
    private static readonly pb::MessageParser<SC_pay_order> _parser = new pb::MessageParser<SC_pay_order>(() => new SC_pay_order());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_pay_order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_order(SC_pay_order other) : this() {
      result_ = other.result_;
      goodsID_ = other.goodsID_;
      platformType_ = other.platformType_;
      token_ = other.token_;
      orderId_ = other.orderId_;
      ext_ = other.ext_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_order Clone() {
      return new SC_pay_order(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbCom.Enum_payOrder_result result_ = 0;
    /// <summary>
    ///结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbCom.Enum_payOrder_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "GoodsID" field.</summary>
    public const int GoodsIDFieldNumber = 2;
    private int goodsID_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsID {
      get { return goodsID_; }
      set {
        goodsID_ = value;
      }
    }

    /// <summary>Field number for the "PlatformType" field.</summary>
    public const int PlatformTypeFieldNumber = 3;
    private int platformType_;
    /// <summary>
    ///平台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlatformType {
      get { return platformType_; }
      set {
        platformType_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    /// <summary>
    ///验证签名 (sign)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 5;
    private string orderId_ = "";
    /// <summary>
    ///服务器定单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ext" field.</summary>
    public const int ExtFieldNumber = 6;
    private string ext_ = "";
    /// <summary>
    ///透传参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ext {
      get { return ext_; }
      set {
        ext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_pay_order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_pay_order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (GoodsID != other.GoodsID) return false;
      if (PlatformType != other.PlatformType) return false;
      if (Token != other.Token) return false;
      if (OrderId != other.OrderId) return false;
      if (Ext != other.Ext) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (GoodsID != 0) hash ^= GoodsID.GetHashCode();
      if (PlatformType != 0) hash ^= PlatformType.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (Ext.Length != 0) hash ^= Ext.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (GoodsID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodsID);
      }
      if (PlatformType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlatformType);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderId);
      }
      if (Ext.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Ext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (GoodsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsID);
      }
      if (PlatformType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlatformType);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (Ext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ext);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_pay_order other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.GoodsID != 0) {
        GoodsID = other.GoodsID;
      }
      if (other.PlatformType != 0) {
        PlatformType = other.PlatformType;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.Ext.Length != 0) {
        Ext = other.Ext;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbCom.Enum_payOrder_result) input.ReadEnum();
            break;
          }
          case 16: {
            GoodsID = input.ReadInt32();
            break;
          }
          case 24: {
            PlatformType = input.ReadInt32();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
          case 42: {
            OrderId = input.ReadString();
            break;
          }
          case 50: {
            Ext = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求支付成功(平台回调客户端成功需要发货时调用)   注：（自接gp和ios，客户端回调发货时才用此消息）
  /// </summary>
  public sealed partial class CS_pay_succeed : pb::IMessage<CS_pay_succeed> {
    private static readonly pb::MessageParser<CS_pay_succeed> _parser = new pb::MessageParser<CS_pay_succeed>(() => new CS_pay_succeed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_pay_succeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_succeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_succeed(CS_pay_succeed other) : this() {
      platformType_ = other.platformType_;
      goodsID_ = other.goodsID_;
      orderId_ = other.orderId_;
      pfOrderId_ = other.pfOrderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_succeed Clone() {
      return new CS_pay_succeed(this);
    }

    /// <summary>Field number for the "PlatformType" field.</summary>
    public const int PlatformTypeFieldNumber = 1;
    private int platformType_;
    /// <summary>
    ///平台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlatformType {
      get { return platformType_; }
      set {
        platformType_ = value;
      }
    }

    /// <summary>Field number for the "GoodsID" field.</summary>
    public const int GoodsIDFieldNumber = 2;
    private int goodsID_;
    /// <summary>
    ///商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsID {
      get { return goodsID_; }
      set {
        goodsID_ = value;
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 3;
    private string orderId_ = "";
    /// <summary>
    ///游戏定单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PfOrderId" field.</summary>
    public const int PfOrderIdFieldNumber = 4;
    private string pfOrderId_ = "";
    /// <summary>
    ///平台订单号(ios是前端返回的payload,gp是前端返回的purchaseData json字符串)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PfOrderId {
      get { return pfOrderId_; }
      set {
        pfOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_pay_succeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_pay_succeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlatformType != other.PlatformType) return false;
      if (GoodsID != other.GoodsID) return false;
      if (OrderId != other.OrderId) return false;
      if (PfOrderId != other.PfOrderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlatformType != 0) hash ^= PlatformType.GetHashCode();
      if (GoodsID != 0) hash ^= GoodsID.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (PfOrderId.Length != 0) hash ^= PfOrderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlatformType);
      }
      if (GoodsID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodsID);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderId);
      }
      if (PfOrderId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PfOrderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlatformType);
      }
      if (GoodsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsID);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (PfOrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PfOrderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_pay_succeed other) {
      if (other == null) {
        return;
      }
      if (other.PlatformType != 0) {
        PlatformType = other.PlatformType;
      }
      if (other.GoodsID != 0) {
        GoodsID = other.GoodsID;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.PfOrderId.Length != 0) {
        PfOrderId = other.PfOrderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlatformType = input.ReadInt32();
            break;
          }
          case 16: {
            GoodsID = input.ReadInt32();
            break;
          }
          case 26: {
            OrderId = input.ReadString();
            break;
          }
          case 34: {
            PfOrderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到支付成功
  /// </summary>
  public sealed partial class SC_pay_succeed : pb::IMessage<SC_pay_succeed> {
    private static readonly pb::MessageParser<SC_pay_succeed> _parser = new pb::MessageParser<SC_pay_succeed>(() => new SC_pay_succeed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_pay_succeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_succeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_succeed(SC_pay_succeed other) : this() {
      result_ = other.result_;
      orderId_ = other.orderId_;
      productID_ = other.productID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_succeed Clone() {
      return new SC_pay_succeed(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbPay.Enum_pay_result result_ = 0;
    /// <summary>
    ///支付结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPay.Enum_pay_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private string orderId_ = "";
    /// <summary>
    ///游戏定单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProductID" field.</summary>
    public const int ProductIDFieldNumber = 3;
    private string productID_ = "";
    /// <summary>
    ///平台商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductID {
      get { return productID_; }
      set {
        productID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_pay_succeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_pay_succeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (OrderId != other.OrderId) return false;
      if (ProductID != other.ProductID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (ProductID.Length != 0) hash ^= ProductID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
      if (ProductID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (ProductID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_pay_succeed other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.ProductID.Length != 0) {
        ProductID = other.ProductID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbPay.Enum_pay_result) input.ReadEnum();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
          case 26: {
            ProductID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到充值结果
  /// </summary>
  public sealed partial class SC_pay_normal : pb::IMessage<SC_pay_normal> {
    private static readonly pb::MessageParser<SC_pay_normal> _parser = new pb::MessageParser<SC_pay_normal>(() => new SC_pay_normal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_pay_normal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_normal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_normal(SC_pay_normal other) : this() {
      result_ = other.result_;
      iD_ = other.iD_;
      firstPayState_ = other.firstPayState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_normal Clone() {
      return new SC_pay_normal(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbPay.Enum_pay_result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPay.Enum_pay_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private int iD_;
    /// <summary>
    ///充值档次ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "FirstPayState" field.</summary>
    public const int FirstPayStateFieldNumber = 3;
    private int firstPayState_;
    /// <summary>
    ///首充奖励状态 (EAwardState)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPayState {
      get { return firstPayState_; }
      set {
        firstPayState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_pay_normal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_pay_normal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ID != other.ID) return false;
      if (FirstPayState != other.FirstPayState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      if (FirstPayState != 0) hash ^= FirstPayState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (ID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ID);
      }
      if (FirstPayState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FirstPayState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (FirstPayState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPayState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_pay_normal other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.FirstPayState != 0) {
        FirstPayState = other.FirstPayState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbPay.Enum_pay_result) input.ReadEnum();
            break;
          }
          case 16: {
            ID = input.ReadInt32();
            break;
          }
          case 24: {
            FirstPayState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到充值月卡结果
  /// </summary>
  public sealed partial class SC_pay_monthCard : pb::IMessage<SC_pay_monthCard> {
    private static readonly pb::MessageParser<SC_pay_monthCard> _parser = new pb::MessageParser<SC_pay_monthCard>(() => new SC_pay_monthCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_pay_monthCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_monthCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_monthCard(SC_pay_monthCard other) : this() {
      result_ = other.result_;
      iD_ = other.iD_;
      mCDay_ = other.mCDay_;
      firstPayState_ = other.firstPayState_;
      isGetMC_ = other.isGetMC_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_monthCard Clone() {
      return new SC_pay_monthCard(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbPay.Enum_pay_result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPay.Enum_pay_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private int iD_;
    /// <summary>
    ///充值档次ID 1： 月卡 2：年卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "MCDay" field.</summary>
    public const int MCDayFieldNumber = 3;
    private int mCDay_;
    /// <summary>
    ///月卡天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCDay {
      get { return mCDay_; }
      set {
        mCDay_ = value;
      }
    }

    /// <summary>Field number for the "FirstPayState" field.</summary>
    public const int FirstPayStateFieldNumber = 4;
    private int firstPayState_;
    /// <summary>
    ///首充奖励状态 (EAwardState)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPayState {
      get { return firstPayState_; }
      set {
        firstPayState_ = value;
      }
    }

    /// <summary>Field number for the "IsGetMC" field.</summary>
    public const int IsGetMCFieldNumber = 7;
    private bool isGetMC_;
    /// <summary>
    ///月卡今日是否已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGetMC {
      get { return isGetMC_; }
      set {
        isGetMC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_pay_monthCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_pay_monthCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ID != other.ID) return false;
      if (MCDay != other.MCDay) return false;
      if (FirstPayState != other.FirstPayState) return false;
      if (IsGetMC != other.IsGetMC) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      if (MCDay != 0) hash ^= MCDay.GetHashCode();
      if (FirstPayState != 0) hash ^= FirstPayState.GetHashCode();
      if (IsGetMC != false) hash ^= IsGetMC.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (ID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ID);
      }
      if (MCDay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MCDay);
      }
      if (FirstPayState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstPayState);
      }
      if (IsGetMC != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsGetMC);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (MCDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCDay);
      }
      if (FirstPayState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPayState);
      }
      if (IsGetMC != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_pay_monthCard other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.MCDay != 0) {
        MCDay = other.MCDay;
      }
      if (other.FirstPayState != 0) {
        FirstPayState = other.FirstPayState;
      }
      if (other.IsGetMC != false) {
        IsGetMC = other.IsGetMC;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbPay.Enum_pay_result) input.ReadEnum();
            break;
          }
          case 16: {
            ID = input.ReadInt32();
            break;
          }
          case 24: {
            MCDay = input.ReadInt32();
            break;
          }
          case 32: {
            FirstPayState = input.ReadInt32();
            break;
          }
          case 56: {
            IsGetMC = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到充值礼包结果
  /// </summary>
  public sealed partial class SC_pay_gift : pb::IMessage<SC_pay_gift> {
    private static readonly pb::MessageParser<SC_pay_gift> _parser = new pb::MessageParser<SC_pay_gift>(() => new SC_pay_gift());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_pay_gift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_gift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_gift(SC_pay_gift other) : this() {
      result_ = other.result_;
      iD_ = other.iD_;
      firstPayState_ = other.firstPayState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_gift Clone() {
      return new SC_pay_gift(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbPay.Enum_pay_result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPay.Enum_pay_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private int iD_;
    /// <summary>
    ///充值礼包ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "FirstPayState" field.</summary>
    public const int FirstPayStateFieldNumber = 3;
    private int firstPayState_;
    /// <summary>
    ///首充奖励状态 (EAwardState)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPayState {
      get { return firstPayState_; }
      set {
        firstPayState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_pay_gift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_pay_gift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ID != other.ID) return false;
      if (FirstPayState != other.FirstPayState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      if (FirstPayState != 0) hash ^= FirstPayState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (ID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ID);
      }
      if (FirstPayState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FirstPayState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (FirstPayState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPayState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_pay_gift other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.FirstPayState != 0) {
        FirstPayState = other.FirstPayState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbPay.Enum_pay_result) input.ReadEnum();
            break;
          }
          case 16: {
            ID = input.ReadInt32();
            break;
          }
          case 24: {
            FirstPayState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到购买基金结果
  /// </summary>
  public sealed partial class SC_pay_fund : pb::IMessage<SC_pay_fund> {
    private static readonly pb::MessageParser<SC_pay_fund> _parser = new pb::MessageParser<SC_pay_fund>(() => new SC_pay_fund());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_pay_fund> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_fund() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_fund(SC_pay_fund other) : this() {
      result_ = other.result_;
      firstPayState_ = other.firstPayState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_fund Clone() {
      return new SC_pay_fund(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbPay.Enum_pay_result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPay.Enum_pay_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "FirstPayState" field.</summary>
    public const int FirstPayStateFieldNumber = 2;
    private int firstPayState_;
    /// <summary>
    ///首充奖励状态 (EAwardState)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPayState {
      get { return firstPayState_; }
      set {
        firstPayState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_pay_fund);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_pay_fund other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (FirstPayState != other.FirstPayState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (FirstPayState != 0) hash ^= FirstPayState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (FirstPayState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FirstPayState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (FirstPayState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPayState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_pay_fund other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.FirstPayState != 0) {
        FirstPayState = other.FirstPayState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbPay.Enum_pay_result) input.ReadEnum();
            break;
          }
          case 16: {
            FirstPayState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到购买英勇卡结果
  /// </summary>
  public sealed partial class SC_pay_heroicCard : pb::IMessage<SC_pay_heroicCard> {
    private static readonly pb::MessageParser<SC_pay_heroicCard> _parser = new pb::MessageParser<SC_pay_heroicCard>(() => new SC_pay_heroicCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_pay_heroicCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_heroicCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_heroicCard(SC_pay_heroicCard other) : this() {
      result_ = other.result_;
      firstPayState_ = other.firstPayState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_heroicCard Clone() {
      return new SC_pay_heroicCard(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PbPay.Enum_pay_result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbPay.Enum_pay_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "FirstPayState" field.</summary>
    public const int FirstPayStateFieldNumber = 2;
    private int firstPayState_;
    /// <summary>
    ///首充奖励状态 (EAwardState)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstPayState {
      get { return firstPayState_; }
      set {
        firstPayState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_pay_heroicCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_pay_heroicCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (FirstPayState != other.FirstPayState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (FirstPayState != 0) hash ^= FirstPayState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (FirstPayState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FirstPayState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (FirstPayState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstPayState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_pay_heroicCard other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.FirstPayState != 0) {
        FirstPayState = other.FirstPayState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::PbPay.Enum_pay_result) input.ReadEnum();
            break;
          }
          case 16: {
            FirstPayState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取首充奖励
  /// </summary>
  public sealed partial class CS_pay_getFirstPay : pb::IMessage<CS_pay_getFirstPay> {
    private static readonly pb::MessageParser<CS_pay_getFirstPay> _parser = new pb::MessageParser<CS_pay_getFirstPay>(() => new CS_pay_getFirstPay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_pay_getFirstPay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_getFirstPay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_getFirstPay(CS_pay_getFirstPay other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_pay_getFirstPay Clone() {
      return new CS_pay_getFirstPay(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_pay_getFirstPay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_pay_getFirstPay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_pay_getFirstPay other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///收到领取首充奖励结果
  /// </summary>
  public sealed partial class SC_pay_getFirstPay : pb::IMessage<SC_pay_getFirstPay> {
    private static readonly pb::MessageParser<SC_pay_getFirstPay> _parser = new pb::MessageParser<SC_pay_getFirstPay>(() => new SC_pay_getFirstPay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_pay_getFirstPay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbPay.PbPayReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_getFirstPay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_getFirstPay(SC_pay_getFirstPay other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_pay_getFirstPay Clone() {
      return new SC_pay_getFirstPay(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_pay_getFirstPay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_pay_getFirstPay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_pay_getFirstPay other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
