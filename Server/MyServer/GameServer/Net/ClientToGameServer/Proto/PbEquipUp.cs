// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbEquipUp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbEquipUp {

  /// <summary>Holder for reflection information generated from PbEquipUp.proto</summary>
  public static partial class PbEquipUpReflection {

    #region Descriptor
    /// <summary>File descriptor for PbEquipUp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbEquipUpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9QYkVxdWlwVXAucHJvdG8SCVBiRXF1aXBVcCIeCg9DU19lcXVpcF9zdHJl",
            "bmcSCwoDU0lEGAEgASgFIj4KD1NDX2VxdWlwX3N0cmVuZxILCgNTSUQYASAB",
            "KAUSDQoFTGV2ZWwYAiABKAUSDwoHQnJlYWtMdhgDIAEoBSIdCg5DU19lcXVp",
            "cF9icmVhaxILCgNTSUQYASABKAUiSgoOU0NfZXF1aXBfYnJlYWsSCwoDU0lE",
            "GAEgASgFEg0KBUxldmVsGAIgASgFEg8KB0JyZWFrTHYYAyABKAUSCwoDbnVt",
            "GAQgASgFIkkKD0NTX2VxdWlwX0NoYW5nZRILCgNTSUQYASABKAUSDAoEVHlw",
            "ZRgCIAEoBRINCgVJbmRleBgDIAEoBRIMCgRDU0lEGAQgASgFIlkKD1NDX2Vx",
            "dWlwX0NoYW5nZRILCgNTSUQYASABKAUSDAoEVHlwZRgCIAEoBRINCgVJbmRl",
            "eBgDIAEoBRIMCgRDU2lkGAQgASgFEg4KBkdlbVNpZBgFIAEoBSIfChBDU19l",
            "cXVpcF9SZXNvbHZlEgsKA1NJRBgBIAEoBSJPChBTQ19lcXVpcF9SZXNvbHZl",
            "EgsKA1NJRBgBIAEoBRIuCgZyZXN1bHQYAiABKA4yHi5QYkVxdWlwVXAuRW51",
            "bV9SZXNvbHZlX3Jlc3VsdCIrCg5DU19lcXVpcF9tZXJnZRILCgNTSUQYASAB",
            "KAUSDAoETGlzdBgCIAMoBSJaCg5TQ19lcXVpcF9tZXJnZRILCgNTSUQYASAB",
            "KAUSDAoETGlzdBgCIAMoBRIPCgdCcmVha0x2GAMgASgFEgsKA0V4cBgEIAEo",
            "BRIPCgdHZW1MaXN0GAUgAygFIh4KD0NTX2dlbXNfcmVzb2x2ZRILCgNTSUQY",
            "ASABKAUiHgoPU0NfZ2Vtc19yZXNvbHZlEgsKA1NJRBgBIAEoBSI8Cg1DU19n",
            "ZW1zX0lubGF5EgsKA1NJRBgBIAEoBRIQCghFcXVpcFNJRBgCIAEoBRIMCgRU",
            "cHllGAMgASgFIksKDVNDX2dlbXNfSW5sYXkSCwoDU0lEGAEgASgFEhAKCEVx",
            "dWlwU0lEGAIgASgFEgwKBFRweWUYAyABKAUSDQoFRXhTSUQYBCABKAUqPwoT",
            "RW51bV9SZXNvbHZlX3Jlc3VsdBINCglSZVN1Y2NlZWQQABINCglSZURyZXNz",
            "ZWQQARIKCgZSZU9ubHkQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbEquipUp.Enum_Resolve_result), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.CS_equip_streng), global::PbEquipUp.CS_equip_streng.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.SC_equip_streng), global::PbEquipUp.SC_equip_streng.Parser, new[]{ "SID", "Level", "BreakLv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.CS_equip_break), global::PbEquipUp.CS_equip_break.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.SC_equip_break), global::PbEquipUp.SC_equip_break.Parser, new[]{ "SID", "Level", "BreakLv", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.CS_equip_Change), global::PbEquipUp.CS_equip_Change.Parser, new[]{ "SID", "Type", "Index", "CSID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.SC_equip_Change), global::PbEquipUp.SC_equip_Change.Parser, new[]{ "SID", "Type", "Index", "CSid", "GemSid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.CS_equip_Resolve), global::PbEquipUp.CS_equip_Resolve.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.SC_equip_Resolve), global::PbEquipUp.SC_equip_Resolve.Parser, new[]{ "SID", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.CS_equip_merge), global::PbEquipUp.CS_equip_merge.Parser, new[]{ "SID", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.SC_equip_merge), global::PbEquipUp.SC_equip_merge.Parser, new[]{ "SID", "List", "BreakLv", "Exp", "GemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.CS_gems_resolve), global::PbEquipUp.CS_gems_resolve.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.SC_gems_resolve), global::PbEquipUp.SC_gems_resolve.Parser, new[]{ "SID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.CS_gems_Inlay), global::PbEquipUp.CS_gems_Inlay.Parser, new[]{ "SID", "EquipSID", "Tpye" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbEquipUp.SC_gems_Inlay), global::PbEquipUp.SC_gems_Inlay.Parser, new[]{ "SID", "EquipSID", "Tpye", "ExSID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///分解装备结果
  /// </summary>
  public enum Enum_Resolve_result {
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("ReSucceed")] ReSucceed = 0,
    /// <summary>
    ///已穿戴装备不能分解
    /// </summary>
    [pbr::OriginalName("ReDressed")] ReDressed = 1,
    /// <summary>
    ///唯一类型装备不能分解
    /// </summary>
    [pbr::OriginalName("ReOnly")] ReOnly = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///请求装备升级
  /// </summary>
  public sealed partial class CS_equip_streng : pb::IMessage<CS_equip_streng> {
    private static readonly pb::MessageParser<CS_equip_streng> _parser = new pb::MessageParser<CS_equip_streng>(() => new CS_equip_streng());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_equip_streng> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_streng() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_streng(CS_equip_streng other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_streng Clone() {
      return new CS_equip_streng(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_equip_streng);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_equip_streng other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_equip_streng other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到装备升级结果
  /// </summary>
  public sealed partial class SC_equip_streng : pb::IMessage<SC_equip_streng> {
    private static readonly pb::MessageParser<SC_equip_streng> _parser = new pb::MessageParser<SC_equip_streng>(() => new SC_equip_streng());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_equip_streng> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_streng() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_streng(SC_equip_streng other) : this() {
      sID_ = other.sID_;
      level_ = other.level_;
      breakLv_ = other.breakLv_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_streng Clone() {
      return new SC_equip_streng(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///强化后的等级 (修改装备数据)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "BreakLv" field.</summary>
    public const int BreakLvFieldNumber = 3;
    private int breakLv_;
    /// <summary>
    ///突破等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakLv {
      get { return breakLv_; }
      set {
        breakLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_equip_streng);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_equip_streng other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Level != other.Level) return false;
      if (BreakLv != other.BreakLv) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BreakLv != 0) hash ^= BreakLv.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (BreakLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BreakLv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BreakLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakLv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_equip_streng other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BreakLv != 0) {
        BreakLv = other.BreakLv;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            BreakLv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求装备升阶
  /// </summary>
  public sealed partial class CS_equip_break : pb::IMessage<CS_equip_break> {
    private static readonly pb::MessageParser<CS_equip_break> _parser = new pb::MessageParser<CS_equip_break>(() => new CS_equip_break());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_equip_break> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_break() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_break(CS_equip_break other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_break Clone() {
      return new CS_equip_break(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_equip_break);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_equip_break other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_equip_break other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到装备升阶结果
  /// </summary>
  public sealed partial class SC_equip_break : pb::IMessage<SC_equip_break> {
    private static readonly pb::MessageParser<SC_equip_break> _parser = new pb::MessageParser<SC_equip_break>(() => new SC_equip_break());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_equip_break> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_break() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_break(SC_equip_break other) : this() {
      sID_ = other.sID_;
      level_ = other.level_;
      breakLv_ = other.breakLv_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_break Clone() {
      return new SC_equip_break(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///强化后的等级 (修改装备数据)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "BreakLv" field.</summary>
    public const int BreakLvFieldNumber = 3;
    private int breakLv_;
    /// <summary>
    ///突破等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakLv {
      get { return breakLv_; }
      set {
        breakLv_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 4;
    private int num_;
    /// <summary>
    ///剩余升级道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_equip_break);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_equip_break other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Level != other.Level) return false;
      if (BreakLv != other.BreakLv) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BreakLv != 0) hash ^= BreakLv.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (BreakLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BreakLv);
      }
      if (Num != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BreakLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakLv);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_equip_break other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BreakLv != 0) {
        BreakLv = other.BreakLv;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            BreakLv = input.ReadInt32();
            break;
          }
          case 32: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求更换装备
  /// </summary>
  public sealed partial class CS_equip_Change : pb::IMessage<CS_equip_Change> {
    private static readonly pb::MessageParser<CS_equip_Change> _parser = new pb::MessageParser<CS_equip_Change>(() => new CS_equip_Change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_equip_Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_Change(CS_equip_Change other) : this() {
      sID_ = other.sID_;
      type_ = other.type_;
      index_ = other.index_;
      cSID_ = other.cSID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_Change Clone() {
      return new CS_equip_Change(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///操作类型（1 穿戴  2 卸下）穿戴时位置已有装备默认替换掉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    /// <summary>
    ///位置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "CSID" field.</summary>
    public const int CSIDFieldNumber = 4;
    private int cSID_;
    /// <summary>
    ///被替换装备sid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CSID {
      get { return cSID_; }
      set {
        cSID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_equip_Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_equip_Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Type != other.Type) return false;
      if (Index != other.Index) return false;
      if (CSID != other.CSID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (CSID != 0) hash ^= CSID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (CSID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CSID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CSID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_equip_Change other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.CSID != 0) {
        CSID = other.CSID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            CSID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到更换装备
  /// </summary>
  public sealed partial class SC_equip_Change : pb::IMessage<SC_equip_Change> {
    private static readonly pb::MessageParser<SC_equip_Change> _parser = new pb::MessageParser<SC_equip_Change>(() => new SC_equip_Change());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_equip_Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_Change(SC_equip_Change other) : this() {
      sID_ = other.sID_;
      type_ = other.type_;
      index_ = other.index_;
      cSid_ = other.cSid_;
      gemSid_ = other.gemSid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_Change Clone() {
      return new SC_equip_Change(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///操作类型（1 穿戴  2 卸下）穿戴时位置已有装备默认替换掉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    /// <summary>
    ///位置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "CSid" field.</summary>
    public const int CSidFieldNumber = 4;
    private int cSid_;
    /// <summary>
    ///被替换装备模板id（没有为0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CSid {
      get { return cSid_; }
      set {
        cSid_ = value;
      }
    }

    /// <summary>Field number for the "GemSid" field.</summary>
    public const int GemSidFieldNumber = 5;
    private int gemSid_;
    /// <summary>
    ///装备卸下时同时卸下宝石的SID（为0表示卸下的装备未镶嵌宝石）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemSid {
      get { return gemSid_; }
      set {
        gemSid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_equip_Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_equip_Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Type != other.Type) return false;
      if (Index != other.Index) return false;
      if (CSid != other.CSid) return false;
      if (GemSid != other.GemSid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (CSid != 0) hash ^= CSid.GetHashCode();
      if (GemSid != 0) hash ^= GemSid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (CSid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CSid);
      }
      if (GemSid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GemSid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CSid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CSid);
      }
      if (GemSid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemSid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_equip_Change other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.CSid != 0) {
        CSid = other.CSid;
      }
      if (other.GemSid != 0) {
        GemSid = other.GemSid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            CSid = input.ReadInt32();
            break;
          }
          case 40: {
            GemSid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求分解装备
  /// </summary>
  public sealed partial class CS_equip_Resolve : pb::IMessage<CS_equip_Resolve> {
    private static readonly pb::MessageParser<CS_equip_Resolve> _parser = new pb::MessageParser<CS_equip_Resolve>(() => new CS_equip_Resolve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_equip_Resolve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_Resolve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_Resolve(CS_equip_Resolve other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_Resolve Clone() {
      return new CS_equip_Resolve(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_equip_Resolve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_equip_Resolve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_equip_Resolve other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到分解装备
  /// </summary>
  public sealed partial class SC_equip_Resolve : pb::IMessage<SC_equip_Resolve> {
    private static readonly pb::MessageParser<SC_equip_Resolve> _parser = new pb::MessageParser<SC_equip_Resolve>(() => new SC_equip_Resolve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_equip_Resolve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_Resolve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_Resolve(SC_equip_Resolve other) : this() {
      sID_ = other.sID_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_Resolve Clone() {
      return new SC_equip_Resolve(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::PbEquipUp.Enum_Resolve_result result_ = 0;
    /// <summary>
    ///分解装备结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbEquipUp.Enum_Resolve_result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_equip_Resolve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_equip_Resolve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_equip_Resolve other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            result_ = (global::PbEquipUp.Enum_Resolve_result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求装备融合
  /// </summary>
  public sealed partial class CS_equip_merge : pb::IMessage<CS_equip_merge> {
    private static readonly pb::MessageParser<CS_equip_merge> _parser = new pb::MessageParser<CS_equip_merge>(() => new CS_equip_merge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_equip_merge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_merge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_merge(CS_equip_merge other) : this() {
      sID_ = other.sID_;
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_equip_merge Clone() {
      return new CS_equip_merge(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///待升级装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "List" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_list_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> list_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///熔炼装备sid集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_equip_merge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_equip_merge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_equip_merge other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到装备融合
  /// </summary>
  public sealed partial class SC_equip_merge : pb::IMessage<SC_equip_merge> {
    private static readonly pb::MessageParser<SC_equip_merge> _parser = new pb::MessageParser<SC_equip_merge>(() => new SC_equip_merge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_equip_merge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_merge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_merge(SC_equip_merge other) : this() {
      sID_ = other.sID_;
      list_ = other.list_.Clone();
      breakLv_ = other.breakLv_;
      exp_ = other.exp_;
      gemList_ = other.gemList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_equip_merge Clone() {
      return new SC_equip_merge(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "List" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_list_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> list_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///熔炼装备sid集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> List {
      get { return list_; }
    }

    /// <summary>Field number for the "BreakLv" field.</summary>
    public const int BreakLvFieldNumber = 3;
    private int breakLv_;
    /// <summary>
    ///品阶等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakLv {
      get { return breakLv_; }
      set {
        breakLv_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "GemList" field.</summary>
    public const int GemListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_gemList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> gemList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///熔炼装备取出宝石sid集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GemList {
      get { return gemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_equip_merge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_equip_merge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if(!list_.Equals(other.list_)) return false;
      if (BreakLv != other.BreakLv) return false;
      if (Exp != other.Exp) return false;
      if(!gemList_.Equals(other.gemList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      hash ^= list_.GetHashCode();
      if (BreakLv != 0) hash ^= BreakLv.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      hash ^= gemList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (BreakLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BreakLv);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      gemList_.WriteTo(output, _repeated_gemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (BreakLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakLv);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      size += gemList_.CalculateSize(_repeated_gemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_equip_merge other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      list_.Add(other.list_);
      if (other.BreakLv != 0) {
        BreakLv = other.BreakLv;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      gemList_.Add(other.gemList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 24: {
            BreakLv = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            gemList_.AddEntriesFrom(input, _repeated_gemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求分解宝石
  /// </summary>
  public sealed partial class CS_gems_resolve : pb::IMessage<CS_gems_resolve> {
    private static readonly pb::MessageParser<CS_gems_resolve> _parser = new pb::MessageParser<CS_gems_resolve>(() => new CS_gems_resolve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_gems_resolve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_gems_resolve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_gems_resolve(CS_gems_resolve other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_gems_resolve Clone() {
      return new CS_gems_resolve(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///宝石SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_gems_resolve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_gems_resolve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_gems_resolve other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到分解宝石
  /// </summary>
  public sealed partial class SC_gems_resolve : pb::IMessage<SC_gems_resolve> {
    private static readonly pb::MessageParser<SC_gems_resolve> _parser = new pb::MessageParser<SC_gems_resolve>(() => new SC_gems_resolve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_gems_resolve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_gems_resolve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_gems_resolve(SC_gems_resolve other) : this() {
      sID_ = other.sID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_gems_resolve Clone() {
      return new SC_gems_resolve(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_gems_resolve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_gems_resolve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_gems_resolve other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求镶嵌(卸下)宝石
  /// </summary>
  public sealed partial class CS_gems_Inlay : pb::IMessage<CS_gems_Inlay> {
    private static readonly pb::MessageParser<CS_gems_Inlay> _parser = new pb::MessageParser<CS_gems_Inlay>(() => new CS_gems_Inlay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_gems_Inlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_gems_Inlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_gems_Inlay(CS_gems_Inlay other) : this() {
      sID_ = other.sID_;
      equipSID_ = other.equipSID_;
      tpye_ = other.tpye_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_gems_Inlay Clone() {
      return new CS_gems_Inlay(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///宝石SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "EquipSID" field.</summary>
    public const int EquipSIDFieldNumber = 2;
    private int equipSID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSID {
      get { return equipSID_; }
      set {
        equipSID_ = value;
      }
    }

    /// <summary>Field number for the "Tpye" field.</summary>
    public const int TpyeFieldNumber = 3;
    private int tpye_;
    /// <summary>
    ///类型（1 镶嵌 2 卸下）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tpye {
      get { return tpye_; }
      set {
        tpye_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_gems_Inlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_gems_Inlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (EquipSID != other.EquipSID) return false;
      if (Tpye != other.Tpye) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (EquipSID != 0) hash ^= EquipSID.GetHashCode();
      if (Tpye != 0) hash ^= Tpye.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (EquipSID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EquipSID);
      }
      if (Tpye != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tpye);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (EquipSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSID);
      }
      if (Tpye != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tpye);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_gems_Inlay other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.EquipSID != 0) {
        EquipSID = other.EquipSID;
      }
      if (other.Tpye != 0) {
        Tpye = other.Tpye;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            EquipSID = input.ReadInt32();
            break;
          }
          case 24: {
            Tpye = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到镶嵌(卸下)宝石
  /// </summary>
  public sealed partial class SC_gems_Inlay : pb::IMessage<SC_gems_Inlay> {
    private static readonly pb::MessageParser<SC_gems_Inlay> _parser = new pb::MessageParser<SC_gems_Inlay>(() => new SC_gems_Inlay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_gems_Inlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbEquipUp.PbEquipUpReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_gems_Inlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_gems_Inlay(SC_gems_Inlay other) : this() {
      sID_ = other.sID_;
      equipSID_ = other.equipSID_;
      tpye_ = other.tpye_;
      exSID_ = other.exSID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_gems_Inlay Clone() {
      return new SC_gems_Inlay(this);
    }

    /// <summary>Field number for the "SID" field.</summary>
    public const int SIDFieldNumber = 1;
    private int sID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SID {
      get { return sID_; }
      set {
        sID_ = value;
      }
    }

    /// <summary>Field number for the "EquipSID" field.</summary>
    public const int EquipSIDFieldNumber = 2;
    private int equipSID_;
    /// <summary>
    ///装备SID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipSID {
      get { return equipSID_; }
      set {
        equipSID_ = value;
      }
    }

    /// <summary>Field number for the "Tpye" field.</summary>
    public const int TpyeFieldNumber = 3;
    private int tpye_;
    /// <summary>
    ///类型（1 镶嵌 2 卸下）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tpye {
      get { return tpye_; }
      set {
        tpye_ = value;
      }
    }

    /// <summary>Field number for the "ExSID" field.</summary>
    public const int ExSIDFieldNumber = 4;
    private int exSID_;
    /// <summary>
    ///被替换宝石SID（原位置已镶嵌）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExSID {
      get { return exSID_; }
      set {
        exSID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_gems_Inlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_gems_Inlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SID != other.SID) return false;
      if (EquipSID != other.EquipSID) return false;
      if (Tpye != other.Tpye) return false;
      if (ExSID != other.ExSID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SID != 0) hash ^= SID.GetHashCode();
      if (EquipSID != 0) hash ^= EquipSID.GetHashCode();
      if (Tpye != 0) hash ^= Tpye.GetHashCode();
      if (ExSID != 0) hash ^= ExSID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SID);
      }
      if (EquipSID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EquipSID);
      }
      if (Tpye != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tpye);
      }
      if (ExSID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExSID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SID);
      }
      if (EquipSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipSID);
      }
      if (Tpye != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tpye);
      }
      if (ExSID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExSID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_gems_Inlay other) {
      if (other == null) {
        return;
      }
      if (other.SID != 0) {
        SID = other.SID;
      }
      if (other.EquipSID != 0) {
        EquipSID = other.EquipSID;
      }
      if (other.Tpye != 0) {
        Tpye = other.Tpye;
      }
      if (other.ExSID != 0) {
        ExSID = other.ExSID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SID = input.ReadInt32();
            break;
          }
          case 16: {
            EquipSID = input.ReadInt32();
            break;
          }
          case 24: {
            Tpye = input.ReadInt32();
            break;
          }
          case 32: {
            ExSID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
