// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbRank.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbRank {

  /// <summary>Holder for reflection information generated from PbRank.proto</summary>
  public static partial class PbRankReflection {

    #region Descriptor
    /// <summary>File descriptor for PbRank.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbRankReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQYlJhbmsucHJvdG8SBlBiUmFuaxoLUGJDb20ucHJvdG8iMwoMQ1NfUmFu",
            "a19MaXN0EiMKBFR5cGUYASABKA4yFS5QYkNvbS5FbnVtX1JhbmtfdHlwZSJs",
            "CgxTQ19SYW5rX0xpc3QSEwoLTmV4dFJlZlRpbWUYASABKAUSIwoEVHlwZRgC",
            "IAEoDjIVLlBiQ29tLkVudW1fUmFua190eXBlEiIKBExpc3QYAyADKAsyFC5Q",
            "YkNvbS5PbmVfUmFua19pdGVtIksKEkNTX3JhbmtfbG9va1BsYXllchILCgNQ",
            "SUQYASABKAkSKAoITG9va1R5cGUYAiABKA4yFi5QYlJhbmsuRW51bV9Mb29r",
            "X3R5cGUiaQoSU0NfcmFua19sb29rUGxheWVyEikKClBsYXllckluZm8YASAB",
            "KAsyFS5QYkNvbS5PbmVfUGxheWVySW5mbxIoCghMb29rVHlwZRgCIAEoDjIW",
            "LlBiUmFuay5FbnVtX0xvb2tfdHlwZSo7Cg5FbnVtX0xvb2tfdHlwZRIMCghM",
            "a05vcm1hbBAAEgwKCExrTGVhZ3VlEAESDQoJTGtDbHViV2FyEAJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PbCom.PbComReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbRank.Enum_Look_type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbRank.CS_Rank_List), global::PbRank.CS_Rank_List.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbRank.SC_Rank_List), global::PbRank.SC_Rank_List.Parser, new[]{ "NextRefTime", "Type", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbRank.CS_rank_lookPlayer), global::PbRank.CS_rank_lookPlayer.Parser, new[]{ "PID", "LookType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbRank.SC_rank_lookPlayer), global::PbRank.SC_rank_lookPlayer.Parser, new[]{ "PlayerInfo", "LookType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///查看类型枚举
  /// </summary>
  public enum Enum_Look_type {
    /// <summary>
    ///默认
    /// </summary>
    [pbr::OriginalName("LkNormal")] LkNormal = 0,
    /// <summary>
    ///联赛防守战队	
    /// </summary>
    [pbr::OriginalName("LkLeague")] LkLeague = 1,
    /// <summary>
    ///联盟战争防守战队	
    /// </summary>
    [pbr::OriginalName("LkClubWar")] LkClubWar = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///请求排行榜数据
  /// </summary>
  public sealed partial class CS_Rank_List : pb::IMessage<CS_Rank_List> {
    private static readonly pb::MessageParser<CS_Rank_List> _parser = new pb::MessageParser<CS_Rank_List>(() => new CS_Rank_List());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_Rank_List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbRank.PbRankReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Rank_List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Rank_List(CS_Rank_List other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_Rank_List Clone() {
      return new CS_Rank_List(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::PbCom.Enum_Rank_type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbCom.Enum_Rank_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_Rank_List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_Rank_List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_Rank_List other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::PbCom.Enum_Rank_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到排行榜数据
  /// </summary>
  public sealed partial class SC_Rank_List : pb::IMessage<SC_Rank_List> {
    private static readonly pb::MessageParser<SC_Rank_List> _parser = new pb::MessageParser<SC_Rank_List>(() => new SC_Rank_List());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_Rank_List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbRank.PbRankReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Rank_List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Rank_List(SC_Rank_List other) : this() {
      nextRefTime_ = other.nextRefTime_;
      type_ = other.type_;
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_Rank_List Clone() {
      return new SC_Rank_List(this);
    }

    /// <summary>Field number for the "NextRefTime" field.</summary>
    public const int NextRefTimeFieldNumber = 1;
    private int nextRefTime_;
    /// <summary>
    ///下次刷新排行榜时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextRefTime {
      get { return nextRefTime_; }
      set {
        nextRefTime_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::PbCom.Enum_Rank_type type_ = 0;
    /// <summary>
    ///排行榜类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbCom.Enum_Rank_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "List" field.</summary>
    public const int ListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PbCom.One_Rank_item> _repeated_list_codec
        = pb::FieldCodec.ForMessage(26, global::PbCom.One_Rank_item.Parser);
    private readonly pbc::RepeatedField<global::PbCom.One_Rank_item> list_ = new pbc::RepeatedField<global::PbCom.One_Rank_item>();
    /// <summary>
    ///排行榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbCom.One_Rank_item> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_Rank_List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_Rank_List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextRefTime != other.NextRefTime) return false;
      if (Type != other.Type) return false;
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextRefTime != 0) hash ^= NextRefTime.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextRefTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NextRefTime);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextRefTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextRefTime);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_Rank_List other) {
      if (other == null) {
        return;
      }
      if (other.NextRefTime != 0) {
        NextRefTime = other.NextRefTime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextRefTime = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::PbCom.Enum_Rank_type) input.ReadEnum();
            break;
          }
          case 26: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求查看其他玩家信息
  /// </summary>
  public sealed partial class CS_rank_lookPlayer : pb::IMessage<CS_rank_lookPlayer> {
    private static readonly pb::MessageParser<CS_rank_lookPlayer> _parser = new pb::MessageParser<CS_rank_lookPlayer>(() => new CS_rank_lookPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_rank_lookPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbRank.PbRankReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_rank_lookPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_rank_lookPlayer(CS_rank_lookPlayer other) : this() {
      pID_ = other.pID_;
      lookType_ = other.lookType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_rank_lookPlayer Clone() {
      return new CS_rank_lookPlayer(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private string pID_ = "";
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PID {
      get { return pID_; }
      set {
        pID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LookType" field.</summary>
    public const int LookTypeFieldNumber = 2;
    private global::PbRank.Enum_Look_type lookType_ = 0;
    /// <summary>
    ///查看类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbRank.Enum_Look_type LookType {
      get { return lookType_; }
      set {
        lookType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_rank_lookPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_rank_lookPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (LookType != other.LookType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID.Length != 0) hash ^= PID.GetHashCode();
      if (LookType != 0) hash ^= LookType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PID);
      }
      if (LookType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LookType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PID);
      }
      if (LookType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LookType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_rank_lookPlayer other) {
      if (other == null) {
        return;
      }
      if (other.PID.Length != 0) {
        PID = other.PID;
      }
      if (other.LookType != 0) {
        LookType = other.LookType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PID = input.ReadString();
            break;
          }
          case 16: {
            lookType_ = (global::PbRank.Enum_Look_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到查看其他玩家信息
  /// </summary>
  public sealed partial class SC_rank_lookPlayer : pb::IMessage<SC_rank_lookPlayer> {
    private static readonly pb::MessageParser<SC_rank_lookPlayer> _parser = new pb::MessageParser<SC_rank_lookPlayer>(() => new SC_rank_lookPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_rank_lookPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbRank.PbRankReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_rank_lookPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_rank_lookPlayer(SC_rank_lookPlayer other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      lookType_ = other.lookType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_rank_lookPlayer Clone() {
      return new SC_rank_lookPlayer(this);
    }

    /// <summary>Field number for the "PlayerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::PbCom.One_PlayerInfo playerInfo_;
    /// <summary>
    ///玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbCom.One_PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "LookType" field.</summary>
    public const int LookTypeFieldNumber = 2;
    private global::PbRank.Enum_Look_type lookType_ = 0;
    /// <summary>
    ///查看类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PbRank.Enum_Look_type LookType {
      get { return lookType_; }
      set {
        lookType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_rank_lookPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_rank_lookPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (LookType != other.LookType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (LookType != 0) hash ^= LookType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (LookType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LookType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (LookType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LookType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_rank_lookPlayer other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::PbCom.One_PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.LookType != 0) {
        LookType = other.LookType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::PbCom.One_PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            lookType_ = (global::PbRank.Enum_Look_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
